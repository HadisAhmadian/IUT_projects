;#include <header.h>
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;
;char* tmp="                  ";

	.DSEG
_0x20003:
	.BYTE 0x13
;char* str="                  ";
_0x20004:
	.BYTE 0x13
;char flag_3=0;
;int num;
;int index;
;char data_four;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0001 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 002C char status,data;
; 0001 002D status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 002E data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 002F 
; 0001 0030 if(flag_3==1)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 0031 {
; 0001 0032 switch(data) {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 0033   case '0':
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0034   case '1':
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0035   case '2':
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 0036   case '3':
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 0037   case '4':
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0038   case '5':
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0039   case '6':
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 003A   case '7':
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 003B   case '8':
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 003C   case '9':
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 003D     sprintf(tmp,"%c",data);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 003E     sscanf(tmp, "%d", &num);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 003F     printf("RX: Data is a integer and 10*data=%d\r\n",num*10);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 0040     break;
;PCODE: $0000006A VOL: 0
; 0001 0041 
; 0001 0042   case 'D':
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 0043     lcd_clear();
;PCODE: $0000006E VOL: 0
; 0001 0044     lcd_puts("lcd delete");
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0045     delay_ms(1000);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 0046     break;
;PCODE: $00000074 VOL: 0
; 0001 0047 
; 0001 0048   case 'H':
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 0049     printf("*******************\r\n");
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 004A     printf("Micro processor lab\r\n");
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 004B     printf("*******************\r\n");
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0001 004C     break;
;PCODE: $0000008D VOL: 0
; 0001 004D 
; 0001 004E   default:
;PCODE: $0000008E VOL: 0
; 0001 004F     printf("No function defined!");
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0050     break;
;PCODE: $00000096 VOL: 0
; 0001 0051 }
;PCODE: $00000097 VOL: 0
; 0001 0052 flag_3=0;
;PCODE: $00000098 VOL: 0
; 0001 0053 printf("part 3 end\r\n");
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 0054     }
; 0001 0055 
; 0001 0056 
; 0001 0057 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0001 0058    {
; 0001 0059    rx_buffer[rx_wr_index++]=data;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 005A #if RX_BUFFER_SIZE == 256
; 0001 005B    // special case for receiver buffer size=256
; 0001 005C    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0001 005D #else
; 0001 005E    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 005F    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 0060       {
; 0001 0061       rx_counter=0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 0062       rx_buffer_overflow=1;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 0063       }
; 0001 0064 #endif
; 0001 0065    }
;PCODE: $000000BB VOL: 0
; 0001 0066 }
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0

	.DSEG
_0x2001D:
	.BYTE 0xB
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0001 006D {

	.CSEG
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0001 006E char data;
; 0001 006F while (rx_counter==0);
;PCODE: $000000C3 VOL: 0
;	data -> R17
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 0070 data=rx_buffer[rx_rd_index++];
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 0071 #if RX_BUFFER_SIZE != 256
; 0001 0072 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 0073 #endif
; 0001 0074 #asm("cli")
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
	cli
;PCODE: $000000D8 VOL: 0
; 0001 0075 --rx_counter;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 0076 #asm("sei")
;PCODE: $000000DC VOL: 0
	sei
;PCODE: $000000DD VOL: 0
; 0001 0077 return data;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0078 }
;PCODE: $000000E1 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0001 008E {
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0001 008F if (tx_counter)
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0090    {
; 0001 0091    --tx_counter;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 0092    UDR=tx_buffer[tx_rd_index++];
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0001 0093 #if TX_BUFFER_SIZE != 256
; 0001 0094    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 0095 #endif
; 0001 0096    }
;PCODE: $000000F7 VOL: 0
; 0001 0097 }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0001 009E {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0001 009F while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $000000FE VOL: 0
;	c -> Y+0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 00A0 #asm("cli")
;PCODE: $00000105 VOL: 0
	cli
;PCODE: $00000106 VOL: 0
; 0001 00A1 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0001 00A2    {
; 0001 00A3    tx_buffer[tx_wr_index++]=c;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0001 00A4 #if TX_BUFFER_SIZE != 256
; 0001 00A5    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0001 00A6 #endif
; 0001 00A7    ++tx_counter;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0001 00A8    }
; 0001 00A9 else
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0001 00AA    UDR=c;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0001 00AB #asm("sei")
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
	sei
;PCODE: $00000126 VOL: 0
; 0001 00AC }
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;#pragma used-
;#endif
;
;
;
;
;void port_init()
; 0001 00B4 {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 00B5 // Input/Output Ports initialization
; 0001 00B6 // Port A initialization
; 0001 00B7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00B8 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 00B9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00BA PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 00BB 
; 0001 00BC // Port B initialization
; 0001 00BD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00BE DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0001 00BF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00C0 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0001 00C1 
; 0001 00C2 // Port C initialization
; 0001 00C3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00C4 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0001 00C5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00C6 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0001 00C7 
; 0001 00C8 // Port D initialization
; 0001 00C9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00CA DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0001 00CB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00CC PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0001 00CD }
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;
;
;void usart_init()
; 0001 00D1 {
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0001 00D2 // USART initialization
; 0001 00D3 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0001 00D4 // USART Receiver: On
; 0001 00D5 // USART Transmitter: On
; 0001 00D6 // USART Mode: Asynchronous
; 0001 00D7 // USART Baud Rate: 9600
; 0001 00D8 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 00D9 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0001 00DA UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0001 00DB UBRRH=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0001 00DC UBRRL=0x33;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0001 00DD 
; 0001 00DE 
; 0001 00DF }
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;
;
;
;void init_all()
; 0001 00E4 {
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0001 00E5 port_init();
;PCODE: $0000014E VOL: 0
; 0001 00E6 usart_init();
;PCODE: $0000014F VOL: 0
; 0001 00E7 // Alphanumeric LCD initialization
; 0001 00E8 // Connections are specified in the
; 0001 00E9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0001 00EA // RS - PORTC Bit 0
; 0001 00EB // RD - PORTC Bit 1
; 0001 00EC // EN - PORTC Bit 2
; 0001 00ED // D4 - PORTC Bit 4
; 0001 00EE // D5 - PORTC Bit 5
; 0001 00EF // D6 - PORTC Bit 6
; 0001 00F0 // D7 - PORTC Bit 7
; 0001 00F1 // Characters/line: 16
; 0001 00F2 lcd_init(16);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0001 00F3 }
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;
;
;
;void one(int baudrate,int rx,int tx)
; 0001 00F8 {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0001 00F9 
; 0001 00FA //tx=0 --> off
; 0001 00FB //tx=1 --> enable_noneinterrupt
; 0001 00FC //tx=2 --> enable_interrupt
; 0001 00FD 
; 0001 00FE //rx=0 --> off
; 0001 00FF //rx=1 --> enable_noneinterrupt
; 0001 0100 //rx=2 --> enable_interrupt
; 0001 0101 
; 0001 0102 switch(baudrate) {
;PCODE: $00000156 VOL: 0
;	baudrate -> Y+4
;	rx -> Y+2
;	tx -> Y+0
;PCODE: $00000157 VOL: 0
; 0001 0103   case 300:
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0001 0104     UBRRH=0x06;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0001 0105     UBRRL=0x82;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0001 0106     break;
;PCODE: $0000015E VOL: 0
; 0001 0107 
; 0001 0108   case 600:
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0001 0109     UBRRH=0x03;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0001 010A     UBRRL=0x40;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 010B     break;
;PCODE: $00000166 VOL: 0
; 0001 010C 
; 0001 010D   case 1200:
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0001 010E     UBRRH=0x01;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 010F     UBRRL=0xA0;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 0110     break;
;PCODE: $0000016E VOL: 0
; 0001 0111 
; 0001 0112   case 2400:
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0001 0113     UBRRH=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 0114     UBRRL=0xCF;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0001 0115     break;
;PCODE: $00000176 VOL: 0
; 0001 0116 
; 0001 0117   case 4800:
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0001 0118     UBRRH=0x00;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0001 0119     UBRRL=0x67;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 011A     break;
;PCODE: $0000017E VOL: 0
; 0001 011B 
; 0001 011C   case 9600:
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0001 011D     UBRRH=0x00;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0001 011E     UBRRL=0x33;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0001 011F     break;
;PCODE: $00000186 VOL: 0
; 0001 0120 
; 0001 0121   case 14400:
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0001 0122     UBRRH=0x00;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0001 0123     UBRRL=0x22;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0001 0124     break;
;PCODE: $0000018E VOL: 0
; 0001 0125 
; 0001 0126   case 19200:
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0001 0127     UBRRH=0x00;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 0128     UBRRL=0x19;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0001 0129     break;
;PCODE: $00000196 VOL: 0
; 0001 012A 
; 0001 012B   case 38400:
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0001 012C     UBRRH=0x00;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 012D     UBRRL=0x0C;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0001 012E     break;
;PCODE: $0000019E VOL: 0
; 0001 012F 
; 0001 0130   case 56000:
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0001 0131     UBRRH=0x00;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0001 0132     UBRRL=0x08;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0001 0133     break;
;PCODE: $000001A6 VOL: 0
; 0001 0134 
; 0001 0135   case 57600:
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0001 0136     UBRRH=0x00;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0001 0137     UBRRL=0x08;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0001 0138     break;
;PCODE: $000001AE VOL: 0
; 0001 0139 
; 0001 013A   case 115200:
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0001 013B     UBRRH=0x00;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0001 013C     UBRRL=0x03;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0001 013D     break;
;PCODE: $000001B6 VOL: 0
; 0001 013E 
; 0001 013F   default:
;PCODE: $000001B7 VOL: 0
; 0001 0140     UBRRH=0x00;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0001 0141     UBRRL=0x33;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0001 0142     break;
;PCODE: $000001BC VOL: 0
; 0001 0143 }
;PCODE: $000001BD VOL: 0
; 0001 0144 
; 0001 0145 
; 0001 0146 
; 0001 0147 
; 0001 0148 
; 0001 0149 
; 0001 014A 
; 0001 014B switch(tx) {
;PCODE: $000001BE VOL: 0
; 0001 014C   case 0:
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0001 014D     UCSRB &= !(1<<TXEN);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0001 014E     break;
;PCODE: $000001C4 VOL: 0
; 0001 014F 
; 0001 0150   case 1:
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0001 0151     UCSRB |= 1<<TXEN;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0001 0152     break;
;PCODE: $000001CA VOL: 0
; 0001 0153 
; 0001 0154   case 2:
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0001 0155     UCSRB |= 1<<TXEN;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0001 0156     UCSRB |= 1<<TXCIE;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0001 0157     break;
;PCODE: $000001D2 VOL: 0
; 0001 0158 
; 0001 0159   default:
;PCODE: $000001D3 VOL: 0
; 0001 015A     break;
;PCODE: $000001D4 VOL: 0
; 0001 015B }
;PCODE: $000001D5 VOL: 0
; 0001 015C 
; 0001 015D 
; 0001 015E 
; 0001 015F switch(rx) {
;PCODE: $000001D6 VOL: 0
; 0001 0160   case 0:
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0001 0161     UCSRB &= !(1<<RXEN);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0001 0162     break;
;PCODE: $000001DC VOL: 0
; 0001 0163 
; 0001 0164   case 1:
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0001 0165     UCSRB |= 1<<RXEN;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0001 0166     break;
;PCODE: $000001E2 VOL: 0
; 0001 0167 
; 0001 0168   case 2:
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0001 0169    UCSRB |= 1<<RXEN;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0001 016A    UCSRB |= 1<<RXCIE;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 016B     break;
;PCODE: $000001EA VOL: 0
; 0001 016C 
; 0001 016D   default:
;PCODE: $000001EB VOL: 0
; 0001 016E     break;
;PCODE: $000001EC VOL: 0
; 0001 016F }
;PCODE: $000001ED VOL: 0
; 0001 0170 
; 0001 0171 
; 0001 0172 }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;
;
;
;
;void two()
; 0001 0178 {
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0001 0179 one(9600,1,1);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0001 017A scanf("%s",tmp);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0001 017B sprintf(str,"(%s)\n",tmp);
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0001 017C printf("%s\n",str);
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0001 017D }
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;
;
;
;void three()
; 0001 0182 {
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0001 0183 one(9600,1,2);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0001 0184 flag_3=1;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0001 0185 }
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;
;
;void four_read()
; 0001 0189 {
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0001 018A 
; 0001 018B   data_four=getchar();
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0001 018C   if(index==0&& data_four!='(')
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0001 018D   {
; 0001 018E     index=0;
;PCODE: $00000235 VOL: 0
; 0001 018F     lcd_clear();
;PCODE: $00000236 VOL: 0
; 0001 0190   }
; 0001 0191   else if(index==0)
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0001 0192     index++;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0001 0193   else if(index>0&&index<6)
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0001 0194     {
; 0001 0195 
; 0001 0196         switch(data_four) {
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0001 0197              case '0':
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0001 0198              case '1':
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0001 0199              case '2':
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0001 019A              case '3':
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0001 019B              case '4':
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0001 019C              case '5':
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0001 019D              case '6':
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0001 019E              case '7':
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0001 019F              case '8':
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0001 01A0              case '9':
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0001 01A1              lcd_putchar(data_four);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0001 01A2              index++;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0001 01A3              break;
;PCODE: $00000281 VOL: 0
; 0001 01A4 
; 0001 01A5              case ')':
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0001 01A6              lcd_clear();
;PCODE: $00000285 VOL: 0
; 0001 01A7              printf("length of format not correct\r\n");
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0001 01A8              index=0;
;PCODE: $0000028D VOL: 0
; 0001 01A9              break;
;PCODE: $0000028E VOL: 0
; 0001 01AA 
; 0001 01AB              default:
;PCODE: $0000028F VOL: 0
; 0001 01AC              lcd_clear();
;PCODE: $00000290 VOL: 0
; 0001 01AD              printf("Frame must be 5 integer\r\n");
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0001 01AE              index=0;
;PCODE: $00000298 VOL: 0
; 0001 01AF              break;
;PCODE: $00000299 VOL: 0
; 0001 01B0         }
;PCODE: $0000029A VOL: 0
; 0001 01B1 
; 0001 01B2     }
; 0001 01B3 
; 0001 01B4     else if(index==6&&data_four!=')')
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0001 01B5     {
; 0001 01B6       lcd_clear();
;PCODE: $000002A7 VOL: 0
; 0001 01B7       printf("Frame must be 5 integer\r\n");
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0001 01B8       index=0;
;PCODE: $000002AF VOL: 0
; 0001 01B9     }
; 0001 01BA 
; 0001 01BB     else if(index==6)
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0001 01BC     {  lcd_puts("\nend of frame");
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0001 01BD         delay_ms(1000);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0001 01BE          lcd_clear();
;PCODE: $000002BA VOL: 0
; 0001 01BF        index=0;
;PCODE: $000002BB VOL: 0
; 0001 01C0     }
; 0001 01C1 }
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0

	.DSEG
_0x20076:
	.BYTE 0xE
;
;
;void four()
; 0001 01C5 {

	.CSEG
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0001 01C6 while(flag_3);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0001 01C7 printf("\r\npart 4 start\r\n");
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0001 01C8 one(9600,2,2);
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0001 01C9 while(1)
;PCODE: $000002D8 VOL: 0
; 0001 01CA {
; 0001 01CB  four_read();
;PCODE: $000002D9 VOL: 0
; 0001 01CC }
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0001 01CD 
; 0001 01CE 
; 0001 01CF }
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;
