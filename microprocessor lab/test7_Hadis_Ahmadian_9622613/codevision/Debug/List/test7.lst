
AVRASM ver. 2.1.30  E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm Thu Dec 10 00:33:46 2020

E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1092): warning: Register r9 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1093): warning: Register r10 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1094): warning: Register r11 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1095): warning: Register r12 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1096): warning: Register r13 already defined by the .DEF directive
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1097): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _tmp=R4
                 	.DEF _tmp_msb=R5
                 	.DEF _str=R6
                 	.DEF _str_msb=R7
                 	.DEF _flag_3=R9
                 	.DEF _num=R10
                 	.DEF _num_msb=R11
                 	.DEF _index=R12
                 	.DEF _index_msb=R13
                 	.DEF _data_four=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00e9 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 012d 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0219 	JMP  _usart_tx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0160
000035 0173      	.DB  LOW(_0x20003),HIGH(_0x20003),LOW(_0x20004),HIGH(_0x20004)
000036 0000      	.DB  0x0,0x0
                 
                 _0x0:
000037 6170
000038 7472
000039 3220
00003a 7320      	.DB  0x70,0x61,0x72,0x74,0x20,0x32,0x20,0x73
00003b 6174
00003c 7274
00003d 3a74
00003e 2020      	.DB  0x74,0x61,0x74,0x72,0x74,0x3A,0x20,0x20
00003f 0a0d
000040 0d00
000041 700a
000042 7261      	.DB  0xD,0xA,0x0,0xD,0xA,0x70,0x61,0x72
000043 2074
000044 2032
000045 6e65
000046 0d64      	.DB  0x74,0x20,0x32,0x20,0x65,0x6E,0x64,0xD
000047 000a
000048 0a0d
000049 6170
00004a 7472      	.DB  0xA,0x0,0xD,0xA,0x70,0x61,0x72,0x74
00004b 3320
00004c 7320
00004d 6174
00004e 7274      	.DB  0x20,0x33,0x20,0x73,0x74,0x61,0x74,0x72
00004f 3a74
000050 2020
000051 0a0d
E:\project\test7_Hadis_Ahmadian_9622613\codevision\Debug\List\test7.asm(1150): warning: .cseg .db misalignment - padding zero byte
000052 0000      	.DB  0x74,0x3A,0x20,0x20,0xD,0xA,0x0
                 _0x20000:
000053 2020
000054 2020
000055 2020
000056 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000057 2020
000058 2020
000059 2020
00005a 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00005b 2020
00005c 2500
00005d 0063
00005e 6425      	.DB  0x20,0x20,0x0,0x25,0x63,0x0,0x25,0x64
00005f 5200
000060 3a58
000061 4420
000062 7461      	.DB  0x0,0x52,0x58,0x3A,0x20,0x44,0x61,0x74
000063 2061
000064 7369
000065 6120
000066 6920      	.DB  0x61,0x20,0x69,0x73,0x20,0x61,0x20,0x69
000067 746e
000068 6765
000069 7265
00006a 6120      	.DB  0x6E,0x74,0x65,0x67,0x65,0x72,0x20,0x61
00006b 646e
00006c 3120
00006d 2a30
00006e 6164      	.DB  0x6E,0x64,0x20,0x31,0x30,0x2A,0x64,0x61
00006f 6174
000070 253d
000071 0d64
000072 000a      	.DB  0x74,0x61,0x3D,0x25,0x64,0xD,0xA,0x0
000073 636c
000074 2064
000075 6564
000076 656c      	.DB  0x6C,0x63,0x64,0x20,0x64,0x65,0x6C,0x65
000077 6574
000078 2a00
000079 2a2a
00007a 2a2a      	.DB  0x74,0x65,0x0,0x2A,0x2A,0x2A,0x2A,0x2A
00007b 2a2a
00007c 2a2a
00007d 2a2a
00007e 2a2a      	.DB  0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A
00007f 2a2a
000080 2a2a
000081 2a2a
000082 0a0d      	.DB  0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0xD,0xA
000083 4d00
000084 6369
000085 6f72
000086 7020      	.DB  0x0,0x4D,0x69,0x63,0x72,0x6F,0x20,0x70
000087 6f72
000088 6563
000089 7373
00008a 726f      	.DB  0x72,0x6F,0x63,0x65,0x73,0x73,0x6F,0x72
00008b 6c20
00008c 6261
00008d 0a0d
00008e 4e00      	.DB  0x20,0x6C,0x61,0x62,0xD,0xA,0x0,0x4E
00008f 206f
000090 7566
000091 636e
000092 6974      	.DB  0x6F,0x20,0x66,0x75,0x6E,0x63,0x74,0x69
000093 6e6f
000094 6420
000095 6665
000096 6e69      	.DB  0x6F,0x6E,0x20,0x64,0x65,0x66,0x69,0x6E
000097 6465
000098 0021
000099 6170
00009a 7472      	.DB  0x65,0x64,0x21,0x0,0x70,0x61,0x72,0x74
00009b 3320
00009c 6520
00009d 646e
00009e 0a0d      	.DB  0x20,0x33,0x20,0x65,0x6E,0x64,0xD,0xA
00009f 2500
0000a0 0073
0000a1 2528
0000a2 2973      	.DB  0x0,0x25,0x73,0x0,0x28,0x25,0x73,0x29
0000a3 000a
0000a4 7325
0000a5 000a
0000a6 656c      	.DB  0xA,0x0,0x25,0x73,0xA,0x0,0x6C,0x65
0000a7 676e
0000a8 6874
0000a9 6f20
0000aa 2066      	.DB  0x6E,0x67,0x74,0x68,0x20,0x6F,0x66,0x20
0000ab 6f66
0000ac 6d72
0000ad 7461
0000ae 6e20      	.DB  0x66,0x6F,0x72,0x6D,0x61,0x74,0x20,0x6E
0000af 746f
0000b0 6320
0000b1 726f
0000b2 6572      	.DB  0x6F,0x74,0x20,0x63,0x6F,0x72,0x72,0x65
0000b3 7463
0000b4 0a0d
0000b5 4600
0000b6 6172      	.DB  0x63,0x74,0xD,0xA,0x0,0x46,0x72,0x61
0000b7 656d
0000b8 6d20
0000b9 7375
0000ba 2074      	.DB  0x6D,0x65,0x20,0x6D,0x75,0x73,0x74,0x20
0000bb 6562
0000bc 3520
0000bd 6920
0000be 746e      	.DB  0x62,0x65,0x20,0x35,0x20,0x69,0x6E,0x74
0000bf 6765
0000c0 7265
0000c1 0a0d
0000c2 0a00      	.DB  0x65,0x67,0x65,0x72,0xD,0xA,0x0,0xA
0000c3 6e65
0000c4 2064
0000c5 666f
0000c6 6620      	.DB  0x65,0x6E,0x64,0x20,0x6F,0x66,0x20,0x66
0000c7 6172
0000c8 656d
0000c9 0d00
0000ca 700a      	.DB  0x72,0x61,0x6D,0x65,0x0,0xD,0xA,0x70
0000cb 7261
0000cc 2074
0000cd 2034
0000ce 7473      	.DB  0x61,0x72,0x74,0x20,0x34,0x20,0x73,0x74
0000cf 7261
0000d0 0d74
0000d1 000a      	.DB  0x61,0x72,0x74,0xD,0xA,0x0
                 _0x2020003:
0000d2 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000d3 0001      	.DW  0x01
0000d4 0002      	.DW  0x02
0000d5 0066      	.DW  __REG_BIT_VARS*2
                 
0000d6 0006      	.DW  0x06
0000d7 0004      	.DW  0x04
0000d8 0068      	.DW  __REG_VARS*2
                 
0000d9 0013      	.DW  0x13
0000da 0160      	.DW  _0x20003
0000db 00a6      	.DW  _0x20000*2
                 
0000dc 0013      	.DW  0x13
0000dd 0173      	.DW  _0x20004
0000de 00a6      	.DW  _0x20000*2
                 
0000df 000b      	.DW  0x0B
0000e0 0186      	.DW  _0x2001D
0000e1 00e6      	.DW  _0x20000*2+64
                 
0000e2 000e      	.DW  0x0E
0000e3 0191      	.DW  _0x20076
0000e4 0185      	.DW  _0x20000*2+223
                 
0000e5 0002      	.DW  0x02
0000e6 01b5      	.DW  __base_y_G101
0000e7 01a4      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000e8 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000e9 94f8      	CLI
0000ea 27ee      	CLR  R30
0000eb bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ec e0f1      	LDI  R31,1
0000ed bffb      	OUT  GICR,R31
0000ee bfeb      	OUT  GICR,R30
0000ef bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000f0 e08d      	LDI  R24,(14-2)+1
0000f1 e0a2      	LDI  R26,2
0000f2 27bb      	CLR  R27
                 __CLEAR_REG:
0000f3 93ed      	ST   X+,R30
0000f4 958a      	DEC  R24
0000f5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000f6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000f7 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000f8 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000f9 93ed      	ST   X+,R30
0000fa 9701      	SBIW R24,1
0000fb f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000fc eae6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000fd e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000fe 9185      	LPM  R24,Z+
0000ff 9195      	LPM  R25,Z+
000100 9700      	SBIW R24,0
000101 f061      	BREQ __GLOBAL_INI_END
000102 91a5      	LPM  R26,Z+
000103 91b5      	LPM  R27,Z+
000104 9005      	LPM  R0,Z+
000105 9015      	LPM  R1,Z+
000106 01bf      	MOVW R22,R30
000107 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000108 9005      	LPM  R0,Z+
000109 920d      	ST   X+,R0
00010a 9701      	SBIW R24,1
00010b f7e1      	BRNE __GLOBAL_INI_LOOP
00010c 01fb      	MOVW R30,R22
00010d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00010e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00010f bfed      	OUT  SPL,R30
000110 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000111 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000112 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000113 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000114 940c 0116 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <header.h>
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005 
                 ; 0000 0006 init_all();
000116 940e 027b 	CALL _init_all
                 ; 0000 0007 // Global enable interrupts
                 ; 0000 0008 #asm("sei")
000118 9478      	sei
                 ; 0000 0009 
                 ; 0000 000A printf("part 2 statrt:  \r\n");
                +
000119 e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00011a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00011b 940e 0829 	CALL SUBOPT_0x0
                 ; 0000 000B two();
00011d 940e 030e 	CALL _two
                 ; 0000 000C printf("\r\npart 2 end\r\n");
                +
00011f e8e1     +LDI R30 , LOW ( 2 * _0x0 + ( 19 ) )
000120 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 19 ) )
                 	__POINTW1FN _0x0,19
000121 940e 0829 	CALL SUBOPT_0x0
                 ; 0000 000D printf("\r\npart 3 statrt:  \r\n");
                +
000123 e9e0     +LDI R30 , LOW ( 2 * _0x0 + ( 34 ) )
000124 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW1FN _0x0,34
000125 940e 0829 	CALL SUBOPT_0x0
                 ; 0000 000E three();
000127 940e 0338 	CALL _three
                 ; 0000 000F 
                 ; 0000 0010 
                 ; 0000 0011 four();
000129 940e 03ce 	CALL _four
                 ; 0000 0012 
                 ; 0000 0013 while (1)
                 _0x3:
                 ; 0000 0014     {
                 ; 0000 0015     // Please write your application code here
                 ; 0000 0016 
                 ; 0000 0017     }
00012b cfff      	RJMP _0x3
                 ; 0000 0018 }
                 _0x6:
00012c cfff      	RJMP _0x6
                 ; .FEND
                 ;#include <header.h>
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;
                 ;char* tmp="                  ";
                 
                 	.DSEG
                 _0x20003:
000160           	.BYTE 0x13
                 ;char* str="                  ";
                 _0x20004:
000173           	.BYTE 0x13
                 ;char flag_3=0;
                 ;int num;
                 ;int index;
                 ;char data_four;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0001 002B {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00012d 920a      	ST   -Y,R0
00012e 921a      	ST   -Y,R1
00012f 92fa      	ST   -Y,R15
000130 936a      	ST   -Y,R22
000131 937a      	ST   -Y,R23
000132 938a      	ST   -Y,R24
000133 939a      	ST   -Y,R25
000134 93aa      	ST   -Y,R26
000135 93ba      	ST   -Y,R27
000136 93ea      	ST   -Y,R30
000137 93fa      	ST   -Y,R31
000138 b7ef      	IN   R30,SREG
000139 93ea      	ST   -Y,R30
                 ; 0001 002C char status,data;
                 ; 0001 002D status=UCSRA;
00013a 931a      	ST   -Y,R17
00013b 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00013c b11b      	IN   R17,11
                 ; 0001 002E data=UDR;
00013d b10c      	IN   R16,12
                 ; 0001 002F 
                 ; 0001 0030 if(flag_3==1)
00013e e0e1      	LDI  R30,LOW(1)
00013f 15e9      	CP   R30,R9
000140 f009      	BREQ PC+2
000141 c087      	RJMP _0x20005
                 ; 0001 0031 {
                 ; 0001 0032 switch(data) {
000142 2fe0      	MOV  R30,R16
000143 e0f0      	LDI  R31,0
                 ; 0001 0033   case '0':
000144 33e0      	CPI  R30,LOW(0x30)
000145 e0a0      	LDI  R26,HIGH(0x30)
000146 07fa      	CPC  R31,R26
000147 f021      	BREQ _0x2000A
                 ; 0001 0034   case '1':
000148 33e1      	CPI  R30,LOW(0x31)
000149 e0a0      	LDI  R26,HIGH(0x31)
00014a 07fa      	CPC  R31,R26
00014b f409      	BRNE _0x2000B
                 _0x2000A:
                 ; 0001 0035   case '2':
00014c c004      	RJMP _0x2000C
                 _0x2000B:
00014d 33e2      	CPI  R30,LOW(0x32)
00014e e0a0      	LDI  R26,HIGH(0x32)
00014f 07fa      	CPC  R31,R26
000150 f409      	BRNE _0x2000D
                 _0x2000C:
                 ; 0001 0036   case '3':
000151 c004      	RJMP _0x2000E
                 _0x2000D:
000152 33e3      	CPI  R30,LOW(0x33)
000153 e0a0      	LDI  R26,HIGH(0x33)
000154 07fa      	CPC  R31,R26
000155 f409      	BRNE _0x2000F
                 _0x2000E:
                 ; 0001 0037   case '4':
000156 c004      	RJMP _0x20010
                 _0x2000F:
000157 33e4      	CPI  R30,LOW(0x34)
000158 e0a0      	LDI  R26,HIGH(0x34)
000159 07fa      	CPC  R31,R26
00015a f409      	BRNE _0x20011
                 _0x20010:
                 ; 0001 0038   case '5':
00015b c004      	RJMP _0x20012
                 _0x20011:
00015c 33e5      	CPI  R30,LOW(0x35)
00015d e0a0      	LDI  R26,HIGH(0x35)
00015e 07fa      	CPC  R31,R26
00015f f409      	BRNE _0x20013
                 _0x20012:
                 ; 0001 0039   case '6':
000160 c004      	RJMP _0x20014
                 _0x20013:
000161 33e6      	CPI  R30,LOW(0x36)
000162 e0a0      	LDI  R26,HIGH(0x36)
000163 07fa      	CPC  R31,R26
000164 f409      	BRNE _0x20015
                 _0x20014:
                 ; 0001 003A   case '7':
000165 c004      	RJMP _0x20016
                 _0x20015:
000166 33e7      	CPI  R30,LOW(0x37)
000167 e0a0      	LDI  R26,HIGH(0x37)
000168 07fa      	CPC  R31,R26
000169 f409      	BRNE _0x20017
                 _0x20016:
                 ; 0001 003B   case '8':
00016a c004      	RJMP _0x20018
                 _0x20017:
00016b 33e8      	CPI  R30,LOW(0x38)
00016c e0a0      	LDI  R26,HIGH(0x38)
00016d 07fa      	CPC  R31,R26
00016e f409      	BRNE _0x20019
                 _0x20018:
                 ; 0001 003C   case '9':
00016f c004      	RJMP _0x2001A
                 _0x20019:
000170 33e9      	CPI  R30,LOW(0x39)
000171 e0a0      	LDI  R26,HIGH(0x39)
000172 07fa      	CPC  R31,R26
000173 f571      	BRNE _0x2001B
                 _0x2001A:
                 ; 0001 003D     sprintf(tmp,"%c",data);
000174 925a      	ST   -Y,R5
000175 924a      	ST   -Y,R4
                +
000176 ebe9     +LDI R30 , LOW ( 2 * _0x20000 + ( 19 ) )
000177 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 19 ) )
                 	__POINTW1FN _0x20000,19
000178 93fa      	ST   -Y,R31
000179 93ea      	ST   -Y,R30
00017a 2fe0      	MOV  R30,R16
00017b 27ff      	CLR  R31
00017c 2766      	CLR  R22
00017d 2777      	CLR  R23
00017e 940e 0830 	CALL SUBOPT_0x1
                 ; 0001 003E     sscanf(tmp, "%d", &num);
000180 925a      	ST   -Y,R5
000181 924a      	ST   -Y,R4
                +
000182 ebec     +LDI R30 , LOW ( 2 * _0x20000 + ( 22 ) )
000183 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 22 ) )
                 	__POINTW1FN _0x20000,22
000184 93fa      	ST   -Y,R31
000185 93ea      	ST   -Y,R30
                +
000186 e0ea     +LDI R30 , LOW ( 0xA )
000187 e0f0     +LDI R31 , HIGH ( 0xA )
000188 e060     +LDI R22 , BYTE3 ( 0xA )
000189 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00018a 940e 08f8 	CALL __PUTPARD1
00018c e084      	LDI  R24,4
00018d 940e 0715 	CALL _sscanf
00018f 9628      	ADIW R28,8
                 ; 0001 003F     printf("RX: Data is a integer and 10*data=%d\r\n",num*10);
                +
000190 ebef     +LDI R30 , LOW ( 2 * _0x20000 + ( 25 ) )
000191 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 25 ) )
                 	__POINTW1FN _0x20000,25
000192 93fa      	ST   -Y,R31
000193 93ea      	ST   -Y,R30
000194 01f5      	MOVW R30,R10
000195 e0aa      	LDI  R26,LOW(10)
000196 e0b0      	LDI  R27,HIGH(10)
000197 940e 08dd 	CALL __MULW12
000199 940e 08d0 	CALL __CWD1
00019b 940e 08f8 	CALL __PUTPARD1
00019d e084      	LDI  R24,4
00019e 940e 0586 	CALL _printf
0001a0 9626      	ADIW R28,6
                 ; 0001 0040     break;
0001a1 c022      	RJMP _0x20008
                 ; 0001 0041 
                 ; 0001 0042   case 'D':
                 _0x2001B:
0001a2 34e4      	CPI  R30,LOW(0x44)
0001a3 e0a0      	LDI  R26,HIGH(0x44)
0001a4 07fa      	CPC  R31,R26
0001a5 f439      	BRNE _0x2001C
                 ; 0001 0043     lcd_clear();
0001a6 940e 077f 	CALL _lcd_clear
                 ; 0001 0044     lcd_puts("lcd delete");
                +
0001a8 e8a6     +LDI R26 , LOW ( _0x2001D + ( 0 ) )
0001a9 e0b1     +LDI R27 , HIGH ( _0x2001D + ( 0 ) )
                 	__POINTW2MN _0x2001D,0
0001aa 940e 0837 	CALL SUBOPT_0x2
                 ; 0001 0045     delay_ms(1000);
                 ; 0001 0046     break;
0001ac c017      	RJMP _0x20008
                 ; 0001 0047 
                 ; 0001 0048   case 'H':
                 _0x2001C:
0001ad 34e8      	CPI  R30,LOW(0x48)
0001ae e0a0      	LDI  R26,HIGH(0x48)
0001af 07fa      	CPC  R31,R26
0001b0 f459      	BRNE _0x2001F
                 ; 0001 0049     printf("*******************\r\n");
                +
0001b1 efe1     +LDI R30 , LOW ( 2 * _0x20000 + ( 75 ) )
0001b2 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 75 ) )
                 	__POINTW1FN _0x20000,75
0001b3 940e 0829 	CALL SUBOPT_0x0
                 ; 0001 004A     printf("Micro processor lab\r\n");
                +
0001b5 e0e7     +LDI R30 , LOW ( 2 * _0x20000 + ( 97 ) )
0001b6 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 97 ) )
                 	__POINTW1FN _0x20000,97
0001b7 940e 0829 	CALL SUBOPT_0x0
                 ; 0001 004B     printf("*******************\r\n");
                +
0001b9 efe1     +LDI R30 , LOW ( 2 * _0x20000 + ( 75 ) )
0001ba e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 75 ) )
                 	__POINTW1FN _0x20000,75
0001bb c002      	RJMP _0x2007D
                 ; 0001 004C     break;
                 ; 0001 004D 
                 ; 0001 004E   default:
                 _0x2001F:
                 ; 0001 004F     printf("No function defined!");
                +
0001bc e1ed     +LDI R30 , LOW ( 2 * _0x20000 + ( 119 ) )
0001bd e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 119 ) )
                 	__POINTW1FN _0x20000,119
                 _0x2007D:
0001be 93fa      	ST   -Y,R31
0001bf 93ea      	ST   -Y,R30
0001c0 e080      	LDI  R24,0
0001c1 940e 0586 	CALL _printf
0001c3 9622      	ADIW R28,2
                 ; 0001 0050     break;
                 ; 0001 0051 }
                 _0x20008:
                 ; 0001 0052 flag_3=0;
0001c4 2499      	CLR  R9
                 ; 0001 0053 printf("part 3 end\r\n");
                +
0001c5 e3e2     +LDI R30 , LOW ( 2 * _0x20000 + ( 140 ) )
0001c6 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 140 ) )
                 	__POINTW1FN _0x20000,140
0001c7 940e 0829 	CALL SUBOPT_0x0
                 ; 0001 0054     }
                 ; 0001 0055 
                 ; 0001 0056 
                 ; 0001 0057 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
                 _0x20005:
0001c9 2fe1      	MOV  R30,R17
0001ca 71ec      	ANDI R30,LOW(0x1C)
0001cb f4e9      	BRNE _0x20020
                 ; 0001 0058    {
                 ; 0001 0059    rx_buffer[rx_wr_index++]=data;
0001cc 91e0 01a7 	LDS  R30,_rx_wr_index
0001ce 5fef      	SUBI R30,-LOW(1)
0001cf 93e0 01a7 	STS  _rx_wr_index,R30
0001d1 50e1      	SUBI R30,LOW(1)
0001d2 e0f0      	LDI  R31,0
0001d3 56e1      	SUBI R30,LOW(-_rx_buffer)
0001d4 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0001d5 8300      	ST   Z,R16
                 ; 0001 005A #if RX_BUFFER_SIZE == 256
                 ; 0001 005B    // special case for receiver buffer size=256
                 ; 0001 005C    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0001 005D #else
                 ; 0001 005E    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0001d6 91a0 01a7 	LDS  R26,_rx_wr_index
0001d8 30a8      	CPI  R26,LOW(0x8)
0001d9 f419      	BRNE _0x20021
0001da e0e0      	LDI  R30,LOW(0)
0001db 93e0 01a7 	STS  _rx_wr_index,R30
                 ; 0001 005F    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x20021:
0001dd 91a0 01a9 	LDS  R26,_rx_counter
0001df 5faf      	SUBI R26,-LOW(1)
0001e0 93a0 01a9 	STS  _rx_counter,R26
0001e2 30a8      	CPI  R26,LOW(0x8)
0001e3 f429      	BRNE _0x20022
                 ; 0001 0060       {
                 ; 0001 0061       rx_counter=0;
0001e4 e0e0      	LDI  R30,LOW(0)
0001e5 93e0 01a9 	STS  _rx_counter,R30
                 ; 0001 0062       rx_buffer_overflow=1;
0001e7 9468      	SET
0001e8 f820      	BLD  R2,0
                 ; 0001 0063       }
                 ; 0001 0064 #endif
                 ; 0001 0065    }
                 _0x20022:
                 ; 0001 0066 }
                 _0x20020:
0001e9 9109      	LD   R16,Y+
0001ea 9119      	LD   R17,Y+
0001eb 91e9      	LD   R30,Y+
0001ec bfef      	OUT  SREG,R30
0001ed 91f9      	LD   R31,Y+
0001ee 91e9      	LD   R30,Y+
0001ef 91b9      	LD   R27,Y+
0001f0 91a9      	LD   R26,Y+
0001f1 9199      	LD   R25,Y+
0001f2 9189      	LD   R24,Y+
0001f3 9179      	LD   R23,Y+
0001f4 9169      	LD   R22,Y+
0001f5 90f9      	LD   R15,Y+
0001f6 9019      	LD   R1,Y+
0001f7 9009      	LD   R0,Y+
0001f8 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x2001D:
000186           	.BYTE 0xB
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0001 006D {
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 ; 0001 006E char data;
                 ; 0001 006F while (rx_counter==0);
0001f9 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x20023:
0001fa 91e0 01a9 	LDS  R30,_rx_counter
0001fc 30e0      	CPI  R30,0
0001fd f3e1      	BREQ _0x20023
                 ; 0001 0070 data=rx_buffer[rx_rd_index++];
0001fe 91e0 01a8 	LDS  R30,_rx_rd_index
000200 5fef      	SUBI R30,-LOW(1)
000201 93e0 01a8 	STS  _rx_rd_index,R30
000203 50e1      	SUBI R30,LOW(1)
000204 e0f0      	LDI  R31,0
000205 56e1      	SUBI R30,LOW(-_rx_buffer)
000206 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000207 8110      	LD   R17,Z
                 ; 0001 0071 #if RX_BUFFER_SIZE != 256
                 ; 0001 0072 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
000208 91a0 01a8 	LDS  R26,_rx_rd_index
00020a 30a8      	CPI  R26,LOW(0x8)
00020b f419      	BRNE _0x20026
00020c e0e0      	LDI  R30,LOW(0)
00020d 93e0 01a8 	STS  _rx_rd_index,R30
                 ; 0001 0073 #endif
                 ; 0001 0074 #asm("cli")
                 _0x20026:
00020f 94f8      	cli
                 ; 0001 0075 --rx_counter;
000210 91e0 01a9 	LDS  R30,_rx_counter
000212 50e1      	SUBI R30,LOW(1)
000213 93e0 01a9 	STS  _rx_counter,R30
                 ; 0001 0076 #asm("sei")
000215 9478      	sei
                 ; 0001 0077 return data;
000216 2fe1      	MOV  R30,R17
000217 9119      	LD   R17,Y+
000218 9508      	RET
                 ; 0001 0078 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0001 008E {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
000219 93aa      	ST   -Y,R26
00021a 93ea      	ST   -Y,R30
00021b 93fa      	ST   -Y,R31
00021c b7ef      	IN   R30,SREG
00021d 93ea      	ST   -Y,R30
                 ; 0001 008F if (tx_counter)
00021e 91e0 01b4 	LDS  R30,_tx_counter
000220 30e0      	CPI  R30,0
000221 f0a9      	BREQ _0x20027
                 ; 0001 0090    {
                 ; 0001 0091    --tx_counter;
000222 50e1      	SUBI R30,LOW(1)
000223 93e0 01b4 	STS  _tx_counter,R30
                 ; 0001 0092    UDR=tx_buffer[tx_rd_index++];
000225 91e0 01b3 	LDS  R30,_tx_rd_index
000227 5fef      	SUBI R30,-LOW(1)
000228 93e0 01b3 	STS  _tx_rd_index,R30
00022a 50e1      	SUBI R30,LOW(1)
00022b e0f0      	LDI  R31,0
00022c 55e6      	SUBI R30,LOW(-_tx_buffer)
00022d 4ffe      	SBCI R31,HIGH(-_tx_buffer)
00022e 81e0      	LD   R30,Z
00022f b9ec      	OUT  0xC,R30
                 ; 0001 0093 #if TX_BUFFER_SIZE != 256
                 ; 0001 0094    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
000230 91a0 01b3 	LDS  R26,_tx_rd_index
000232 30a8      	CPI  R26,LOW(0x8)
000233 f419      	BRNE _0x20028
000234 e0e0      	LDI  R30,LOW(0)
000235 93e0 01b3 	STS  _tx_rd_index,R30
                 ; 0001 0095 #endif
                 ; 0001 0096    }
                 _0x20028:
                 ; 0001 0097 }
                 _0x20027:
000237 91e9      	LD   R30,Y+
000238 bfef      	OUT  SREG,R30
000239 91f9      	LD   R31,Y+
00023a 91e9      	LD   R30,Y+
00023b 91a9      	LD   R26,Y+
00023c 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0001 009E {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0001 009F while (tx_counter == TX_BUFFER_SIZE);
00023d 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x20029:
00023e 91a0 01b4 	LDS  R26,_tx_counter
000240 30a8      	CPI  R26,LOW(0x8)
000241 f3e1      	BREQ _0x20029
                 ; 0001 00A0 #asm("cli")
000242 94f8      	cli
                 ; 0001 00A1 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000243 91e0 01b4 	LDS  R30,_tx_counter
000245 30e0      	CPI  R30,0
000246 f411      	BRNE _0x2002D
000247 995d      	SBIC 0xB,5
000248 c018      	RJMP _0x2002C
                 _0x2002D:
                 ; 0001 00A2    {
                 ; 0001 00A3    tx_buffer[tx_wr_index++]=c;
000249 91e0 01b2 	LDS  R30,_tx_wr_index
00024b 5fef      	SUBI R30,-LOW(1)
00024c 93e0 01b2 	STS  _tx_wr_index,R30
00024e 50e1      	SUBI R30,LOW(1)
00024f e0f0      	LDI  R31,0
000250 55e6      	SUBI R30,LOW(-_tx_buffer)
000251 4ffe      	SBCI R31,HIGH(-_tx_buffer)
000252 81a8      	LD   R26,Y
000253 83a0      	STD  Z+0,R26
                 ; 0001 00A4 #if TX_BUFFER_SIZE != 256
                 ; 0001 00A5    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000254 91a0 01b2 	LDS  R26,_tx_wr_index
000256 30a8      	CPI  R26,LOW(0x8)
000257 f419      	BRNE _0x2002F
000258 e0e0      	LDI  R30,LOW(0)
000259 93e0 01b2 	STS  _tx_wr_index,R30
                 ; 0001 00A6 #endif
                 ; 0001 00A7    ++tx_counter;
                 _0x2002F:
00025b 91e0 01b4 	LDS  R30,_tx_counter
00025d 5fef      	SUBI R30,-LOW(1)
00025e 93e0 01b4 	STS  _tx_counter,R30
                 ; 0001 00A8    }
                 ; 0001 00A9 else
000260 c002      	RJMP _0x20030
                 _0x2002C:
                 ; 0001 00AA    UDR=c;
000261 81e8      	LD   R30,Y
000262 b9ec      	OUT  0xC,R30
                 ; 0001 00AB #asm("sei")
                 _0x20030:
000263 9478      	sei
                 ; 0001 00AC }
000264 940c 07eb 	JMP  _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;
                 ;
                 ;void port_init()
                 ; 0001 00B4 {
                 _port_init:
                 ; .FSTART _port_init
                 ; 0001 00B5 // Input/Output Ports initialization
                 ; 0001 00B6 // Port A initialization
                 ; 0001 00B7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 00B8 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000266 e0e0      	LDI  R30,LOW(0)
000267 bbea      	OUT  0x1A,R30
                 ; 0001 00B9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 00BA PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000268 bbeb      	OUT  0x1B,R30
                 ; 0001 00BB 
                 ; 0001 00BC // Port B initialization
                 ; 0001 00BD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 00BE DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000269 bbe7      	OUT  0x17,R30
                 ; 0001 00BF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 00C0 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00026a bbe8      	OUT  0x18,R30
                 ; 0001 00C1 
                 ; 0001 00C2 // Port C initialization
                 ; 0001 00C3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 00C4 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00026b bbe4      	OUT  0x14,R30
                 ; 0001 00C5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 00C6 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00026c bbe5      	OUT  0x15,R30
                 ; 0001 00C7 
                 ; 0001 00C8 // Port D initialization
                 ; 0001 00C9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 00CA DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00026d bbe1      	OUT  0x11,R30
                 ; 0001 00CB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 00CC PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00026e bbe2      	OUT  0x12,R30
                 ; 0001 00CD }
00026f 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void usart_init()
                 ; 0001 00D1 {
                 _usart_init:
                 ; .FSTART _usart_init
                 ; 0001 00D2 // USART initialization
                 ; 0001 00D3 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 00D4 // USART Receiver: On
                 ; 0001 00D5 // USART Transmitter: On
                 ; 0001 00D6 // USART Mode: Asynchronous
                 ; 0001 00D7 // USART Baud Rate: 9600
                 ; 0001 00D8 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000270 e0e0      	LDI  R30,LOW(0)
000271 b9eb      	OUT  0xB,R30
                 ; 0001 00D9 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000272 ede8      	LDI  R30,LOW(216)
000273 b9ea      	OUT  0xA,R30
                 ; 0001 00DA UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000274 e8e6      	LDI  R30,LOW(134)
000275 bde0      	OUT  0x20,R30
                 ; 0001 00DB UBRRH=0x00;
000276 e0e0      	LDI  R30,LOW(0)
000277 bde0      	OUT  0x20,R30
                 ; 0001 00DC UBRRL=0x33;
000278 e3e3      	LDI  R30,LOW(51)
000279 b9e9      	OUT  0x9,R30
                 ; 0001 00DD 
                 ; 0001 00DE 
                 ; 0001 00DF }
00027a 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void init_all()
                 ; 0001 00E4 {
                 _init_all:
                 ; .FSTART _init_all
                 ; 0001 00E5 port_init();
00027b dfea      	RCALL _port_init
                 ; 0001 00E6 usart_init();
00027c dff3      	RCALL _usart_init
                 ; 0001 00E7 // Alphanumeric LCD initialization
                 ; 0001 00E8 // Connections are specified in the
                 ; 0001 00E9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 00EA // RS - PORTC Bit 0
                 ; 0001 00EB // RD - PORTC Bit 1
                 ; 0001 00EC // EN - PORTC Bit 2
                 ; 0001 00ED // D4 - PORTC Bit 4
                 ; 0001 00EE // D5 - PORTC Bit 5
                 ; 0001 00EF // D6 - PORTC Bit 6
                 ; 0001 00F0 // D7 - PORTC Bit 7
                 ; 0001 00F1 // Characters/line: 16
                 ; 0001 00F2 lcd_init(16);
00027d e1a0      	LDI  R26,LOW(16)
00027e 940e 07be 	CALL _lcd_init
                 ; 0001 00F3 }
000280 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void one(int baudrate,int rx,int tx)
                 ; 0001 00F8 {
                 _one:
                 ; .FSTART _one
                 ; 0001 00F9 
                 ; 0001 00FA //tx=0 --> off
                 ; 0001 00FB //tx=1 --> enable_noneinterrupt
                 ; 0001 00FC //tx=2 --> enable_interrupt
                 ; 0001 00FD 
                 ; 0001 00FE //rx=0 --> off
                 ; 0001 00FF //rx=1 --> enable_noneinterrupt
                 ; 0001 0100 //rx=2 --> enable_interrupt
                 ; 0001 0101 
                 ; 0001 0102 switch(baudrate) {
000281 93ba      	ST   -Y,R27
000282 93aa      	ST   -Y,R26
                 ;	baudrate -> Y+4
                 ;	rx -> Y+2
                 ;	tx -> Y+0
000283 81ec      	LDD  R30,Y+4
000284 81fd      	LDD  R31,Y+4+1
                 ; 0001 0103   case 300:
000285 32ec      	CPI  R30,LOW(0x12C)
000286 e0a1      	LDI  R26,HIGH(0x12C)
000287 07fa      	CPC  R31,R26
000288 f421      	BRNE _0x20034
                 ; 0001 0104     UBRRH=0x06;
000289 e0e6      	LDI  R30,LOW(6)
00028a bde0      	OUT  0x20,R30
                 ; 0001 0105     UBRRL=0x82;
00028b e8e2      	LDI  R30,LOW(130)
00028c c057      	RJMP _0x2007E
                 ; 0001 0106     break;
                 ; 0001 0107 
                 ; 0001 0108   case 600:
                 _0x20034:
00028d 35e8      	CPI  R30,LOW(0x258)
00028e e0a2      	LDI  R26,HIGH(0x258)
00028f 07fa      	CPC  R31,R26
000290 f421      	BRNE _0x20035
                 ; 0001 0109     UBRRH=0x03;
000291 e0e3      	LDI  R30,LOW(3)
000292 bde0      	OUT  0x20,R30
                 ; 0001 010A     UBRRL=0x40;
000293 e4e0      	LDI  R30,LOW(64)
000294 c04f      	RJMP _0x2007E
                 ; 0001 010B     break;
                 ; 0001 010C 
                 ; 0001 010D   case 1200:
                 _0x20035:
000295 3be0      	CPI  R30,LOW(0x4B0)
000296 e0a4      	LDI  R26,HIGH(0x4B0)
000297 07fa      	CPC  R31,R26
000298 f421      	BRNE _0x20036
                 ; 0001 010E     UBRRH=0x01;
000299 e0e1      	LDI  R30,LOW(1)
00029a bde0      	OUT  0x20,R30
                 ; 0001 010F     UBRRL=0xA0;
00029b eae0      	LDI  R30,LOW(160)
00029c c047      	RJMP _0x2007E
                 ; 0001 0110     break;
                 ; 0001 0111 
                 ; 0001 0112   case 2400:
                 _0x20036:
00029d 36e0      	CPI  R30,LOW(0x960)
00029e e0a9      	LDI  R26,HIGH(0x960)
00029f 07fa      	CPC  R31,R26
0002a0 f421      	BRNE _0x20037
                 ; 0001 0113     UBRRH=0x00;
0002a1 e0e0      	LDI  R30,LOW(0)
0002a2 bde0      	OUT  0x20,R30
                 ; 0001 0114     UBRRL=0xCF;
0002a3 ecef      	LDI  R30,LOW(207)
0002a4 c03f      	RJMP _0x2007E
                 ; 0001 0115     break;
                 ; 0001 0116 
                 ; 0001 0117   case 4800:
                 _0x20037:
0002a5 3ce0      	CPI  R30,LOW(0x12C0)
0002a6 e1a2      	LDI  R26,HIGH(0x12C0)
0002a7 07fa      	CPC  R31,R26
0002a8 f421      	BRNE _0x20038
                 ; 0001 0118     UBRRH=0x00;
0002a9 e0e0      	LDI  R30,LOW(0)
0002aa bde0      	OUT  0x20,R30
                 ; 0001 0119     UBRRL=0x67;
0002ab e6e7      	LDI  R30,LOW(103)
0002ac c037      	RJMP _0x2007E
                 ; 0001 011A     break;
                 ; 0001 011B 
                 ; 0001 011C   case 9600:
                 _0x20038:
0002ad 38e0      	CPI  R30,LOW(0x2580)
0002ae e2a5      	LDI  R26,HIGH(0x2580)
0002af 07fa      	CPC  R31,R26
0002b0 f181      	BREQ _0x2007F
                 ; 0001 011D     UBRRH=0x00;
                 ; 0001 011E     UBRRL=0x33;
                 ; 0001 011F     break;
                 ; 0001 0120 
                 ; 0001 0121   case 14400:
0002b1 34e0      	CPI  R30,LOW(0x3840)
0002b2 e3a8      	LDI  R26,HIGH(0x3840)
0002b3 07fa      	CPC  R31,R26
0002b4 f421      	BRNE _0x2003A
                 ; 0001 0122     UBRRH=0x00;
0002b5 e0e0      	LDI  R30,LOW(0)
0002b6 bde0      	OUT  0x20,R30
                 ; 0001 0123     UBRRL=0x22;
0002b7 e2e2      	LDI  R30,LOW(34)
0002b8 c02b      	RJMP _0x2007E
                 ; 0001 0124     break;
                 ; 0001 0125 
                 ; 0001 0126   case 19200:
                 _0x2003A:
0002b9 30e0      	CPI  R30,LOW(0x4B00)
0002ba e4ab      	LDI  R26,HIGH(0x4B00)
0002bb 07fa      	CPC  R31,R26
0002bc f421      	BRNE _0x2003B
                 ; 0001 0127     UBRRH=0x00;
0002bd e0e0      	LDI  R30,LOW(0)
0002be bde0      	OUT  0x20,R30
                 ; 0001 0128     UBRRL=0x19;
0002bf e1e9      	LDI  R30,LOW(25)
0002c0 c023      	RJMP _0x2007E
                 ; 0001 0129     break;
                 ; 0001 012A 
                 ; 0001 012B   case 38400:
                 _0x2003B:
0002c1 30e0      	CPI  R30,LOW(0x9600)
0002c2 e9a6      	LDI  R26,HIGH(0x9600)
0002c3 07fa      	CPC  R31,R26
0002c4 f421      	BRNE _0x2003C
                 ; 0001 012C     UBRRH=0x00;
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 bde0      	OUT  0x20,R30
                 ; 0001 012D     UBRRL=0x0C;
0002c7 e0ec      	LDI  R30,LOW(12)
0002c8 c01b      	RJMP _0x2007E
                 ; 0001 012E     break;
                 ; 0001 012F 
                 ; 0001 0130   case 56000:
                 _0x2003C:
0002c9 3ce0      	CPI  R30,LOW(0xDAC0)
0002ca edaa      	LDI  R26,HIGH(0xDAC0)
0002cb 07fa      	CPC  R31,R26
0002cc f421      	BRNE _0x2003D
                 ; 0001 0131     UBRRH=0x00;
0002cd e0e0      	LDI  R30,LOW(0)
0002ce bde0      	OUT  0x20,R30
                 ; 0001 0132     UBRRL=0x08;
0002cf e0e8      	LDI  R30,LOW(8)
0002d0 c013      	RJMP _0x2007E
                 ; 0001 0133     break;
                 ; 0001 0134 
                 ; 0001 0135   case 57600:
                 _0x2003D:
0002d1 30e0      	CPI  R30,LOW(0xE100)
0002d2 eea1      	LDI  R26,HIGH(0xE100)
0002d3 07fa      	CPC  R31,R26
0002d4 f421      	BRNE _0x2003E
                 ; 0001 0136     UBRRH=0x00;
0002d5 e0e0      	LDI  R30,LOW(0)
0002d6 bde0      	OUT  0x20,R30
                 ; 0001 0137     UBRRL=0x08;
0002d7 e0e8      	LDI  R30,LOW(8)
0002d8 c00b      	RJMP _0x2007E
                 ; 0001 0138     break;
                 ; 0001 0139 
                 ; 0001 013A   case 115200:
                 _0x2003E:
0002d9 30e0      	CPI  R30,LOW(0x1C200)
0002da eca2      	LDI  R26,HIGH(0x1C200)
0002db 07fa      	CPC  R31,R26
0002dc f421      	BRNE _0x20040
                 ; 0001 013B     UBRRH=0x00;
0002dd e0e0      	LDI  R30,LOW(0)
0002de bde0      	OUT  0x20,R30
                 ; 0001 013C     UBRRL=0x03;
0002df e0e3      	LDI  R30,LOW(3)
0002e0 c003      	RJMP _0x2007E
                 ; 0001 013D     break;
                 ; 0001 013E 
                 ; 0001 013F   default:
                 _0x20040:
                 ; 0001 0140     UBRRH=0x00;
                 _0x2007F:
0002e1 e0e0      	LDI  R30,LOW(0)
0002e2 bde0      	OUT  0x20,R30
                 ; 0001 0141     UBRRL=0x33;
0002e3 e3e3      	LDI  R30,LOW(51)
                 _0x2007E:
0002e4 b9e9      	OUT  0x9,R30
                 ; 0001 0142     break;
                 ; 0001 0143 }
                 ; 0001 0144 
                 ; 0001 0145 
                 ; 0001 0146 
                 ; 0001 0147 
                 ; 0001 0148 
                 ; 0001 0149 
                 ; 0001 014A 
                 ; 0001 014B switch(tx) {
0002e5 81e8      	LD   R30,Y
0002e6 81f9      	LDD  R31,Y+1
                 ; 0001 014C   case 0:
0002e7 9730      	SBIW R30,0
0002e8 f421      	BRNE _0x20044
                 ; 0001 014D     UCSRB &= !(1<<TXEN);
0002e9 b1ea      	IN   R30,0xA
0002ea 70e0      	ANDI R30,LOW(0x0)
0002eb b9ea      	OUT  0xA,R30
                 ; 0001 014E     break;
0002ec c00c      	RJMP _0x20043
                 ; 0001 014F 
                 ; 0001 0150   case 1:
                 _0x20044:
0002ed 30e1      	CPI  R30,LOW(0x1)
0002ee e0a0      	LDI  R26,HIGH(0x1)
0002ef 07fa      	CPC  R31,R26
0002f0 f411      	BRNE _0x20045
                 ; 0001 0151     UCSRB |= 1<<TXEN;
0002f1 9a53      	SBI  0xA,3
                 ; 0001 0152     break;
0002f2 c006      	RJMP _0x20043
                 ; 0001 0153 
                 ; 0001 0154   case 2:
                 _0x20045:
0002f3 30e2      	CPI  R30,LOW(0x2)
0002f4 e0a0      	LDI  R26,HIGH(0x2)
0002f5 07fa      	CPC  R31,R26
0002f6 f411      	BRNE _0x20047
                 ; 0001 0155     UCSRB |= 1<<TXEN;
0002f7 9a53      	SBI  0xA,3
                 ; 0001 0156     UCSRB |= 1<<TXCIE;
0002f8 9a56      	SBI  0xA,6
                 ; 0001 0157     break;
                 ; 0001 0158 
                 ; 0001 0159   default:
                 _0x20047:
                 ; 0001 015A     break;
                 ; 0001 015B }
                 _0x20043:
                 ; 0001 015C 
                 ; 0001 015D 
                 ; 0001 015E 
                 ; 0001 015F switch(rx) {
0002f9 81ea      	LDD  R30,Y+2
0002fa 81fb      	LDD  R31,Y+2+1
                 ; 0001 0160   case 0:
0002fb 9730      	SBIW R30,0
0002fc f421      	BRNE _0x2004B
                 ; 0001 0161     UCSRB &= !(1<<RXEN);
0002fd b1ea      	IN   R30,0xA
0002fe 70e0      	ANDI R30,LOW(0x0)
0002ff b9ea      	OUT  0xA,R30
                 ; 0001 0162     break;
000300 c00c      	RJMP _0x2004A
                 ; 0001 0163 
                 ; 0001 0164   case 1:
                 _0x2004B:
000301 30e1      	CPI  R30,LOW(0x1)
000302 e0a0      	LDI  R26,HIGH(0x1)
000303 07fa      	CPC  R31,R26
000304 f411      	BRNE _0x2004C
                 ; 0001 0165     UCSRB |= 1<<RXEN;
000305 9a54      	SBI  0xA,4
                 ; 0001 0166     break;
000306 c006      	RJMP _0x2004A
                 ; 0001 0167 
                 ; 0001 0168   case 2:
                 _0x2004C:
000307 30e2      	CPI  R30,LOW(0x2)
000308 e0a0      	LDI  R26,HIGH(0x2)
000309 07fa      	CPC  R31,R26
00030a f411      	BRNE _0x2004E
                 ; 0001 0169    UCSRB |= 1<<RXEN;
00030b 9a54      	SBI  0xA,4
                 ; 0001 016A    UCSRB |= 1<<RXCIE;
00030c 9a57      	SBI  0xA,7
                 ; 0001 016B     break;
                 ; 0001 016C 
                 ; 0001 016D   default:
                 _0x2004E:
                 ; 0001 016E     break;
                 ; 0001 016F }
                 _0x2004A:
                 ; 0001 0170 
                 ; 0001 0171 
                 ; 0001 0172 }
00030d c028      	RJMP _0x208000A
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void two()
                 ; 0001 0178 {
                 _two:
                 ; .FSTART _two
                 ; 0001 0179 one(9600,1,1);
00030e 940e 083d 	CALL SUBOPT_0x3
000310 e0a1      	LDI  R26,LOW(1)
000311 e0b0      	LDI  R27,0
000312 df6e      	RCALL _one
                 ; 0001 017A scanf("%s",tmp);
                +
000313 e3ef     +LDI R30 , LOW ( 2 * _0x20000 + ( 153 ) )
000314 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 153 ) )
                 	__POINTW1FN _0x20000,153
000315 93fa      	ST   -Y,R31
000316 93ea      	ST   -Y,R30
000317 01f2      	MOVW R30,R4
000318 2766      	CLR  R22
000319 2777      	CLR  R23
00031a 940e 08f8 	CALL __PUTPARD1
00031c e084      	LDI  R24,4
00031d 940e 0731 	CALL _scanf
00031f 9626      	ADIW R28,6
                 ; 0001 017B sprintf(str,"(%s)\n",tmp);
000320 927a      	ST   -Y,R7
000321 926a      	ST   -Y,R6
                +
000322 e4e2     +LDI R30 , LOW ( 2 * _0x20000 + ( 156 ) )
000323 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 156 ) )
                 	__POINTW1FN _0x20000,156
000324 93fa      	ST   -Y,R31
000325 93ea      	ST   -Y,R30
000326 01f2      	MOVW R30,R4
000327 2766      	CLR  R22
000328 2777      	CLR  R23
000329 940e 0830 	CALL SUBOPT_0x1
                 ; 0001 017C printf("%s\n",str);
                +
00032b e4e8     +LDI R30 , LOW ( 2 * _0x20000 + ( 162 ) )
00032c e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 162 ) )
                 	__POINTW1FN _0x20000,162
00032d 93fa      	ST   -Y,R31
00032e 93ea      	ST   -Y,R30
00032f 01f3      	MOVW R30,R6
000330 2766      	CLR  R22
000331 2777      	CLR  R23
000332 940e 08f8 	CALL __PUTPARD1
000334 e084      	LDI  R24,4
000335 d250      	RCALL _printf
                 _0x208000A:
000336 9626      	ADIW R28,6
                 ; 0001 017D }
000337 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void three()
                 ; 0001 0182 {
                 _three:
                 ; .FSTART _three
                 ; 0001 0183 one(9600,1,2);
000338 940e 083d 	CALL SUBOPT_0x3
00033a e0a2      	LDI  R26,LOW(2)
00033b e0b0      	LDI  R27,0
00033c df44      	RCALL _one
                 ; 0001 0184 flag_3=1;
00033d e0e1      	LDI  R30,LOW(1)
00033e 2e9e      	MOV  R9,R30
                 ; 0001 0185 }
00033f 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void four_read()
                 ; 0001 0189 {
                 _four_read:
                 ; .FSTART _four_read
                 ; 0001 018A 
                 ; 0001 018B   data_four=getchar();
000340 deb8      	RCALL _getchar
000341 2e8e      	MOV  R8,R30
                 ; 0001 018C   if(index==0&& data_four!='(')
000342 2400      	CLR  R0
000343 140c      	CP   R0,R12
000344 040d      	CPC  R0,R13
000345 f419      	BRNE _0x20050
000346 e2e8      	LDI  R30,LOW(40)
000347 15e8      	CP   R30,R8
000348 f409      	BRNE _0x20051
                 _0x20050:
000349 c005      	RJMP _0x2004F
                 _0x20051:
                 ; 0001 018D   {
                 ; 0001 018E     index=0;
00034a 24cc      	CLR  R12
00034b 24dd      	CLR  R13
                 ; 0001 018F     lcd_clear();
00034c 940e 077f 	CALL _lcd_clear
                 ; 0001 0190   }
                 ; 0001 0191   else if(index==0)
00034e c07e      	RJMP _0x20052
                 _0x2004F:
00034f 2c0c      	MOV  R0,R12
000350 280d      	OR   R0,R13
000351 f429      	BRNE _0x20053
                 ; 0001 0192     index++;
000352 01f6      	MOVW R30,R12
000353 9631      	ADIW R30,1
000354 016f      	MOVW R12,R30
000355 9731      	SBIW R30,1
                 ; 0001 0193   else if(index>0&&index<6)
000356 c076      	RJMP _0x20054
                 _0x20053:
000357 2400      	CLR  R0
000358 140c      	CP   R0,R12
000359 040d      	CPC  R0,R13
00035a f42c      	BRGE _0x20056
00035b e0e6      	LDI  R30,LOW(6)
00035c e0f0      	LDI  R31,HIGH(6)
00035d 16ce      	CP   R12,R30
00035e 06df      	CPC  R13,R31
00035f f00c      	BRLT _0x20057
                 _0x20056:
000360 c04f      	RJMP _0x20055
                 _0x20057:
                 ; 0001 0194     {
                 ; 0001 0195 
                 ; 0001 0196         switch(data_four) {
000361 2de8      	MOV  R30,R8
000362 e0f0      	LDI  R31,0
                 ; 0001 0197              case '0':
000363 33e0      	CPI  R30,LOW(0x30)
000364 e0a0      	LDI  R26,HIGH(0x30)
000365 07fa      	CPC  R31,R26
000366 f021      	BREQ _0x2005C
                 ; 0001 0198              case '1':
000367 33e1      	CPI  R30,LOW(0x31)
000368 e0a0      	LDI  R26,HIGH(0x31)
000369 07fa      	CPC  R31,R26
00036a f409      	BRNE _0x2005D
                 _0x2005C:
                 ; 0001 0199              case '2':
00036b c004      	RJMP _0x2005E
                 _0x2005D:
00036c 33e2      	CPI  R30,LOW(0x32)
00036d e0a0      	LDI  R26,HIGH(0x32)
00036e 07fa      	CPC  R31,R26
00036f f409      	BRNE _0x2005F
                 _0x2005E:
                 ; 0001 019A              case '3':
000370 c004      	RJMP _0x20060
                 _0x2005F:
000371 33e3      	CPI  R30,LOW(0x33)
000372 e0a0      	LDI  R26,HIGH(0x33)
000373 07fa      	CPC  R31,R26
000374 f409      	BRNE _0x20061
                 _0x20060:
                 ; 0001 019B              case '4':
000375 c004      	RJMP _0x20062
                 _0x20061:
000376 33e4      	CPI  R30,LOW(0x34)
000377 e0a0      	LDI  R26,HIGH(0x34)
000378 07fa      	CPC  R31,R26
000379 f409      	BRNE _0x20063
                 _0x20062:
                 ; 0001 019C              case '5':
00037a c004      	RJMP _0x20064
                 _0x20063:
00037b 33e5      	CPI  R30,LOW(0x35)
00037c e0a0      	LDI  R26,HIGH(0x35)
00037d 07fa      	CPC  R31,R26
00037e f409      	BRNE _0x20065
                 _0x20064:
                 ; 0001 019D              case '6':
00037f c004      	RJMP _0x20066
                 _0x20065:
000380 33e6      	CPI  R30,LOW(0x36)
000381 e0a0      	LDI  R26,HIGH(0x36)
000382 07fa      	CPC  R31,R26
000383 f409      	BRNE _0x20067
                 _0x20066:
                 ; 0001 019E              case '7':
000384 c004      	RJMP _0x20068
                 _0x20067:
000385 33e7      	CPI  R30,LOW(0x37)
000386 e0a0      	LDI  R26,HIGH(0x37)
000387 07fa      	CPC  R31,R26
000388 f409      	BRNE _0x20069
                 _0x20068:
                 ; 0001 019F              case '8':
000389 c004      	RJMP _0x2006A
                 _0x20069:
00038a 33e8      	CPI  R30,LOW(0x38)
00038b e0a0      	LDI  R26,HIGH(0x38)
00038c 07fa      	CPC  R31,R26
00038d f409      	BRNE _0x2006B
                 _0x2006A:
                 ; 0001 01A0              case '9':
00038e c004      	RJMP _0x2006C
                 _0x2006B:
00038f 33e9      	CPI  R30,LOW(0x39)
000390 e0a0      	LDI  R26,HIGH(0x39)
000391 07fa      	CPC  R31,R26
000392 f441      	BRNE _0x2006D
                 _0x2006C:
                 ; 0001 01A1              lcd_putchar(data_four);
000393 2da8      	MOV  R26,R8
000394 940e 078d 	CALL _lcd_putchar
                 ; 0001 01A2              index++;
000396 01f6      	MOVW R30,R12
000397 9631      	ADIW R30,1
000398 016f      	MOVW R12,R30
000399 9731      	SBIW R30,1
                 ; 0001 01A3              break;
00039a c014      	RJMP _0x2005A
                 ; 0001 01A4 
                 ; 0001 01A5              case ')':
                 _0x2006D:
00039b 32e9      	CPI  R30,LOW(0x29)
00039c e0a0      	LDI  R26,HIGH(0x29)
00039d 07fa      	CPC  R31,R26
00039e f429      	BRNE _0x2006F
                 ; 0001 01A6              lcd_clear();
00039f 940e 077f 	CALL _lcd_clear
                 ; 0001 01A7              printf("length of format not correct\r\n");
                +
0003a1 e4ec     +LDI R30 , LOW ( 2 * _0x20000 + ( 166 ) )
0003a2 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 166 ) )
                 	__POINTW1FN _0x20000,166
0003a3 c004      	RJMP _0x20080
                 ; 0001 01A8              index=0;
                 ; 0001 01A9              break;
                 ; 0001 01AA 
                 ; 0001 01AB              default:
                 _0x2006F:
                 ; 0001 01AC              lcd_clear();
0003a4 940e 077f 	CALL _lcd_clear
                 ; 0001 01AD              printf("Frame must be 5 integer\r\n");
                +
0003a6 e6eb     +LDI R30 , LOW ( 2 * _0x20000 + ( 197 ) )
0003a7 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 197 ) )
                 	__POINTW1FN _0x20000,197
                 _0x20080:
0003a8 93fa      	ST   -Y,R31
0003a9 93ea      	ST   -Y,R30
0003aa e080      	LDI  R24,0
0003ab d1da      	RCALL _printf
0003ac 9622      	ADIW R28,2
                 ; 0001 01AE              index=0;
0003ad 24cc      	CLR  R12
0003ae 24dd      	CLR  R13
                 ; 0001 01AF              break;
                 ; 0001 01B0         }
                 _0x2005A:
                 ; 0001 01B1 
                 ; 0001 01B2     }
                 ; 0001 01B3 
                 ; 0001 01B4     else if(index==6&&data_four!=')')
0003af c01d      	RJMP _0x20070
                 _0x20055:
0003b0 e0e6      	LDI  R30,LOW(6)
0003b1 e0f0      	LDI  R31,HIGH(6)
0003b2 15ec      	CP   R30,R12
0003b3 05fd      	CPC  R31,R13
0003b4 f419      	BRNE _0x20072
0003b5 e2e9      	LDI  R30,LOW(41)
0003b6 15e8      	CP   R30,R8
0003b7 f409      	BRNE _0x20073
                 _0x20072:
0003b8 c007      	RJMP _0x20071
                 _0x20073:
                 ; 0001 01B5     {
                 ; 0001 01B6       lcd_clear();
0003b9 940e 077f 	CALL _lcd_clear
                 ; 0001 01B7       printf("Frame must be 5 integer\r\n");
                +
0003bb e6eb     +LDI R30 , LOW ( 2 * _0x20000 + ( 197 ) )
0003bc e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 197 ) )
                 	__POINTW1FN _0x20000,197
0003bd 940e 0829 	CALL SUBOPT_0x0
                 ; 0001 01B8       index=0;
0003bf c00b      	RJMP _0x20081
                 ; 0001 01B9     }
                 ; 0001 01BA 
                 ; 0001 01BB     else if(index==6)
                 _0x20071:
0003c0 e0e6      	LDI  R30,LOW(6)
0003c1 e0f0      	LDI  R31,HIGH(6)
0003c2 15ec      	CP   R30,R12
0003c3 05fd      	CPC  R31,R13
0003c4 f441      	BRNE _0x20075
                 ; 0001 01BC     {  lcd_puts("\nend of frame");
                +
0003c5 e9a1     +LDI R26 , LOW ( _0x20076 + ( 0 ) )
0003c6 e0b1     +LDI R27 , HIGH ( _0x20076 + ( 0 ) )
                 	__POINTW2MN _0x20076,0
0003c7 940e 0837 	CALL SUBOPT_0x2
                 ; 0001 01BD         delay_ms(1000);
                 ; 0001 01BE          lcd_clear();
0003c9 940e 077f 	CALL _lcd_clear
                 ; 0001 01BF        index=0;
                 _0x20081:
0003cb 24cc      	CLR  R12
0003cc 24dd      	CLR  R13
                 ; 0001 01C0     }
                 ; 0001 01C1 }
                 _0x20075:
                 _0x20070:
                 _0x20054:
                 _0x20052:
0003cd 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20076:
000191           	.BYTE 0xE
                 ;
                 ;
                 ;void four()
                 ; 0001 01C5 {
                 
                 	.CSEG
                 _four:
                 ; .FSTART _four
                 ; 0001 01C6 while(flag_3);
                 _0x20077:
0003ce 2099      	TST  R9
0003cf f7f1      	BRNE _0x20077
                 ; 0001 01C7 printf("\r\npart 4 start\r\n");
                +
0003d0 e9e3     +LDI R30 , LOW ( 2 * _0x20000 + ( 237 ) )
0003d1 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 237 ) )
                 	__POINTW1FN _0x20000,237
0003d2 940e 0829 	CALL SUBOPT_0x0
                 ; 0001 01C8 one(9600,2,2);
0003d4 e8e0      	LDI  R30,LOW(9600)
0003d5 e2f5      	LDI  R31,HIGH(9600)
0003d6 93fa      	ST   -Y,R31
0003d7 93ea      	ST   -Y,R30
0003d8 e0e2      	LDI  R30,LOW(2)
0003d9 e0f0      	LDI  R31,HIGH(2)
0003da 93fa      	ST   -Y,R31
0003db 93ea      	ST   -Y,R30
0003dc e0a2      	LDI  R26,LOW(2)
0003dd e0b0      	LDI  R27,0
0003de dea2      	RCALL _one
                 ; 0001 01C9 while(1)
                 _0x2007A:
                 ; 0001 01CA {
                 ; 0001 01CB  four_read();
0003df df60      	RCALL _four_read
                 ; 0001 01CC }
0003e0 cffe      	RJMP _0x2007A
                 ; 0001 01CD 
                 ; 0001 01CE 
                 ; 0001 01CF }
                 ; .FEND
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
0003e1 93ba      	ST   -Y,R27
0003e2 93aa      	ST   -Y,R26
0003e3 81aa      	LDD  R26,Y+2
0003e4 de58      	RCALL _putchar
0003e5 81a8      	LD   R26,Y
0003e6 81b9      	LDD  R27,Y+1
0003e7 940e 0846 	CALL SUBOPT_0x4
0003e9 940c 07bc 	JMP  _0x2080002
                 ; .FEND
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0003eb 93ba      	ST   -Y,R27
0003ec 93aa      	ST   -Y,R26
0003ed 931a      	ST   -Y,R17
0003ee 930a      	ST   -Y,R16
0003ef 81aa      	LDD  R26,Y+2
0003f0 81bb      	LDD  R27,Y+2+1
0003f1 9612      	ADIW R26,2
0003f2 940e 08f0 	CALL __GETW1P
0003f4 9730      	SBIW R30,0
0003f5 f129      	BREQ _0x2000010
0003f6 81aa      	LDD  R26,Y+2
0003f7 81bb      	LDD  R27,Y+2+1
0003f8 9614      	ADIW R26,4
0003f9 940e 08f0 	CALL __GETW1P
0003fb 018f      	MOVW R16,R30
0003fc 9730      	SBIW R30,0
0003fd f061      	BREQ _0x2000012
                +
0003fe 3002     +CPI R16 , LOW ( 2 )
0003ff e0e0     +LDI R30 , HIGH ( 2 )
000400 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000401 f080      	BRLO _0x2000013
000402 01f8      	MOVW R30,R16
000403 9731      	SBIW R30,1
000404 018f      	MOVW R16,R30
                +
000405 81aa     +LDD R26 , Y + 2
000406 81bb     +LDD R27 , Y + 2 + 1
000407 9614     +ADIW R26 , 4
000408 93ed     +ST X + , R30
000409 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00040a 81aa      	LDD  R26,Y+2
00040b 81bb      	LDD  R27,Y+2+1
00040c 9612      	ADIW R26,2
00040d 940e 0846 	CALL SUBOPT_0x4
00040f 9731      	SBIW R30,1
000410 81ac      	LDD  R26,Y+4
000411 83a0      	STD  Z+0,R26
                 _0x2000013:
000412 81aa      	LDD  R26,Y+2
000413 81bb      	LDD  R27,Y+2+1
000414 940e 08f0 	CALL __GETW1P
000416 23ff      	TST  R31
000417 f012      	BRMI _0x2000014
000418 940e 0846 	CALL SUBOPT_0x4
                 _0x2000014:
00041a c006      	RJMP _0x2000015
                 _0x2000010:
00041b 81aa      	LDD  R26,Y+2
00041c 81bb      	LDD  R27,Y+2+1
00041d efef      	LDI  R30,LOW(65535)
00041e efff      	LDI  R31,HIGH(65535)
00041f 93ed      	ST   X+,R30
000420 93fc      	ST   X,R31
                 _0x2000015:
000421 8119      	LDD  R17,Y+1
000422 8108      	LDD  R16,Y+0
000423 c1ad      	RJMP _0x2080008
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000424 93ba      	ST   -Y,R27
000425 93aa      	ST   -Y,R26
000426 9726      	SBIW R28,6
000427 940e 08fd 	CALL __SAVELOCR6
000429 e010      	LDI  R17,0
00042a 85ac      	LDD  R26,Y+12
00042b 85bd      	LDD  R27,Y+12+1
00042c e0e0      	LDI  R30,LOW(0)
00042d e0f0      	LDI  R31,HIGH(0)
00042e 93ed      	ST   X+,R30
00042f 93fc      	ST   X,R31
                 _0x2000016:
000430 89ea      	LDD  R30,Y+18
000431 89fb      	LDD  R31,Y+18+1
000432 9631      	ADIW R30,1
000433 8bea      	STD  Y+18,R30
000434 8bfb      	STD  Y+18+1,R31
000435 9731      	SBIW R30,1
000436 91e4      	LPM  R30,Z
000437 2f2e      	MOV  R18,R30
000438 30e0      	CPI  R30,0
000439 f409      	BRNE PC+2
00043a c115      	RJMP _0x2000018
00043b 2fe1      	MOV  R30,R17
00043c 30e0      	CPI  R30,0
00043d f439      	BRNE _0x200001C
00043e 3225      	CPI  R18,37
00043f f411      	BRNE _0x200001D
000440 e011      	LDI  R17,LOW(1)
000441 c002      	RJMP _0x200001E
                 _0x200001D:
000442 940e 084c 	CALL SUBOPT_0x5
                 _0x200001E:
000444 c10a      	RJMP _0x200001B
                 _0x200001C:
000445 30e1      	CPI  R30,LOW(0x1)
000446 f4a9      	BRNE _0x200001F
000447 3225      	CPI  R18,37
000448 f419      	BRNE _0x2000020
000449 940e 084c 	CALL SUBOPT_0x5
00044b c102      	RJMP _0x20000CC
                 _0x2000020:
00044c e012      	LDI  R17,LOW(2)
00044d e040      	LDI  R20,LOW(0)
00044e e000      	LDI  R16,LOW(0)
00044f 322d      	CPI  R18,45
000450 f411      	BRNE _0x2000021
000451 e001      	LDI  R16,LOW(1)
000452 c0fc      	RJMP _0x200001B
                 _0x2000021:
000453 322b      	CPI  R18,43
000454 f411      	BRNE _0x2000022
000455 e24b      	LDI  R20,LOW(43)
000456 c0f8      	RJMP _0x200001B
                 _0x2000022:
000457 3220      	CPI  R18,32
000458 f411      	BRNE _0x2000023
000459 e240      	LDI  R20,LOW(32)
00045a c0f4      	RJMP _0x200001B
                 _0x2000023:
00045b c002      	RJMP _0x2000024
                 _0x200001F:
00045c 30e2      	CPI  R30,LOW(0x2)
00045d f439      	BRNE _0x2000025
                 _0x2000024:
00045e e050      	LDI  R21,LOW(0)
00045f e013      	LDI  R17,LOW(3)
000460 3320      	CPI  R18,48
000461 f411      	BRNE _0x2000026
000462 6800      	ORI  R16,LOW(128)
000463 c0eb      	RJMP _0x200001B
                 _0x2000026:
000464 c003      	RJMP _0x2000027
                 _0x2000025:
000465 30e3      	CPI  R30,LOW(0x3)
000466 f009      	BREQ PC+2
000467 c0e7      	RJMP _0x200001B
                 _0x2000027:
000468 3320      	CPI  R18,48
000469 f010      	BRLO _0x200002A
00046a 332a      	CPI  R18,58
00046b f008      	BRLO _0x200002B
                 _0x200002A:
00046c c007      	RJMP _0x2000029
                 _0x200002B:
00046d e0aa      	LDI  R26,LOW(10)
00046e 9f5a      	MUL  R21,R26
00046f 2d50      	MOV  R21,R0
000470 2fe2      	MOV  R30,R18
000471 53e0      	SUBI R30,LOW(48)
000472 0f5e      	ADD  R21,R30
000473 c0db      	RJMP _0x200001B
                 _0x2000029:
000474 2fe2      	MOV  R30,R18
000475 36e3      	CPI  R30,LOW(0x63)
000476 f449      	BRNE _0x200002F
000477 940e 0853 	CALL SUBOPT_0x6
000479 89e8      	LDD  R30,Y+16
00047a 89f9      	LDD  R31,Y+16+1
00047b 81a4      	LDD  R26,Z+4
00047c 93aa      	ST   -Y,R26
00047d 940e 0859 	CALL SUBOPT_0x7
00047f c0ce      	RJMP _0x2000030
                 _0x200002F:
000480 37e3      	CPI  R30,LOW(0x73)
000481 f441      	BRNE _0x2000032
000482 940e 0853 	CALL SUBOPT_0x6
000484 940e 085f 	CALL SUBOPT_0x8
000486 940e 07ed 	CALL _strlen
000488 2f1e      	MOV  R17,R30
000489 c00a      	RJMP _0x2000033
                 _0x2000032:
00048a 37e0      	CPI  R30,LOW(0x70)
00048b f461      	BRNE _0x2000035
00048c 940e 0853 	CALL SUBOPT_0x6
00048e 940e 085f 	CALL SUBOPT_0x8
000490 940e 07f9 	CALL _strlenf
000492 2f1e      	MOV  R17,R30
000493 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000494 6002      	ORI  R16,LOW(2)
000495 770f      	ANDI R16,LOW(127)
000496 e030      	LDI  R19,LOW(0)
000497 c034      	RJMP _0x2000036
                 _0x2000035:
000498 36e4      	CPI  R30,LOW(0x64)
000499 f011      	BREQ _0x2000039
00049a 36e9      	CPI  R30,LOW(0x69)
00049b f411      	BRNE _0x200003A
                 _0x2000039:
00049c 6004      	ORI  R16,LOW(4)
00049d c002      	RJMP _0x200003B
                 _0x200003A:
00049e 37e5      	CPI  R30,LOW(0x75)
00049f f431      	BRNE _0x200003C
                 _0x200003B:
0004a0 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0004a1 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0004a2 83ee      	STD  Y+6,R30
0004a3 83ff      	STD  Y+6+1,R31
0004a4 e015      	LDI  R17,LOW(5)
0004a5 c00c      	RJMP _0x200003D
                 _0x200003C:
0004a6 35e8      	CPI  R30,LOW(0x58)
0004a7 f411      	BRNE _0x200003F
0004a8 6008      	ORI  R16,LOW(8)
0004a9 c003      	RJMP _0x2000040
                 _0x200003F:
0004aa 37e8      	CPI  R30,LOW(0x78)
0004ab f009      	BREQ PC+2
0004ac c0a1      	RJMP _0x2000071
                 _0x2000040:
0004ad e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0004ae e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0004af 83ee      	STD  Y+6,R30
0004b0 83ff      	STD  Y+6+1,R31
0004b1 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0004b2 ff02      	SBRS R16,2
0004b3 c014      	RJMP _0x2000042
0004b4 940e 0853 	CALL SUBOPT_0x6
0004b6 940e 0869 	CALL SUBOPT_0x9
0004b8 85ab      	LDD  R26,Y+11
0004b9 23aa      	TST  R26
0004ba f43a      	BRPL _0x2000043
0004bb 85ea      	LDD  R30,Y+10
0004bc 85fb      	LDD  R31,Y+10+1
0004bd 940e 08cc 	CALL __ANEGW1
0004bf 87ea      	STD  Y+10,R30
0004c0 87fb      	STD  Y+10+1,R31
0004c1 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0004c2 3040      	CPI  R20,0
0004c3 f011      	BREQ _0x2000044
0004c4 5f1f      	SUBI R17,-LOW(1)
0004c5 c001      	RJMP _0x2000045
                 _0x2000044:
0004c6 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0004c7 c004      	RJMP _0x2000046
                 _0x2000042:
0004c8 940e 0853 	CALL SUBOPT_0x6
0004ca 940e 0869 	CALL SUBOPT_0x9
                 _0x2000046:
                 _0x2000036:
0004cc fd00      	SBRC R16,0
0004cd c011      	RJMP _0x2000047
                 _0x2000048:
0004ce 1715      	CP   R17,R21
0004cf f478      	BRSH _0x200004A
0004d0 ff07      	SBRS R16,7
0004d1 c008      	RJMP _0x200004B
0004d2 ff02      	SBRS R16,2
0004d3 c004      	RJMP _0x200004C
0004d4 7f0b      	ANDI R16,LOW(251)
0004d5 2f24      	MOV  R18,R20
0004d6 5011      	SUBI R17,LOW(1)
0004d7 c001      	RJMP _0x200004D
                 _0x200004C:
0004d8 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0004d9 c001      	RJMP _0x200004E
                 _0x200004B:
0004da e220      	LDI  R18,LOW(32)
                 _0x200004E:
0004db 940e 084c 	CALL SUBOPT_0x5
0004dd 5051      	SUBI R21,LOW(1)
0004de cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0004df 2f31      	MOV  R19,R17
0004e0 ff01      	SBRS R16,1
0004e1 c017      	RJMP _0x200004F
                 _0x2000050:
0004e2 3030      	CPI  R19,0
0004e3 f0a1      	BREQ _0x2000052
0004e4 ff03      	SBRS R16,3
0004e5 c006      	RJMP _0x2000053
0004e6 81ee      	LDD  R30,Y+6
0004e7 81ff      	LDD  R31,Y+6+1
0004e8 9125      	LPM  R18,Z+
0004e9 83ee      	STD  Y+6,R30
0004ea 83ff      	STD  Y+6+1,R31
0004eb c005      	RJMP _0x2000054
                 _0x2000053:
0004ec 81ae      	LDD  R26,Y+6
0004ed 81bf      	LDD  R27,Y+6+1
0004ee 912d      	LD   R18,X+
0004ef 83ae      	STD  Y+6,R26
0004f0 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0004f1 940e 084c 	CALL SUBOPT_0x5
0004f3 3050      	CPI  R21,0
0004f4 f009      	BREQ _0x2000055
0004f5 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0004f6 5031      	SUBI R19,LOW(1)
0004f7 cfea      	RJMP _0x2000050
                 _0x2000052:
0004f8 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0004f9 e320      	LDI  R18,LOW(48)
0004fa 81ee      	LDD  R30,Y+6
0004fb 81ff      	LDD  R31,Y+6+1
0004fc 940e 08f4 	CALL __GETW1PF
0004fe 87e8      	STD  Y+8,R30
0004ff 87f9      	STD  Y+8+1,R31
000500 81ee      	LDD  R30,Y+6
000501 81ff      	LDD  R31,Y+6+1
000502 9632      	ADIW R30,2
000503 83ee      	STD  Y+6,R30
000504 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000505 85e8      	LDD  R30,Y+8
000506 85f9      	LDD  R31,Y+8+1
000507 85aa      	LDD  R26,Y+10
000508 85bb      	LDD  R27,Y+10+1
000509 17ae      	CP   R26,R30
00050a 07bf      	CPC  R27,R31
00050b f050      	BRLO _0x200005C
00050c 5f2f      	SUBI R18,-LOW(1)
00050d 85a8      	LDD  R26,Y+8
00050e 85b9      	LDD  R27,Y+8+1
00050f 85ea      	LDD  R30,Y+10
000510 85fb      	LDD  R31,Y+10+1
000511 1bea      	SUB  R30,R26
000512 0bfb      	SBC  R31,R27
000513 87ea      	STD  Y+10,R30
000514 87fb      	STD  Y+10+1,R31
000515 cfef      	RJMP _0x200005A
                 _0x200005C:
000516 332a      	CPI  R18,58
000517 f028      	BRLO _0x200005D
000518 ff03      	SBRS R16,3
000519 c002      	RJMP _0x200005E
00051a 5f29      	SUBI R18,-LOW(7)
00051b c001      	RJMP _0x200005F
                 _0x200005E:
00051c 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00051d fd04      	SBRC R16,4
00051e c01a      	RJMP _0x2000061
00051f 3321      	CPI  R18,49
000520 f420      	BRSH _0x2000063
000521 85a8      	LDD  R26,Y+8
000522 85b9      	LDD  R27,Y+8+1
000523 9711      	SBIW R26,1
000524 f409      	BRNE _0x2000062
                 _0x2000063:
000525 c009      	RJMP _0x20000CD
                 _0x2000062:
000526 1753      	CP   R21,R19
000527 f010      	BRLO _0x2000067
000528 ff00      	SBRS R16,0
000529 c001      	RJMP _0x2000068
                 _0x2000067:
00052a c013      	RJMP _0x2000066
                 _0x2000068:
00052b e220      	LDI  R18,LOW(32)
00052c ff07      	SBRS R16,7
00052d c00b      	RJMP _0x2000069
00052e e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00052f 6100      	ORI  R16,LOW(16)
000530 ff02      	SBRS R16,2
000531 c007      	RJMP _0x200006A
000532 7f0b      	ANDI R16,LOW(251)
000533 934a      	ST   -Y,R20
000534 940e 0859 	CALL SUBOPT_0x7
000536 3050      	CPI  R21,0
000537 f009      	BREQ _0x200006B
000538 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000539 940e 084c 	CALL SUBOPT_0x5
00053b 3050      	CPI  R21,0
00053c f009      	BREQ _0x200006C
00053d 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00053e 5031      	SUBI R19,LOW(1)
00053f 85a8      	LDD  R26,Y+8
000540 85b9      	LDD  R27,Y+8+1
000541 9712      	SBIW R26,2
000542 f008      	BRLO _0x2000059
000543 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000544 ff00      	SBRS R16,0
000545 c008      	RJMP _0x200006D
                 _0x200006E:
000546 3050      	CPI  R21,0
000547 f031      	BREQ _0x2000070
000548 5051      	SUBI R21,LOW(1)
000549 e2e0      	LDI  R30,LOW(32)
00054a 93ea      	ST   -Y,R30
00054b 940e 0859 	CALL SUBOPT_0x7
00054d cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00054e e010      	LDI  R17,LOW(0)
                 _0x200001B:
00054f cee0      	RJMP _0x2000016
                 _0x2000018:
000550 85ac      	LDD  R26,Y+12
000551 85bd      	LDD  R27,Y+12+1
000552 940e 08f0 	CALL __GETW1P
000554 940e 0904 	CALL __LOADLOCR6
000556 9664      	ADIW R28,20
000557 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000558 92ff      	PUSH R15
000559 2ef8      	MOV  R15,R24
00055a 9726      	SBIW R28,6
00055b 940e 08ff 	CALL __SAVELOCR4
00055d 940e 0871 	CALL SUBOPT_0xA
00055f 9730      	SBIW R30,0
000560 f419      	BRNE _0x2000072
000561 efef      	LDI  R30,LOW(65535)
000562 efff      	LDI  R31,HIGH(65535)
000563 c01d      	RJMP _0x2080009
                 _0x2000072:
000564 01de      	MOVW R26,R28
000565 9616      	ADIW R26,6
000566 940e 08c8 	CALL __ADDW2R15
000568 018d      	MOVW R16,R26
000569 940e 0871 	CALL SUBOPT_0xA
00056b 83ee      	STD  Y+6,R30
00056c 83ff      	STD  Y+6+1,R31
00056d e0e0      	LDI  R30,LOW(0)
00056e 87e8      	STD  Y+8,R30
00056f 87e9      	STD  Y+8+1,R30
000570 01de      	MOVW R26,R28
000571 961a      	ADIW R26,10
000572 940e 0878 	CALL SUBOPT_0xB
000574 eeeb      	LDI  R30,LOW(_put_buff_G100)
000575 e0f3      	LDI  R31,HIGH(_put_buff_G100)
000576 93fa      	ST   -Y,R31
000577 93ea      	ST   -Y,R30
000578 01de      	MOVW R26,R28
000579 961a      	ADIW R26,10
00057a dea9      	RCALL __print_G100
00057b 019f      	MOVW R18,R30
00057c 81ae      	LDD  R26,Y+6
00057d 81bf      	LDD  R27,Y+6+1
00057e e0e0      	LDI  R30,LOW(0)
00057f 93ec      	ST   X,R30
000580 01f9      	MOVW R30,R18
                 _0x2080009:
000581 940e 0906 	CALL __LOADLOCR4
000583 962a      	ADIW R28,10
000584 90ff      	POP  R15
000585 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000586 92ff      	PUSH R15
000587 2ef8      	MOV  R15,R24
000588 9726      	SBIW R28,6
000589 931a      	ST   -Y,R17
00058a 930a      	ST   -Y,R16
00058b 01de      	MOVW R26,R28
00058c 9614      	ADIW R26,4
00058d 940e 08c8 	CALL __ADDW2R15
00058f 018d      	MOVW R16,R26
000590 e0e0      	LDI  R30,LOW(0)
000591 83ec      	STD  Y+4,R30
000592 83ed      	STD  Y+4+1,R30
000593 83ee      	STD  Y+6,R30
000594 83ef      	STD  Y+6+1,R30
000595 01de      	MOVW R26,R28
000596 9618      	ADIW R26,8
000597 940e 0878 	CALL SUBOPT_0xB
000599 eee1      	LDI  R30,LOW(_put_usart_G100)
00059a e0f3      	LDI  R31,HIGH(_put_usart_G100)
00059b 93fa      	ST   -Y,R31
00059c 93ea      	ST   -Y,R30
00059d 01de      	MOVW R26,R28
00059e 9618      	ADIW R26,8
00059f de84      	RCALL __print_G100
0005a0 8119      	LDD  R17,Y+1
0005a1 8108      	LDD  R16,Y+0
0005a2 9628      	ADIW R28,8
0005a3 90ff      	POP  R15
0005a4 9508      	RET
                 ; .FEND
                 _get_usart_G100:
                 ; .FSTART _get_usart_G100
0005a5 940e 0881 	CALL SUBOPT_0xC
0005a7 f029      	BREQ _0x2000078
0005a8 81ab      	LDD  R26,Y+3
0005a9 81bc      	LDD  R27,Y+3+1
0005aa e0e0      	LDI  R30,LOW(0)
0005ab 93ec      	ST   X,R30
0005ac c003      	RJMP _0x2000079
                 _0x2000078:
0005ad 940e 01f9 	CALL _getchar
0005af 2f1e      	MOV  R17,R30
                 _0x2000079:
0005b0 c01e      	RJMP _0x2080007
                 ; .FEND
                 _get_buff_G100:
                 ; .FSTART _get_buff_G100
0005b1 940e 0881 	CALL SUBOPT_0xC
0005b3 f029      	BREQ _0x200007A
0005b4 81ab      	LDD  R26,Y+3
0005b5 81bc      	LDD  R27,Y+3+1
0005b6 e0e0      	LDI  R30,LOW(0)
0005b7 93ec      	ST   X,R30
0005b8 c016      	RJMP _0x200007B
                 _0x200007A:
0005b9 81a9      	LDD  R26,Y+1
0005ba 81ba      	LDD  R27,Y+1+1
0005bb 9611      	ADIW R26,1
0005bc 940e 08f0 	CALL __GETW1P
0005be 9730      	SBIW R30,0
0005bf f071      	BREQ _0x200007C
0005c0 81e9      	LDD  R30,Y+1
0005c1 81fa      	LDD  R31,Y+1+1
0005c2 81a1      	LDD  R26,Z+1
0005c3 81b2      	LDD  R27,Z+2
0005c4 91ec      	LD   R30,X
0005c5 2f1e      	MOV  R17,R30
0005c6 30e0      	CPI  R30,0
0005c7 f029      	BREQ _0x200007D
0005c8 81a9      	LDD  R26,Y+1
0005c9 81ba      	LDD  R27,Y+1+1
0005ca 9611      	ADIW R26,1
0005cb 940e 0846 	CALL SUBOPT_0x4
                 _0x200007D:
0005cd c001      	RJMP _0x200007E
                 _0x200007C:
0005ce e010      	LDI  R17,LOW(0)
                 _0x200007E:
                 _0x200007B:
                 _0x2080007:
0005cf 2fe1      	MOV  R30,R17
0005d0 8118      	LDD  R17,Y+0
                 _0x2080008:
0005d1 9625      	ADIW R28,5
0005d2 9508      	RET
                 ; .FEND
                 __scanf_G100:
                 ; .FSTART __scanf_G100
0005d3 92ff      	PUSH R15
0005d4 93ba      	ST   -Y,R27
0005d5 93aa      	ST   -Y,R26
0005d6 9724      	SBIW R28,4
0005d7 940e 08fd 	CALL __SAVELOCR6
0005d9 e0e0      	LDI  R30,LOW(0)
0005da e0f0      	LDI  R31,HIGH(0)
0005db 87e8      	STD  Y+8,R30
0005dc 87f9      	STD  Y+8+1,R31
0005dd 2f4e      	MOV  R20,R30
                 _0x200007F:
0005de 89e8      	LDD  R30,Y+16
0005df 89f9      	LDD  R31,Y+16+1
0005e0 9631      	ADIW R30,1
0005e1 8be8      	STD  Y+16,R30
0005e2 8bf9      	STD  Y+16+1,R31
0005e3 9731      	SBIW R30,1
0005e4 91e4      	LPM  R30,Z
0005e5 2f3e      	MOV  R19,R30
0005e6 30e0      	CPI  R30,0
0005e7 f409      	BRNE PC+2
0005e8 c125      	RJMP _0x2000081
0005e9 940e 088e 	CALL SUBOPT_0xD
0005eb f0c1      	BREQ _0x2000082
                 _0x2000083:
0005ec b7ed      	IN   R30,SPL
0005ed b7fe      	IN   R31,SPH
0005ee 93fa      	ST   -Y,R31
0005ef 93ea      	ST   -Y,R30
0005f0 934f      	PUSH R20
0005f1 940e 0893 	CALL SUBOPT_0xE
0005f3 914f      	POP  R20
0005f4 2f3e      	MOV  R19,R30
0005f5 30e0      	CPI  R30,0
0005f6 f019      	BREQ _0x2000086
0005f7 940e 088e 	CALL SUBOPT_0xD
0005f9 f409      	BRNE _0x2000087
                 _0x2000086:
0005fa c007      	RJMP _0x2000085
                 _0x2000087:
0005fb 940e 0899 	CALL SUBOPT_0xF
0005fd f41c      	BRGE _0x2000088
0005fe efef      	LDI  R30,LOW(65535)
0005ff efff      	LDI  R31,HIGH(65535)
000600 c10f      	RJMP _0x2080005
                 _0x2000088:
000601 cfea      	RJMP _0x2000083
                 _0x2000085:
000602 2f43      	MOV  R20,R19
000603 c109      	RJMP _0x2000089
                 _0x2000082:
000604 3235      	CPI  R19,37
000605 f009      	BREQ PC+2
000606 c0ee      	RJMP _0x200008A
000607 e050      	LDI  R21,LOW(0)
                 _0x200008B:
000608 89e8      	LDD  R30,Y+16
000609 89f9      	LDD  R31,Y+16+1
00060a 9135      	LPM  R19,Z+
00060b 8be8      	STD  Y+16,R30
00060c 8bf9      	STD  Y+16+1,R31
00060d 3330      	CPI  R19,48
00060e f010      	BRLO _0x200008F
00060f 333a      	CPI  R19,58
000610 f008      	BRLO _0x200008E
                 _0x200008F:
000611 c007      	RJMP _0x200008D
                 _0x200008E:
000612 e0aa      	LDI  R26,LOW(10)
000613 9f5a      	MUL  R21,R26
000614 2d50      	MOV  R21,R0
000615 2fe3      	MOV  R30,R19
000616 53e0      	SUBI R30,LOW(48)
000617 0f5e      	ADD  R21,R30
000618 cfef      	RJMP _0x200008B
                 _0x200008D:
000619 3030      	CPI  R19,0
00061a f409      	BRNE _0x2000091
00061b c0f2      	RJMP _0x2000081
                 _0x2000091:
                 _0x2000092:
00061c b7ed      	IN   R30,SPL
00061d b7fe      	IN   R31,SPH
00061e 93fa      	ST   -Y,R31
00061f 93ea      	ST   -Y,R30
000620 934f      	PUSH R20
000621 940e 0893 	CALL SUBOPT_0xE
000623 914f      	POP  R20
000624 2f2e      	MOV  R18,R30
000625 2fae      	MOV  R26,R30
000626 940e 080f 	CALL _isspace
000628 30e0      	CPI  R30,0
000629 f039      	BREQ _0x2000094
00062a 940e 0899 	CALL SUBOPT_0xF
00062c f41c      	BRGE _0x2000095
00062d efef      	LDI  R30,LOW(65535)
00062e efff      	LDI  R31,HIGH(65535)
00062f c0e0      	RJMP _0x2080005
                 _0x2000095:
000630 cfeb      	RJMP _0x2000092
                 _0x2000094:
000631 3020      	CPI  R18,0
000632 f409      	BRNE _0x2000096
000633 c0d1      	RJMP _0x2000097
                 _0x2000096:
000634 2f42      	MOV  R20,R18
000635 3050      	CPI  R21,0
000636 f409      	BRNE _0x2000098
000637 ef5f      	LDI  R21,LOW(255)
                 _0x2000098:
000638 2fe3      	MOV  R30,R19
000639 36e3      	CPI  R30,LOW(0x63)
00063a f499      	BRNE _0x200009C
00063b 940e 089e 	CALL SUBOPT_0x10
00063d b7ed      	IN   R30,SPL
00063e b7fe      	IN   R31,SPH
00063f 93fa      	ST   -Y,R31
000640 93ea      	ST   -Y,R30
000641 934f      	PUSH R20
000642 940e 0893 	CALL SUBOPT_0xE
000644 914f      	POP  R20
000645 01d8      	MOVW R26,R16
000646 93ec      	ST   X,R30
000647 940e 0899 	CALL SUBOPT_0xF
000649 f41c      	BRGE _0x200009D
00064a efef      	LDI  R30,LOW(65535)
00064b efff      	LDI  R31,HIGH(65535)
00064c c0c3      	RJMP _0x2080005
                 _0x200009D:
00064d c0a1      	RJMP _0x200009B
                 _0x200009C:
00064e 37e3      	CPI  R30,LOW(0x73)
00064f f541      	BRNE _0x20000A6
000650 940e 089e 	CALL SUBOPT_0x10
                 _0x200009F:
000652 2fe5      	MOV  R30,R21
000653 5051      	SUBI R21,1
000654 30e0      	CPI  R30,0
000655 f0f1      	BREQ _0x20000A1
000656 b7ed      	IN   R30,SPL
000657 b7fe      	IN   R31,SPH
000658 93fa      	ST   -Y,R31
000659 93ea      	ST   -Y,R30
00065a 934f      	PUSH R20
00065b 940e 0893 	CALL SUBOPT_0xE
00065d 914f      	POP  R20
00065e 2f3e      	MOV  R19,R30
00065f 30e0      	CPI  R30,0
000660 f019      	BREQ _0x20000A3
000661 940e 088e 	CALL SUBOPT_0xD
000663 f039      	BREQ _0x20000A2
                 _0x20000A3:
000664 940e 0899 	CALL SUBOPT_0xF
000666 f41c      	BRGE _0x20000A5
000667 efef      	LDI  R30,LOW(65535)
000668 efff      	LDI  R31,HIGH(65535)
000669 c0a6      	RJMP _0x2080005
                 _0x20000A5:
00066a c009      	RJMP _0x20000A1
                 _0x20000A2:
00066b 931f      	PUSH R17
00066c 930f      	PUSH R16
                +
00066d 5f0f     +SUBI R16 , LOW ( - 1 )
00066e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00066f 2fe3      	MOV  R30,R19
000670 91af      	POP  R26
000671 91bf      	POP  R27
000672 93ec      	ST   X,R30
000673 cfde      	RJMP _0x200009F
                 _0x20000A1:
000674 01d8      	MOVW R26,R16
000675 e0e0      	LDI  R30,LOW(0)
000676 93ec      	ST   X,R30
000677 c077      	RJMP _0x200009B
                 _0x20000A6:
000678 9468      	SET
000679 f8f1      	BLD  R15,1
00067a 94e8      	CLT
00067b f8f2      	BLD  R15,2
00067c 2fe3      	MOV  R30,R19
00067d 36e4      	CPI  R30,LOW(0x64)
00067e f011      	BREQ _0x20000AB
00067f 36e9      	CPI  R30,LOW(0x69)
000680 f419      	BRNE _0x20000AC
                 _0x20000AB:
000681 94e8      	CLT
000682 f8f1      	BLD  R15,1
000683 c002      	RJMP _0x20000AD
                 _0x20000AC:
000684 37e5      	CPI  R30,LOW(0x75)
000685 f411      	BRNE _0x20000AE
                 _0x20000AD:
000686 e02a      	LDI  R18,LOW(10)
000687 c008      	RJMP _0x20000A9
                 _0x20000AE:
000688 37e8      	CPI  R30,LOW(0x78)
000689 f411      	BRNE _0x20000AF
00068a e120      	LDI  R18,LOW(16)
00068b c004      	RJMP _0x20000A9
                 _0x20000AF:
00068c 32e5      	CPI  R30,LOW(0x25)
00068d f409      	BRNE _0x20000B2
00068e c066      	RJMP _0x20000B1
                 _0x20000B2:
00068f c07e      	RJMP _0x2080006
                 _0x20000A9:
000690 e0e0      	LDI  R30,LOW(0)
000691 83ee      	STD  Y+6,R30
000692 83ef      	STD  Y+6+1,R30
000693 9468      	SET
000694 f8f0      	BLD  R15,0
                 _0x20000B3:
000695 2fe5      	MOV  R30,R21
000696 5051      	SUBI R21,1
000697 30e0      	CPI  R30,0
000698 f409      	BRNE PC+2
000699 c046      	RJMP _0x20000B5
00069a b7ed      	IN   R30,SPL
00069b b7fe      	IN   R31,SPH
00069c 93fa      	ST   -Y,R31
00069d 93ea      	ST   -Y,R30
00069e 934f      	PUSH R20
00069f 940e 0893 	CALL SUBOPT_0xE
0006a1 914f      	POP  R20
0006a2 2f3e      	MOV  R19,R30
0006a3 32e1      	CPI  R30,LOW(0x21)
0006a4 f438      	BRSH _0x20000B6
0006a5 940e 0899 	CALL SUBOPT_0xF
0006a7 f41c      	BRGE _0x20000B7
0006a8 efef      	LDI  R30,LOW(65535)
0006a9 efff      	LDI  R31,HIGH(65535)
0006aa c065      	RJMP _0x2080005
                 _0x20000B7:
0006ab c017      	RJMP _0x20000B8
                 _0x20000B6:
0006ac fcf1      	SBRC R15,1
0006ad c008      	RJMP _0x20000B9
0006ae 9468      	SET
0006af f8f1      	BLD  R15,1
0006b0 323d      	CPI  R19,45
0006b1 f411      	BRNE _0x20000BA
0006b2 f8f2      	BLD  R15,2
0006b3 cfe1      	RJMP _0x20000B3
                 _0x20000BA:
0006b4 323b      	CPI  R19,43
0006b5 f2f9      	BREQ _0x20000B3
                 _0x20000B9:
0006b6 3120      	CPI  R18,16
0006b7 f431      	BRNE _0x20000BC
0006b8 2fa3      	MOV  R26,R19
0006b9 940e 081a 	CALL _isxdigit
0006bb 30e0      	CPI  R30,0
0006bc f031      	BREQ _0x20000B8
0006bd c009      	RJMP _0x20000BE
                 _0x20000BC:
0006be 2fa3      	MOV  R26,R19
0006bf 940e 0806 	CALL _isdigit
0006c1 30e0      	CPI  R30,0
0006c2 f421      	BRNE _0x20000BF
                 _0x20000B8:
0006c3 fcf0      	SBRC R15,0
0006c4 c049      	RJMP _0x20000C1
0006c5 2f43      	MOV  R20,R19
0006c6 c019      	RJMP _0x20000B5
                 _0x20000BF:
                 _0x20000BE:
0006c7 3631      	CPI  R19,97
0006c8 f010      	BRLO _0x20000C2
0006c9 5537      	SUBI R19,LOW(87)
0006ca c005      	RJMP _0x20000C3
                 _0x20000C2:
0006cb 3431      	CPI  R19,65
0006cc f010      	BRLO _0x20000C4
0006cd 5337      	SUBI R19,LOW(55)
0006ce c001      	RJMP _0x20000C5
                 _0x20000C4:
0006cf 5330      	SUBI R19,LOW(48)
                 _0x20000C5:
                 _0x20000C3:
0006d0 2fe2      	MOV  R30,R18
0006d1 81ae      	LDD  R26,Y+6
0006d2 81bf      	LDD  R27,Y+6+1
0006d3 e0f0      	LDI  R31,0
0006d4 940e 08d5 	CALL __MULW12U
0006d6 01df      	MOVW R26,R30
0006d7 2fe3      	MOV  R30,R19
0006d8 e0f0      	LDI  R31,0
0006d9 0fea      	ADD  R30,R26
0006da 1ffb      	ADC  R31,R27
0006db 83ee      	STD  Y+6,R30
0006dc 83ff      	STD  Y+6+1,R31
0006dd 94e8      	CLT
0006de f8f0      	BLD  R15,0
0006df cfb5      	RJMP _0x20000B3
                 _0x20000B5:
0006e0 940e 089e 	CALL SUBOPT_0x10
0006e2 fef2      	SBRS R15,2
0006e3 c006      	RJMP _0x20000C6
0006e4 81ee      	LDD  R30,Y+6
0006e5 81ff      	LDD  R31,Y+6+1
0006e6 940e 08cc 	CALL __ANEGW1
0006e8 83ee      	STD  Y+6,R30
0006e9 83ff      	STD  Y+6+1,R31
                 _0x20000C6:
0006ea 81ee      	LDD  R30,Y+6
0006eb 81ff      	LDD  R31,Y+6+1
0006ec 01d8      	MOVW R26,R16
0006ed 93ed      	ST   X+,R30
0006ee 93fc      	ST   X,R31
                 _0x200009B:
0006ef 85e8      	LDD  R30,Y+8
0006f0 85f9      	LDD  R31,Y+8+1
0006f1 9631      	ADIW R30,1
0006f2 87e8      	STD  Y+8,R30
0006f3 87f9      	STD  Y+8+1,R31
0006f4 c018      	RJMP _0x20000C7
                 _0x200008A:
                 _0x20000B1:
0006f5 b7ed      	IN   R30,SPL
0006f6 b7fe      	IN   R31,SPH
0006f7 93fa      	ST   -Y,R31
0006f8 93ea      	ST   -Y,R30
0006f9 934f      	PUSH R20
0006fa 940e 0893 	CALL SUBOPT_0xE
0006fc 914f      	POP  R20
0006fd 17e3      	CP   R30,R19
0006fe f071      	BREQ _0x20000C8
0006ff 940e 0899 	CALL SUBOPT_0xF
000701 f41c      	BRGE _0x20000C9
000702 efef      	LDI  R30,LOW(65535)
000703 efff      	LDI  R31,HIGH(65535)
000704 c00b      	RJMP _0x2080005
                 _0x20000C9:
                 _0x2000097:
000705 85e8      	LDD  R30,Y+8
000706 85f9      	LDD  R31,Y+8+1
000707 9730      	SBIW R30,0
000708 f419      	BRNE _0x20000CA
000709 efef      	LDI  R30,LOW(65535)
00070a efff      	LDI  R31,HIGH(65535)
00070b c004      	RJMP _0x2080005
                 _0x20000CA:
00070c c001      	RJMP _0x2000081
                 _0x20000C8:
                 _0x20000C7:
                 _0x2000089:
00070d ced0      	RJMP _0x200007F
                 _0x2000081:
                 _0x20000C1:
                 _0x2080006:
00070e 85e8      	LDD  R30,Y+8
00070f 85f9      	LDD  R31,Y+8+1
                 _0x2080005:
000710 940e 0904 	CALL __LOADLOCR6
000712 9662      	ADIW R28,18
000713 90ff      	POP  R15
000714 9508      	RET
                 ; .FEND
                 _sscanf:
                 ; .FSTART _sscanf
000715 92ff      	PUSH R15
000716 2ef8      	MOV  R15,R24
000717 9723      	SBIW R28,3
000718 931a      	ST   -Y,R17
000719 930a      	ST   -Y,R16
00071a 940e 08a9 	CALL SUBOPT_0x11
00071c 9730      	SBIW R30,0
00071d f419      	BRNE _0x20000CB
00071e efef      	LDI  R30,LOW(65535)
00071f efff      	LDI  R31,HIGH(65535)
000720 c028      	RJMP _0x2080004
                 _0x20000CB:
000721 01de      	MOVW R26,R28
000722 9611      	ADIW R26,1
000723 940e 08c8 	CALL __ADDW2R15
000725 018d      	MOVW R16,R26
000726 940e 08a9 	CALL SUBOPT_0x11
000728 83eb      	STD  Y+3,R30
000729 83fc      	STD  Y+3+1,R31
00072a 01de      	MOVW R26,R28
00072b 9615      	ADIW R26,5
00072c 940e 0878 	CALL SUBOPT_0xB
00072e ebe1      	LDI  R30,LOW(_get_buff_G100)
00072f e0f5      	LDI  R31,HIGH(_get_buff_G100)
000730 c013      	RJMP _0x2080003
                 ; .FEND
                 _scanf:
                 ; .FSTART _scanf
000731 92ff      	PUSH R15
000732 2ef8      	MOV  R15,R24
000733 9723      	SBIW R28,3
000734 931a      	ST   -Y,R17
000735 930a      	ST   -Y,R16
000736 01de      	MOVW R26,R28
000737 9611      	ADIW R26,1
000738 940e 08c8 	CALL __ADDW2R15
00073a 018d      	MOVW R16,R26
00073b e0e0      	LDI  R30,LOW(0)
00073c 83eb      	STD  Y+3,R30
00073d 83ec      	STD  Y+3+1,R30
00073e 01de      	MOVW R26,R28
00073f 9615      	ADIW R26,5
000740 940e 0878 	CALL SUBOPT_0xB
000742 eae5      	LDI  R30,LOW(_get_usart_G100)
000743 e0f5      	LDI  R31,HIGH(_get_usart_G100)
                 _0x2080003:
000744 93fa      	ST   -Y,R31
000745 93ea      	ST   -Y,R30
000746 01de      	MOVW R26,R28
000747 9618      	ADIW R26,8
000748 de8a      	RCALL __scanf_G100
                 _0x2080004:
000749 8119      	LDD  R17,Y+1
00074a 8108      	LDD  R16,Y+0
00074b 9625      	ADIW R28,5
00074c 90ff      	POP  R15
00074d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00074e 93aa      	ST   -Y,R26
00074f b3e5      	IN   R30,0x15
000750 70ef      	ANDI R30,LOW(0xF)
000751 2fae      	MOV  R26,R30
000752 81e8      	LD   R30,Y
000753 7fe0      	ANDI R30,LOW(0xF0)
000754 2bea      	OR   R30,R26
000755 bbe5      	OUT  0x15,R30
                +
000756 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000757 958a     +DEC R24
000758 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000759 9aaa      	SBI  0x15,2
                +
00075a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00075b 958a     +DEC R24
00075c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00075d 98aa      	CBI  0x15,2
                +
00075e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00075f 958a     +DEC R24
000760 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000761 c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000762 93aa      	ST   -Y,R26
000763 81a8      	LD   R26,Y
000764 dfe9      	RCALL __lcd_write_nibble_G101
000765 81e8          ld    r30,y
000766 95e2          swap  r30
000767 83e8          st    y,r30
000768 81a8      	LD   R26,Y
000769 dfe4      	RCALL __lcd_write_nibble_G101
                +
00076a e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00076b 958a     +DEC R24
00076c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00076d c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00076e 93aa      	ST   -Y,R26
00076f 81e8      	LD   R30,Y
000770 e0f0      	LDI  R31,0
000771 54eb      	SUBI R30,LOW(-__base_y_G101)
000772 4ffe      	SBCI R31,HIGH(-__base_y_G101)
000773 81e0      	LD   R30,Z
000774 81a9      	LDD  R26,Y+1
000775 0fae      	ADD  R26,R30
000776 dfeb      	RCALL __lcd_write_data
000777 81e9      	LDD  R30,Y+1
000778 93e0 01b9 	STS  __lcd_x,R30
00077a 81e8      	LD   R30,Y
00077b 93e0 01ba 	STS  __lcd_y,R30
00077d 9622      	ADIW R28,2
00077e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00077f e0a2      	LDI  R26,LOW(2)
000780 940e 08b0 	CALL SUBOPT_0x12
000782 e0ac      	LDI  R26,LOW(12)
000783 dfde      	RCALL __lcd_write_data
000784 e0a1      	LDI  R26,LOW(1)
000785 940e 08b0 	CALL SUBOPT_0x12
000787 e0e0      	LDI  R30,LOW(0)
000788 93e0 01ba 	STS  __lcd_y,R30
00078a 93e0 01b9 	STS  __lcd_x,R30
00078c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00078d 93aa      	ST   -Y,R26
00078e 81a8      	LD   R26,Y
00078f 30aa      	CPI  R26,LOW(0xA)
000790 f031      	BREQ _0x2020005
000791 91e0 01bb 	LDS  R30,__lcd_maxx
000793 91a0 01b9 	LDS  R26,__lcd_x
000795 17ae      	CP   R26,R30
000796 f060      	BRLO _0x2020004
                 _0x2020005:
000797 e0e0      	LDI  R30,LOW(0)
000798 93ea      	ST   -Y,R30
000799 91a0 01ba 	LDS  R26,__lcd_y
00079b 5faf      	SUBI R26,-LOW(1)
00079c 93a0 01ba 	STS  __lcd_y,R26
00079e dfcf      	RCALL _lcd_gotoxy
00079f 81a8      	LD   R26,Y
0007a0 30aa      	CPI  R26,LOW(0xA)
0007a1 f409      	BRNE _0x2020007
0007a2 c048      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0007a3 91e0 01b9 	LDS  R30,__lcd_x
0007a5 5fef      	SUBI R30,-LOW(1)
0007a6 93e0 01b9 	STS  __lcd_x,R30
0007a8 9aa8      	SBI  0x15,0
0007a9 81a8      	LD   R26,Y
0007aa dfb7      	RCALL __lcd_write_data
0007ab 98a8      	CBI  0x15,0
0007ac c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0007ad 93ba      	ST   -Y,R27
0007ae 93aa      	ST   -Y,R26
0007af 931a      	ST   -Y,R17
                 _0x2020008:
0007b0 81a9      	LDD  R26,Y+1
0007b1 81ba      	LDD  R27,Y+1+1
0007b2 91ed      	LD   R30,X+
0007b3 83a9      	STD  Y+1,R26
0007b4 83ba      	STD  Y+1+1,R27
0007b5 2f1e      	MOV  R17,R30
0007b6 30e0      	CPI  R30,0
0007b7 f019      	BREQ _0x202000A
0007b8 2fa1      	MOV  R26,R17
0007b9 dfd3      	RCALL _lcd_putchar
0007ba cff5      	RJMP _0x2020008
                 _0x202000A:
0007bb 8118      	LDD  R17,Y+0
                 _0x2080002:
0007bc 9623      	ADIW R28,3
0007bd 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0007be 93aa      	ST   -Y,R26
0007bf b3e4      	IN   R30,0x14
0007c0 6fe0      	ORI  R30,LOW(0xF0)
0007c1 bbe4      	OUT  0x14,R30
0007c2 9aa2      	SBI  0x14,2
0007c3 9aa0      	SBI  0x14,0
0007c4 9aa1      	SBI  0x14,1
0007c5 98aa      	CBI  0x15,2
0007c6 98a8      	CBI  0x15,0
0007c7 98a9      	CBI  0x15,1
0007c8 81e8      	LD   R30,Y
0007c9 93e0 01bb 	STS  __lcd_maxx,R30
0007cb 58e0      	SUBI R30,-LOW(128)
                +
0007cc 93e0 01b7+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0007ce 81e8      	LD   R30,Y
0007cf 54e0      	SUBI R30,-LOW(192)
                +
0007d0 93e0 01b8+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0007d2 e1a4      	LDI  R26,LOW(20)
0007d3 e0b0      	LDI  R27,0
0007d4 940e 08be 	CALL _delay_ms
0007d6 940e 08b6 	CALL SUBOPT_0x13
0007d8 940e 08b6 	CALL SUBOPT_0x13
0007da 940e 08b6 	CALL SUBOPT_0x13
0007dc e2a0      	LDI  R26,LOW(32)
0007dd df70      	RCALL __lcd_write_nibble_G101
                +
0007de ec88     +LDI R24 , LOW ( 200 )
0007df e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0007e0 9701     +SBIW R24 , 1
0007e1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0007e2 e2a8      	LDI  R26,LOW(40)
0007e3 df7e      	RCALL __lcd_write_data
0007e4 e0a4      	LDI  R26,LOW(4)
0007e5 df7c      	RCALL __lcd_write_data
0007e6 e8a5      	LDI  R26,LOW(133)
0007e7 df7a      	RCALL __lcd_write_data
0007e8 e0a6      	LDI  R26,LOW(6)
0007e9 df78      	RCALL __lcd_write_data
0007ea df94      	RCALL _lcd_clear
                 _0x2080001:
0007eb 9621      	ADIW R28,1
0007ec 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0007ed 93ba      	ST   -Y,R27
0007ee 93aa      	ST   -Y,R26
0007ef 91a9          ld   r26,y+
0007f0 91b9          ld   r27,y+
0007f1 27ee          clr  r30
0007f2 27ff          clr  r31
                 strlen0:
0007f3 916d          ld   r22,x+
0007f4 2366          tst  r22
0007f5 f011          breq strlen1
0007f6 9631          adiw r30,1
0007f7 cffb          rjmp strlen0
                 strlen1:
0007f8 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0007f9 93ba      	ST   -Y,R27
0007fa 93aa      	ST   -Y,R26
0007fb 27aa          clr  r26
0007fc 27bb          clr  r27
0007fd 91e9          ld   r30,y+
0007fe 91f9          ld   r31,y+
                 strlenf0:
0007ff 9005      	lpm  r0,z+
000800 2000          tst  r0
000801 f011          breq strlenf1
000802 9611          adiw r26,1
000803 cffb          rjmp strlenf0
                 strlenf1:
000804 01fd          movw r30,r26
000805 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
000806 93aa      	ST   -Y,R26
000807 e0e1          ldi  r30,1
000808 91f9          ld   r31,y+
000809 33f0          cpi  r31,'0'
00080a f010          brlo isdigit0
00080b 33fa          cpi  r31,'9'+1
00080c f008          brlo isdigit1
                 isdigit0:
00080d 27ee          clr  r30
                 isdigit1:
00080e 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
00080f 93aa      	ST   -Y,R26
000810 e0e1          ldi  r30,1
000811 91f9          ld   r31,y+
000812 32f0          cpi  r31,' '
000813 f029          breq isspace1
000814 30f9          cpi  r31,9
000815 f010          brlo isspace0
000816 30fe          cpi  r31,13+1
000817 f008          brlo isspace1
                 isspace0:
000818 27ee          clr  r30
                 isspace1:
000819 9508          ret
                 ; .FEND
                 _isxdigit:
                 ; .FSTART _isxdigit
00081a 93aa      	ST   -Y,R26
00081b e0e1          ldi  r30,1
00081c 91f9          ld   r31,y+
00081d 53f0          subi r31,0x30
00081e f040          brcs isxdigit0
00081f 30fa          cpi  r31,10
000820 f038          brcs isxdigit1
000821 75ff          andi r31,0x5f
000822 50f7          subi r31,7
000823 30fa          cpi  r31,10
000824 f010          brcs isxdigit0
000825 31f0          cpi  r31,16
000826 f008          brcs isxdigit1
                 isxdigit0:
000827 27ee          clr  r30
                 isxdigit1:
000828 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _rx_buffer:
00019f           	.BYTE 0x8
                 _rx_wr_index:
0001a7           	.BYTE 0x1
                 _rx_rd_index:
0001a8           	.BYTE 0x1
                 _rx_counter:
0001a9           	.BYTE 0x1
                 _tx_buffer:
0001aa           	.BYTE 0x8
                 _tx_wr_index:
0001b2           	.BYTE 0x1
                 _tx_rd_index:
0001b3           	.BYTE 0x1
                 _tx_counter:
0001b4           	.BYTE 0x1
                 __base_y_G101:
0001b5           	.BYTE 0x4
                 __lcd_x:
0001b9           	.BYTE 0x1
                 __lcd_y:
0001ba           	.BYTE 0x1
                 __lcd_maxx:
0001bb           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x0:
000829 93fa      	ST   -Y,R31
00082a 93ea      	ST   -Y,R30
00082b e080      	LDI  R24,0
00082c 940e 0586 	CALL _printf
00082e 9622      	ADIW R28,2
00082f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000830 940e 08f8 	CALL __PUTPARD1
000832 e084      	LDI  R24,4
000833 940e 0558 	CALL _sprintf
000835 9628      	ADIW R28,8
000836 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000837 940e 07ad 	CALL _lcd_puts
000839 eea8      	LDI  R26,LOW(1000)
00083a e0b3      	LDI  R27,HIGH(1000)
00083b 940c 08be 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00083d e8e0      	LDI  R30,LOW(9600)
00083e e2f5      	LDI  R31,HIGH(9600)
00083f 93fa      	ST   -Y,R31
000840 93ea      	ST   -Y,R30
000841 e0e1      	LDI  R30,LOW(1)
000842 e0f0      	LDI  R31,HIGH(1)
000843 93fa      	ST   -Y,R31
000844 93ea      	ST   -Y,R30
000845 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000846 91ed      	LD   R30,X+
000847 91fd      	LD   R31,X+
000848 9631      	ADIW R30,1
000849 93fe      	ST   -X,R31
00084a 93ee      	ST   -X,R30
00084b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
00084c 932a      	ST   -Y,R18
00084d 85ad      	LDD  R26,Y+13
00084e 85be      	LDD  R27,Y+13+1
00084f 85ef      	LDD  R30,Y+15
000850 89f8      	LDD  R31,Y+15+1
000851 9509      	ICALL
000852 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000853 89e8      	LDD  R30,Y+16
000854 89f9      	LDD  R31,Y+16+1
000855 9734      	SBIW R30,4
000856 8be8      	STD  Y+16,R30
000857 8bf9      	STD  Y+16+1,R31
000858 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000859 85ad      	LDD  R26,Y+13
00085a 85be      	LDD  R27,Y+13+1
00085b 85ef      	LDD  R30,Y+15
00085c 89f8      	LDD  R31,Y+15+1
00085d 9509      	ICALL
00085e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
00085f 89a8      	LDD  R26,Y+16
000860 89b9      	LDD  R27,Y+16+1
000861 9614      	ADIW R26,4
000862 940e 08f0 	CALL __GETW1P
000864 83ee      	STD  Y+6,R30
000865 83ff      	STD  Y+6+1,R31
000866 81ae      	LDD  R26,Y+6
000867 81bf      	LDD  R27,Y+6+1
000868 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000869 89a8      	LDD  R26,Y+16
00086a 89b9      	LDD  R27,Y+16+1
00086b 9614      	ADIW R26,4
00086c 940e 08f0 	CALL __GETW1P
00086e 87ea      	STD  Y+10,R30
00086f 87fb      	STD  Y+10+1,R31
000870 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000871 01de      	MOVW R26,R28
000872 961c      	ADIW R26,12
000873 940e 08c8 	CALL __ADDW2R15
000875 940e 08f0 	CALL __GETW1P
000877 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
000878 940e 08c8 	CALL __ADDW2R15
00087a 940e 08f0 	CALL __GETW1P
00087c 93fa      	ST   -Y,R31
00087d 93ea      	ST   -Y,R30
00087e 931a      	ST   -Y,R17
00087f 930a      	ST   -Y,R16
000880 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000881 93ba      	ST   -Y,R27
000882 93aa      	ST   -Y,R26
000883 931a      	ST   -Y,R17
000884 81a9      	LDD  R26,Y+1
000885 81ba      	LDD  R27,Y+1+1
000886 e0e0      	LDI  R30,LOW(0)
000887 93ec      	ST   X,R30
000888 81ab      	LDD  R26,Y+3
000889 81bc      	LDD  R27,Y+3+1
00088a 91ec      	LD   R30,X
00088b 2f1e      	MOV  R17,R30
00088c 30e0      	CPI  R30,0
00088d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00088e 2fa3      	MOV  R26,R19
00088f 940e 080f 	CALL _isspace
000891 30e0      	CPI  R30,0
000892 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xE:
000893 85ac      	LDD  R26,Y+12
000894 85bd      	LDD  R27,Y+12+1
000895 85ee      	LDD  R30,Y+14
000896 85ff      	LDD  R31,Y+14+1
000897 9509      	ICALL
000898 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xF:
000899 85aa      	LDD  R26,Y+10
00089a 85bb      	LDD  R27,Y+10+1
00089b 91ac      	LD   R26,X
00089c 30a0      	CPI  R26,0
00089d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
00089e 85ee      	LDD  R30,Y+14
00089f 85ff      	LDD  R31,Y+14+1
0008a0 9734      	SBIW R30,4
0008a1 87ee      	STD  Y+14,R30
0008a2 87ff      	STD  Y+14+1,R31
0008a3 85ae      	LDD  R26,Y+14
0008a4 85bf      	LDD  R27,Y+14+1
0008a5 9614      	ADIW R26,4
0008a6 910d      	LD   R16,X+
0008a7 911c      	LD   R17,X
0008a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0008a9 01de      	MOVW R26,R28
0008aa 9617      	ADIW R26,7
0008ab 940e 08c8 	CALL __ADDW2R15
0008ad 940e 08f0 	CALL __GETW1P
0008af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0008b0 940e 0762 	CALL __lcd_write_data
0008b2 e0a3      	LDI  R26,LOW(3)
0008b3 e0b0      	LDI  R27,0
0008b4 940c 08be 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x13:
0008b6 e3a0      	LDI  R26,LOW(48)
0008b7 940e 074e 	CALL __lcd_write_nibble_G101
                +
0008b9 ec88     +LDI R24 , LOW ( 200 )
0008ba e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0008bb 9701     +SBIW R24 , 1
0008bc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0008bd 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0008be 9610      	adiw r26,0
0008bf f039      	breq __delay_ms1
                 __delay_ms0:
                +
0008c0 ed80     +LDI R24 , LOW ( 0x7D0 )
0008c1 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0008c2 9701     +SBIW R24 , 1
0008c3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0008c4 95a8      	wdr
0008c5 9711      	sbiw r26,1
0008c6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0008c7 9508      	ret
                 
                 __ADDW2R15:
0008c8 2400      	CLR  R0
0008c9 0daf      	ADD  R26,R15
0008ca 1db0      	ADC  R27,R0
0008cb 9508      	RET
                 
                 __ANEGW1:
0008cc 95f1      	NEG  R31
0008cd 95e1      	NEG  R30
0008ce 40f0      	SBCI R31,0
0008cf 9508      	RET
                 
                 __CWD1:
0008d0 2f6f      	MOV  R22,R31
0008d1 0f66      	ADD  R22,R22
0008d2 0b66      	SBC  R22,R22
0008d3 2f76      	MOV  R23,R22
0008d4 9508      	RET
                 
                 __MULW12U:
0008d5 9ffa      	MUL  R31,R26
0008d6 2df0      	MOV  R31,R0
0008d7 9feb      	MUL  R30,R27
0008d8 0df0      	ADD  R31,R0
0008d9 9fea      	MUL  R30,R26
0008da 2de0      	MOV  R30,R0
0008db 0df1      	ADD  R31,R1
0008dc 9508      	RET
                 
                 __MULW12:
0008dd d004      	RCALL __CHKSIGNW
0008de dff6      	RCALL __MULW12U
0008df f40e      	BRTC __MULW121
0008e0 dfeb      	RCALL __ANEGW1
                 __MULW121:
0008e1 9508      	RET
                 
                 __CHKSIGNW:
0008e2 94e8      	CLT
0008e3 fff7      	SBRS R31,7
0008e4 c002      	RJMP __CHKSW1
0008e5 dfe6      	RCALL __ANEGW1
0008e6 9468      	SET
                 __CHKSW1:
0008e7 ffb7      	SBRS R27,7
0008e8 c006      	RJMP __CHKSW2
0008e9 95a0      	COM  R26
0008ea 95b0      	COM  R27
0008eb 9611      	ADIW R26,1
0008ec f800      	BLD  R0,0
0008ed 9403      	INC  R0
0008ee fa00      	BST  R0,0
                 __CHKSW2:
0008ef 9508      	RET
                 
                 __GETW1P:
0008f0 91ed      	LD   R30,X+
0008f1 91fc      	LD   R31,X
0008f2 9711      	SBIW R26,1
0008f3 9508      	RET
                 
                 __GETW1PF:
0008f4 9005      	LPM  R0,Z+
0008f5 91f4      	LPM  R31,Z
0008f6 2de0      	MOV  R30,R0
0008f7 9508      	RET
                 
                 __PUTPARD1:
0008f8 937a      	ST   -Y,R23
0008f9 936a      	ST   -Y,R22
0008fa 93fa      	ST   -Y,R31
0008fb 93ea      	ST   -Y,R30
0008fc 9508      	RET
                 
                 __SAVELOCR6:
0008fd 935a      	ST   -Y,R21
                 __SAVELOCR5:
0008fe 934a      	ST   -Y,R20
                 __SAVELOCR4:
0008ff 933a      	ST   -Y,R19
                 __SAVELOCR3:
000900 932a      	ST   -Y,R18
                 __SAVELOCR2:
000901 931a      	ST   -Y,R17
000902 930a      	ST   -Y,R16
000903 9508      	RET
                 
                 __LOADLOCR6:
000904 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000905 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000906 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000907 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000908 8119      	LDD  R17,Y+1
000909 8108      	LD   R16,Y
00090a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  28 r1 :   4 r2 :   1 r3 :   0 r4 :   4 r5 :   2 r6 :   2 r7 :   1 
r8 :   5 r9 :   4 r10:   1 r11:   0 r12:  13 r13:   9 r14:   0 r15:  26 
r16:  54 r17:  47 r18:  36 r19:  35 r20:  25 r21:  27 r22:  18 r23:   9 
r24:  35 r25:   7 r26: 268 r27:  66 r28:  37 r29:   1 r30: 510 r31: 218 
x  :  32 y  : 348 z  :  23 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   8 
adiw  :  50 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   9 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   4 break :   0 breq  :  40 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   1 brmi  :   1 brne  :  99 brpl  :   1 brsh  :   3 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 131 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  28 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   2 
cp    :  13 cpc   :  46 cpi   : 120 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :  20 inc   :   1 jmp   :  26 ld    :  57 ldd   : 129 ldi   : 278 
lds   :  19 lpm   :  17 lsl   :   0 lsr   :   0 mov   :  56 movw  :  38 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   7 out   :  40 pop   :  12 push  :  13 rcall :  30 ret   :  52 
reti  :   2 rjmp  : 156 rol   :   0 ror   :   0 sbc   :   2 sbci  :   7 
sbi   :  11 sbic  :   1 sbis  :   0 sbiw  :  32 sbr   :   0 sbrc  :   4 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 147 std   :  56 sts   :  22 sub   :   1 subi  :  43 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001216   4248    382   4630   16384  28.3%
[.dseg] 0x000060 0x0001bc      0     92     92    1024   9.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
