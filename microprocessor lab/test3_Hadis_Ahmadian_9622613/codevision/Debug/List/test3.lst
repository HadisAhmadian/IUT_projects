
AVRASM ver. 2.1.30  E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm Sat Oct 17 20:07:38 2020

E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1096): warning: Register r12 already defined by the .DEF directive
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _string=R4
                 	.DEF _string_msb=R5
                 	.DEF _sub=R6
                 	.DEF _sub_msb=R7
                 	.DEF _speed=R8
                 	.DEF _speed_msb=R9
                 	.DEF _time=R10
                 	.DEF _time_msb=R11
                 	.DEF _Weigt=R12
                 	.DEF _Weigt_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00c4 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 00f9 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0160
00002b 019a      	.DB  LOW(_0x20003),HIGH(_0x20003),LOW(_0x20004),HIGH(_0x20004)
                 
                 _0x20005:
00002c 3130
00002d 3332
00002e 3534
00002f 3736      	.DB  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
000030 3938
000031 4241
000032 4443
000033 4645      	.DB  0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46
                 _0x20000:
000034 5720
000035 6c65
000036 6f63
000037 656d      	.DB  0x20,0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65
000038 7420
000039 206f
00003a 6874
00003b 2065      	.DB  0x20,0x74,0x6F,0x20,0x74,0x68,0x65,0x20
00003c 6e6f
00003d 696c
00003e 656e
00003f 6c20      	.DB  0x6F,0x6E,0x6C,0x69,0x6E,0x65,0x20,0x6C
000040 6261
000041 6320
000042 616c
000043 7373      	.DB  0x61,0x62,0x20,0x63,0x6C,0x61,0x73,0x73
000044 7365
000045 6420
000046 6575
000047 7420      	.DB  0x65,0x73,0x20,0x64,0x75,0x65,0x20,0x74
000048 206f
000049 6f43
00004a 6f72
00004b 616e      	.DB  0x6F,0x20,0x43,0x6F,0x72,0x6F,0x6E,0x61
00004c 6420
00004d 7369
00004e 6165
00004f 6573      	.DB  0x20,0x64,0x69,0x73,0x65,0x61,0x73,0x65
000050 002e
000051 3030
000052 3030
000053 3030      	.DB  0x2E,0x0,0x30,0x30,0x30,0x30,0x30,0x30
000054 3030
000055 3030
000056 3030
000057 3030      	.DB  0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30
000058 3030
000059 4800
00005a 6461
00005b 7369      	.DB  0x30,0x30,0x0,0x48,0x61,0x64,0x69,0x73
00005c 4120
00005d 6d68
00005e 6461
00005f 6169      	.DB  0x20,0x41,0x68,0x6D,0x61,0x64,0x69,0x61
000060 0a6e
000061 3639
000062 3232
000063 3136      	.DB  0x6E,0xA,0x39,0x36,0x32,0x32,0x36,0x31
000064 0033
000065 7053
000066 6565
000067 3a64      	.DB  0x33,0x0,0x53,0x70,0x65,0x65,0x64,0x3A
000068 3f3f
000069 3028
00006a 352d
00006b 7230      	.DB  0x3F,0x3F,0x28,0x30,0x2D,0x35,0x30,0x72
00006c 0a29
00006d 4500
00006e 0045
00006f 6954      	.DB  0x29,0xA,0x0,0x45,0x45,0x0,0x54,0x69
000070 656d
000071 3f3a
000072 283f
000073 2d30      	.DB  0x6D,0x65,0x3A,0x3F,0x3F,0x28,0x30,0x2D
000074 3939
000075 2973
000076 000a
000077 6557      	.DB  0x39,0x39,0x73,0x29,0xA,0x0,0x57,0x65
000078 6769
000079 3a74
00007a 3f3f
00007b 3028      	.DB  0x69,0x67,0x74,0x3A,0x3F,0x3F,0x28,0x30
00007c 392d
00007d 4639
00007e 0a29
00007f 5400      	.DB  0x2D,0x39,0x39,0x46,0x29,0xA,0x0,0x54
000080 6d65
000081 3a70
000082 3f3f
000083 3228      	.DB  0x65,0x6D,0x70,0x3A,0x3F,0x3F,0x28,0x32
000084 2d30
000085 3038
000086 2943
000087 000a      	.DB  0x30,0x2D,0x38,0x30,0x43,0x29,0xA,0x0
000088 4854
000089 2045
00008a 4e45
00008b 0044      	.DB  0x54,0x48,0x45,0x20,0x45,0x4E,0x44,0x0
                 _0x2000003:
00008c c080      	.DB  0x80,0xC0
                 _0x2040060:
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1161): warning: .cseg .db misalignment - padding zero byte
00008d 0001      	.DB  0x1
                 _0x2040000:
00008e 4e2d
00008f 4e41
000090 4900
000091 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\project\test3_Hadis_Ahmadian_9622613\codevision\Debug\List\test3.asm(1164): warning: .cseg .db misalignment - padding zero byte
000092 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000093 0004      	.DW  0x04
000094 0004      	.DW  0x04
000095 0054      	.DW  __REG_VARS*2
                 
000096 003a      	.DW  0x3A
000097 0160      	.DW  _0x20003
000098 0068      	.DW  _0x20000*2
                 
000099 0011      	.DW  0x11
00009a 019a      	.DW  _0x20004
00009b 00a2      	.DW  _0x20000*2+58
                 
00009c 0010      	.DW  0x10
00009d 0219      	.DW  _data_key
00009e 0058      	.DW  _0x20005*2
                 
00009f 0017      	.DW  0x17
0000a0 01ab      	.DW  _0x20012
0000a1 00b3      	.DW  _0x20000*2+75
                 
0000a2 0011      	.DW  0x11
0000a3 01c2      	.DW  _0x20031
0000a4 00ca      	.DW  _0x20000*2+98
                 
0000a5 0003      	.DW  0x03
0000a6 01d3      	.DW  _0x20031+17
0000a7 00db      	.DW  _0x20000*2+115
                 
0000a8 0010      	.DW  0x10
0000a9 01d6      	.DW  _0x20031+20
0000aa 00de      	.DW  _0x20000*2+118
                 
0000ab 0003      	.DW  0x03
0000ac 01e6      	.DW  _0x20031+36
0000ad 00db      	.DW  _0x20000*2+115
                 
0000ae 0011      	.DW  0x11
0000af 01e9      	.DW  _0x20031+39
0000b0 00ee      	.DW  _0x20000*2+134
                 
0000b1 0003      	.DW  0x03
0000b2 01fa      	.DW  _0x20031+56
0000b3 00db      	.DW  _0x20000*2+115
                 
0000b4 0011      	.DW  0x11
0000b5 01fd      	.DW  _0x20031+59
0000b6 00ff      	.DW  _0x20000*2+151
                 
0000b7 0003      	.DW  0x03
0000b8 020e      	.DW  _0x20031+76
0000b9 00db      	.DW  _0x20000*2+115
                 
0000ba 0008      	.DW  0x08
0000bb 0211      	.DW  _0x20031+79
0000bc 0110      	.DW  _0x20000*2+168
                 
0000bd 0002      	.DW  0x02
0000be 0230      	.DW  __base_y_G100
0000bf 0118      	.DW  _0x2000003*2
                 
0000c0 0001      	.DW  0x01
0000c1 0237      	.DW  __seed_G102
0000c2 011a      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
0000c3 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000c4 94f8      	CLI
0000c5 27ee      	CLR  R30
0000c6 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c7 e0f1      	LDI  R31,1
0000c8 bffb      	OUT  GICR,R31
0000c9 bfeb      	OUT  GICR,R30
0000ca bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000cb e08d      	LDI  R24,(14-2)+1
0000cc e0a2      	LDI  R26,2
0000cd 27bb      	CLR  R27
                 __CLEAR_REG:
0000ce 93ed      	ST   X+,R30
0000cf 958a      	DEC  R24
0000d0 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d1 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d2 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000d3 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000d4 93ed      	ST   X+,R30
0000d5 9701      	SBIW R24,1
0000d6 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d7 e2e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d8 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d9 9185      	LPM  R24,Z+
0000da 9195      	LPM  R25,Z+
0000db 9700      	SBIW R24,0
0000dc f061      	BREQ __GLOBAL_INI_END
0000dd 91a5      	LPM  R26,Z+
0000de 91b5      	LPM  R27,Z+
0000df 9005      	LPM  R0,Z+
0000e0 9015      	LPM  R1,Z+
0000e1 01bf      	MOVW R22,R30
0000e2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000e3 9005      	LPM  R0,Z+
0000e4 920d      	ST   X+,R0
0000e5 9701      	SBIW R24,1
0000e6 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e7 01fb      	MOVW R30,R22
0000e8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e9 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ea bfed      	OUT  SPL,R30
0000eb e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ec bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ed e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ee e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ef 940c 00f1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <header.h>
                 ;void main(void)
                 ; 0000 0003 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0004 
                 ; 0000 0005 all_init();
0000f1 d1d9      	RCALL _all_init
                 ; 0000 0006 #asm("sei")
0000f2 9478      	sei
                 ; 0000 0007 
                 ; 0000 0008 
                 ; 0000 0009 one();
0000f3 d04e      	RCALL _one
                 ; 0000 000A two();
0000f4 d052      	RCALL _two
                 ; 0000 000B three();
0000f5 d075      	RCALL _three
                 ; 0000 000C four();
0000f6 d0be      	RCALL _four
                 ; 0000 000D five();
0000f7 d0c7      	RCALL _five
                 ; 0000 000E 
                 ; 0000 000F 
                 ; 0000 0010 
                 ; 0000 0011 }
                 _0x3:
0000f8 cfff      	RJMP _0x3
                 ; .FEND
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;
                 ;char* string=" Welcome to the online lab classes due to Corona disease.";
                 
                 	.DSEG
                 _0x20003:
000160           	.BYTE 0x3A
                 ;char* sub="0000000000000000";
                 _0x20004:
00019a           	.BYTE 0x11
                 ;char data_key[]={'0','1','2','3',
                 ;                 '4','5','6','7',
                 ;                 '8','9','A','B',
                 ;                 'C','D','E','F'};
                 ;
                 ;int speed,time,Weigt,Temp;
                 ;char i,j,flag,intrupt_flag=0;
                 ;char t;
                 ;
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0001 0015 {
                 
                 	.CSEG
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000f9 920a      	ST   -Y,R0
0000fa 921a      	ST   -Y,R1
0000fb 92fa      	ST   -Y,R15
0000fc 936a      	ST   -Y,R22
0000fd 937a      	ST   -Y,R23
0000fe 938a      	ST   -Y,R24
0000ff 939a      	ST   -Y,R25
000100 93aa      	ST   -Y,R26
000101 93ba      	ST   -Y,R27
000102 93ea      	ST   -Y,R30
000103 93fa      	ST   -Y,R31
000104 b7ef      	IN   R30,SREG
000105 93ea      	ST   -Y,R30
                 ; 0001 0016 
                 ; 0001 0017     if(intrupt_flag){
000106 91e0 022e 	LDS  R30,_intrupt_flag
000108 30e0      	CPI  R30,0
000109 f151      	BREQ _0x20006
                 ; 0001 0018     flag=1;
00010a e0e1      	LDI  R30,LOW(1)
00010b 93e0 022d 	STS  _flag,R30
                 ; 0001 0019     while(flag)
                 _0x20007:
00010d 91e0 022d 	LDS  R30,_flag
00010f 30e0      	CPI  R30,0
000110 f0f1      	BREQ _0x20009
                 ; 0001 001A     {
                 ; 0001 001B         for(i=4;i<8;i++)
000111 e0e4      	LDI  R30,LOW(4)
000112 93e0 022b 	STS  _i,R30
                 _0x2000B:
000114 91a0 022b 	LDS  R26,_i
000116 30a8      	CPI  R26,LOW(0x8)
000117 f4b0      	BRSH _0x2000C
                 ; 0001 001C         {
                 ; 0001 001D             PORTB=0;
000118 940e 0390 	CALL SUBOPT_0x0
                 ; 0001 001E             PORTB=1<<i;
                 ; 0001 001F             for(j=0;j<4;j++)
                 _0x2000E:
00011a 91a0 022c 	LDS  R26,_j
00011c 30a4      	CPI  R26,LOW(0x4)
00011d f448      	BRSH _0x2000F
                 ; 0001 0020             {
                 ; 0001 0021                  if((PINB&(1<<j))==(1<<j))
00011e 940e 039c 	CALL SUBOPT_0x1
000120 f419      	BRNE _0x20010
                 ; 0001 0022                  {
                 ; 0001 0023                     lcd_putchar(  data_key[(4*(i-4))+j]  );
000121 940e 03b1 	CALL SUBOPT_0x2
                 ; 0001 0024                     flag=0;
                 ; 0001 0025 
                 ; 0001 0026                     break;
000123 c003      	RJMP _0x2000F
                 ; 0001 0027                  }
                 ; 0001 0028 
                 ; 0001 0029              }
                 _0x20010:
000124 940e 03c6 	CALL SUBOPT_0x3
000126 cff3      	RJMP _0x2000E
                 _0x2000F:
                 ; 0001 002A 
                 ; 0001 002B          if(flag==0)
000127 91e0 022d 	LDS  R30,_flag
000129 30e0      	CPI  R30,0
00012a f019      	BREQ _0x2000C
                 ; 0001 002C          break;
                 ; 0001 002D 
                 ; 0001 002E          }
00012b 940e 03cc 	CALL SUBOPT_0x4
00012d cfe6      	RJMP _0x2000B
                 _0x2000C:
                 ; 0001 002F 
                 ; 0001 0030     }
00012e cfde      	RJMP _0x20007
                 _0x20009:
                 ; 0001 0031     intrupt_flag=0;
00012f e0e0      	LDI  R30,LOW(0)
000130 93e0 022e 	STS  _intrupt_flag,R30
                 ; 0001 0032     delay_ms(1000);
000132 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 0033        }
                 ; 0001 0034 }
                 _0x20006:
000134 91e9      	LD   R30,Y+
000135 bfef      	OUT  SREG,R30
000136 91f9      	LD   R31,Y+
000137 91e9      	LD   R30,Y+
000138 91b9      	LD   R27,Y+
000139 91a9      	LD   R26,Y+
00013a 9199      	LD   R25,Y+
00013b 9189      	LD   R24,Y+
00013c 9179      	LD   R23,Y+
00013d 9169      	LD   R22,Y+
00013e 90f9      	LD   R15,Y+
00013f 9019      	LD   R1,Y+
000140 9009      	LD   R0,Y+
000141 9518      	RETI
                 ; .FEND
                 ;
                 ;void one()
                 ; 0001 0037 {
                 _one:
                 ; .FSTART _one
                 ; 0001 0038  lcd_puts("Hadis Ahmadian\n9622613" );
                +
000142 eaab     +LDI R26 , LOW ( _0x20012 + ( 0 ) )
000143 e0b1     +LDI R27 , HIGH ( _0x20012 + ( 0 ) )
                 	__POINTW2MN _0x20012,0
000144 940e 032f 	CALL _lcd_puts
                 ; 0001 0039  delay_ms(1000);
000146 c049      	RJMP _0x20A0003
                 ; 0001 003A  lcd_clear();
                 ; 0001 003B }
                 ; .FEND
                 
                 	.DSEG
                 _0x20012:
0001ab           	.BYTE 0x17
                 ;
                 ;
                 ;void two()
                 ; 0001 003F {
                 
                 	.CSEG
                 _two:
                 ; .FSTART _two
                 ; 0001 0040  for(i=0;i<=strlen(string);i++)
000147 e0e0      	LDI  R30,LOW(0)
000148 93e0 022b 	STS  _i,R30
                 _0x20014:
00014a 01d2      	MOVW R26,R4
00014b 940e 036f 	CALL _strlen
00014d 91a0 022b 	LDS  R26,_i
00014f e0b0      	LDI  R27,0
000150 17ea      	CP   R30,R26
000151 07fb      	CPC  R31,R27
000152 f0b8      	BRLO _0x20015
                 ; 0001 0041     {
                 ; 0001 0042        delay_ms(100);
000153 e6a4      	LDI  R26,LOW(100)
000154 e0b0      	LDI  R27,0
000155 940e 0407 	CALL _delay_ms
                 ; 0001 0043        lcd_clear();
000157 d1a9      	RCALL _lcd_clear
                 ; 0001 0044        strncpy(sub,string+i,16);
000158 927a      	ST   -Y,R7
000159 926a      	ST   -Y,R6
00015a 91e0 022b 	LDS  R30,_i
00015c e0f0      	LDI  R31,0
00015d 0de4      	ADD  R30,R4
00015e 1df5      	ADC  R31,R5
00015f 93fa      	ST   -Y,R31
000160 93ea      	ST   -Y,R30
000161 e1a0      	LDI  R26,LOW(16)
000162 940e 037b 	CALL _strncpy
                 ; 0001 0045        lcd_puts(sub);
000164 01d3      	MOVW R26,R6
000165 940e 032f 	CALL _lcd_puts
                 ; 0001 0046     }
000167 940e 03cc 	CALL SUBOPT_0x4
000169 cfe0      	RJMP _0x20014
                 _0x20015:
                 ; 0001 0047 
                 ; 0001 0048  lcd_clear();
00016a c029      	RJMP _0x20A0002
                 ; 0001 0049 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void three(void)
                 ; 0001 004E {
                 _three:
                 ; .FSTART _three
                 ; 0001 004F     flag=1;
00016b e0e1      	LDI  R30,LOW(1)
00016c 93e0 022d 	STS  _flag,R30
                 ; 0001 0050     while(flag)
                 _0x20016:
00016e 91e0 022d 	LDS  R30,_flag
000170 30e0      	CPI  R30,0
000171 f0f1      	BREQ _0x20018
                 ; 0001 0051     {
                 ; 0001 0052         for(i=4;i<8;i++)
000172 e0e4      	LDI  R30,LOW(4)
000173 93e0 022b 	STS  _i,R30
                 _0x2001A:
000175 91a0 022b 	LDS  R26,_i
000177 30a8      	CPI  R26,LOW(0x8)
000178 f4b0      	BRSH _0x2001B
                 ; 0001 0053         {
                 ; 0001 0054             PORTB=0;
000179 940e 0390 	CALL SUBOPT_0x0
                 ; 0001 0055             PORTB=1<<i;
                 ; 0001 0056             for(j=0;j<4;j++)
                 _0x2001D:
00017b 91a0 022c 	LDS  R26,_j
00017d 30a4      	CPI  R26,LOW(0x4)
00017e f448      	BRSH _0x2001E
                 ; 0001 0057             {
                 ; 0001 0058                  if((PINB&(1<<j))==(1<<j))
00017f 940e 039c 	CALL SUBOPT_0x1
000181 f419      	BRNE _0x2001F
                 ; 0001 0059                  {
                 ; 0001 005A                     lcd_putchar(  data_key[(4*(i-4))+j]  );
000182 940e 03b1 	CALL SUBOPT_0x2
                 ; 0001 005B                     flag=0;
                 ; 0001 005C                     break;
000184 c003      	RJMP _0x2001E
                 ; 0001 005D                  }
                 ; 0001 005E 
                 ; 0001 005F              }
                 _0x2001F:
000185 940e 03c6 	CALL SUBOPT_0x3
000187 cff3      	RJMP _0x2001D
                 _0x2001E:
                 ; 0001 0060 
                 ; 0001 0061          if(flag==0)
000188 91e0 022d 	LDS  R30,_flag
00018a 30e0      	CPI  R30,0
00018b f019      	BREQ _0x2001B
                 ; 0001 0062          break;
                 ; 0001 0063 
                 ; 0001 0064          }
00018c 940e 03cc 	CALL SUBOPT_0x4
00018e cfe6      	RJMP _0x2001A
                 _0x2001B:
                 ; 0001 0065 
                 ; 0001 0066     }
00018f cfde      	RJMP _0x20016
                 _0x20018:
                 ; 0001 0067 
                 ; 0001 0068     delay_ms(1000);
                 _0x20A0003:
000190 eea8      	LDI  R26,LOW(1000)
000191 e0b3      	LDI  R27,HIGH(1000)
000192 940e 0407 	CALL _delay_ms
                 ; 0001 0069     lcd_clear();
                 _0x20A0002:
000194 d16c      	RCALL _lcd_clear
                 ; 0001 006A 
                 ; 0001 006B }
000195 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;char key_press()
                 ; 0001 006F {
                 _key_press:
                 ; .FSTART _key_press
                 ; 0001 0070      while(1)
                 _0x20021:
                 ; 0001 0071     {
                 ; 0001 0072         for(i=4;i<8;i++)
000196 e0e4      	LDI  R30,LOW(4)
000197 93e0 022b 	STS  _i,R30
                 _0x20025:
000199 91a0 022b 	LDS  R26,_i
00019b 30a8      	CPI  R26,LOW(0x8)
00019c f4b8      	BRSH _0x20026
                 ; 0001 0073         {
                 ; 0001 0074             PORTB=0;
00019d 940e 0390 	CALL SUBOPT_0x0
                 ; 0001 0075             PORTB=1<<i;
                 ; 0001 0076             for(j=0;j<4;j++)
                 _0x20028:
00019f 91a0 022c 	LDS  R26,_j
0001a1 30a4      	CPI  R26,LOW(0x4)
0001a2 f470      	BRSH _0x20029
                 ; 0001 0077             {
                 ; 0001 0078                 if((PINB&(1<<j))==(1<<j))
0001a3 940e 039c 	CALL SUBOPT_0x1
0001a5 f441      	BRNE _0x2002A
                 ; 0001 0079                 {
                 ; 0001 007A                     lcd_putchar(  data_key[(4*(i-4))+j]  );
0001a6 940e 03d6 	CALL SUBOPT_0x6
0001a8 81a0      	LD   R26,Z
0001a9 d165      	RCALL _lcd_putchar
                 ; 0001 007B                     return(  data_key[(4*(i-4))+j]  );
0001aa 940e 03d6 	CALL SUBOPT_0x6
0001ac 81e0      	LD   R30,Z
0001ad 9508      	RET
                 ; 0001 007C                 }
                 ; 0001 007D 
                 ; 0001 007E             }
                 _0x2002A:
0001ae 940e 03c6 	CALL SUBOPT_0x3
0001b0 cfee      	RJMP _0x20028
                 _0x20029:
                 ; 0001 007F 
                 ; 0001 0080         }
0001b1 940e 03cc 	CALL SUBOPT_0x4
0001b3 cfe5      	RJMP _0x20025
                 _0x20026:
                 ; 0001 0081 
                 ; 0001 0082     }
0001b4 cfe1      	RJMP _0x20021
                 ; 0001 0083 
                 ; 0001 0084 }
                 ; .FEND
                 ;
                 ;
                 ;void four()
                 ; 0001 0088 {
                 _four:
                 ; .FSTART _four
                 ; 0001 0089  intrupt_flag=1;
0001b5 e0e1      	LDI  R30,LOW(1)
0001b6 93e0 022e 	STS  _intrupt_flag,R30
                 ; 0001 008A  PORTB=0xff;
0001b8 efef      	LDI  R30,LOW(255)
0001b9 bbe8      	OUT  0x18,R30
                 ; 0001 008B  while(intrupt_flag);
                 _0x2002B:
0001ba 91e0 022e 	LDS  R30,_intrupt_flag
0001bc 30e0      	CPI  R30,0
0001bd f7e1      	BRNE _0x2002B
                 ; 0001 008C }
0001be 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void five(void)
                 ; 0001 0090 {
                 _five:
                 ; .FSTART _five
                 ; 0001 0091 lcd_clear();
0001bf d141      	RCALL _lcd_clear
                 ; 0001 0092 
                 ; 0001 0093 flag=1;
0001c0 e0e1      	LDI  R30,LOW(1)
0001c1 93e0 022d 	STS  _flag,R30
                 ; 0001 0094 
                 ; 0001 0095 while(flag){
                 _0x2002E:
0001c3 91e0 022d 	LDS  R30,_flag
0001c5 30e0      	CPI  R30,0
0001c6 f141      	BREQ _0x20030
                 ; 0001 0096 
                 ; 0001 0097     lcd_clear();
0001c7 d139      	RCALL _lcd_clear
                 ; 0001 0098     lcd_puts("Speed:??(0-50r)\n");
                +
0001c8 eca2     +LDI R26 , LOW ( _0x20031 + ( 0 ) )
0001c9 e0b1     +LDI R27 , HIGH ( _0x20031 + ( 0 ) )
                 	__POINTW2MN _0x20031,0
0001ca d164      	RCALL _lcd_puts
                 ; 0001 0099     speed=0;
0001cb 2488      	CLR  R8
0001cc 2499      	CLR  R9
                 ; 0001 009A     t=key_press();
0001cd 940e 03e5 	CALL SUBOPT_0x7
                 ; 0001 009B 
                 ; 0001 009C     while(t!='F')
                 _0x20032:
0001cf 91a0 022f 	LDS  R26,_t
0001d1 34a6      	CPI  R26,LOW(0x46)
0001d2 f049      	BREQ _0x20034
                 ; 0001 009D     {
                 ; 0001 009E         speed=speed*10+(t - '0');
0001d3 01f4      	MOVW R30,R8
0001d4 940e 03ea 	CALL SUBOPT_0x8
0001d6 014f      	MOVW R8,R30
                 ; 0001 009F         delay_ms(1000);
0001d7 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 00A0         t=key_press();
0001d9 940e 03e5 	CALL SUBOPT_0x7
                 ; 0001 00A1     }
0001db cff3      	RJMP _0x20032
                 _0x20034:
                 ; 0001 00A2 
                 ; 0001 00A3     if(speed<0||speed>50)
0001dc 2400      	CLR  R0
0001dd 1480      	CP   R8,R0
0001de 0490      	CPC  R9,R0
0001df f02c      	BRLT _0x20036
0001e0 e3e2      	LDI  R30,LOW(50)
0001e1 e0f0      	LDI  R31,HIGH(50)
0001e2 15e8      	CP   R30,R8
0001e3 05f9      	CPC  R31,R9
0001e4 f434      	BRGE _0x20035
                 _0x20036:
                 ; 0001 00A4     {
                 ; 0001 00A5         lcd_clear();
0001e5 d11b      	RCALL _lcd_clear
                 ; 0001 00A6         lcd_puts("EE");
                +
0001e6 eda3     +LDI R26 , LOW ( _0x20031 + ( 17 ) )
0001e7 e0b1     +LDI R27 , HIGH ( _0x20031 + ( 17 ) )
                 	__POINTW2MN _0x20031,17
0001e8 940e 03f6 	CALL SUBOPT_0x9
                 ; 0001 00A7         delay_ms(1000);
                 ; 0001 00A8     }
                 ; 0001 00A9 
                 ; 0001 00AA     else
0001ea c003      	RJMP _0x20038
                 _0x20035:
                 ; 0001 00AB     {
                 ; 0001 00AC         flag=0;
0001eb e0e0      	LDI  R30,LOW(0)
0001ec 93e0 022d 	STS  _flag,R30
                 ; 0001 00AD     }
                 _0x20038:
                 ; 0001 00AE 
                 ; 0001 00AF }
0001ee cfd4      	RJMP _0x2002E
                 _0x20030:
                 ; 0001 00B0 
                 ; 0001 00B1 //****************************
                 ; 0001 00B2 
                 ; 0001 00B3 delay_ms(1000);
0001ef 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 00B4 flag=1;
0001f1 e0e1      	LDI  R30,LOW(1)
0001f2 93e0 022d 	STS  _flag,R30
                 ; 0001 00B5 while(flag){
                 _0x20039:
0001f4 91e0 022d 	LDS  R30,_flag
0001f6 30e0      	CPI  R30,0
0001f7 f141      	BREQ _0x2003B
                 ; 0001 00B6     lcd_clear();
0001f8 d108      	RCALL _lcd_clear
                 ; 0001 00B7     lcd_puts("Time:??(0-99s)\n");
                +
0001f9 eda6     +LDI R26 , LOW ( _0x20031 + ( 20 ) )
0001fa e0b1     +LDI R27 , HIGH ( _0x20031 + ( 20 ) )
                 	__POINTW2MN _0x20031,20
0001fb d133      	RCALL _lcd_puts
                 ; 0001 00B8     time=0;
0001fc 24aa      	CLR  R10
0001fd 24bb      	CLR  R11
                 ; 0001 00B9     t=key_press();
0001fe 940e 03e5 	CALL SUBOPT_0x7
                 ; 0001 00BA 
                 ; 0001 00BB     while(t!='F')
                 _0x2003C:
000200 91a0 022f 	LDS  R26,_t
000202 34a6      	CPI  R26,LOW(0x46)
000203 f049      	BREQ _0x2003E
                 ; 0001 00BC     {
                 ; 0001 00BD         time=time*10+((int)t-48);
000204 01f5      	MOVW R30,R10
000205 940e 03ea 	CALL SUBOPT_0x8
000207 015f      	MOVW R10,R30
                 ; 0001 00BE         delay_ms(1000);
000208 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 00BF         t=key_press();
00020a 940e 03e5 	CALL SUBOPT_0x7
                 ; 0001 00C0     }
00020c cff3      	RJMP _0x2003C
                 _0x2003E:
                 ; 0001 00C1 
                 ; 0001 00C2     if(time<0||time>99)
00020d 2400      	CLR  R0
00020e 14a0      	CP   R10,R0
00020f 04b0      	CPC  R11,R0
000210 f02c      	BRLT _0x20040
000211 e6e3      	LDI  R30,LOW(99)
000212 e0f0      	LDI  R31,HIGH(99)
000213 15ea      	CP   R30,R10
000214 05fb      	CPC  R31,R11
000215 f434      	BRGE _0x2003F
                 _0x20040:
                 ; 0001 00C3     {
                 ; 0001 00C4         lcd_clear();
000216 d0ea      	RCALL _lcd_clear
                 ; 0001 00C5         lcd_puts("EE");
                +
000217 eea6     +LDI R26 , LOW ( _0x20031 + ( 36 ) )
000218 e0b1     +LDI R27 , HIGH ( _0x20031 + ( 36 ) )
                 	__POINTW2MN _0x20031,36
000219 940e 03f6 	CALL SUBOPT_0x9
                 ; 0001 00C6         delay_ms(1000);
                 ; 0001 00C7     }
                 ; 0001 00C8 
                 ; 0001 00C9     else
00021b c003      	RJMP _0x20042
                 _0x2003F:
                 ; 0001 00CA     {
                 ; 0001 00CB         flag=0;
00021c e0e0      	LDI  R30,LOW(0)
00021d 93e0 022d 	STS  _flag,R30
                 ; 0001 00CC     }
                 _0x20042:
                 ; 0001 00CD 
                 ; 0001 00CE }
00021f cfd4      	RJMP _0x20039
                 _0x2003B:
                 ; 0001 00CF 
                 ; 0001 00D0 //****************************
                 ; 0001 00D1 
                 ; 0001 00D2 delay_ms(1000);
000220 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 00D3 flag=1;
000222 e0e1      	LDI  R30,LOW(1)
000223 93e0 022d 	STS  _flag,R30
                 ; 0001 00D4 
                 ; 0001 00D5 while(flag){
                 _0x20043:
000225 91e0 022d 	LDS  R30,_flag
000227 30e0      	CPI  R30,0
000228 f141      	BREQ _0x20045
                 ; 0001 00D6     lcd_clear();
000229 d0d7      	RCALL _lcd_clear
                 ; 0001 00D7     lcd_puts("Weigt:??(0-99F)\n");
                +
00022a eea9     +LDI R26 , LOW ( _0x20031 + ( 39 ) )
00022b e0b1     +LDI R27 , HIGH ( _0x20031 + ( 39 ) )
                 	__POINTW2MN _0x20031,39
00022c d102      	RCALL _lcd_puts
                 ; 0001 00D8     Weigt=0;
00022d 24cc      	CLR  R12
00022e 24dd      	CLR  R13
                 ; 0001 00D9     t=key_press();
00022f 940e 03e5 	CALL SUBOPT_0x7
                 ; 0001 00DA 
                 ; 0001 00DB     while(t!='F')
                 _0x20046:
000231 91a0 022f 	LDS  R26,_t
000233 34a6      	CPI  R26,LOW(0x46)
000234 f049      	BREQ _0x20048
                 ; 0001 00DC     {
                 ; 0001 00DD         Weigt=Weigt*10+((int)t-48);
000235 01f6      	MOVW R30,R12
000236 940e 03ea 	CALL SUBOPT_0x8
000238 016f      	MOVW R12,R30
                 ; 0001 00DE         delay_ms(1000);
000239 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 00DF         t=key_press();
00023b 940e 03e5 	CALL SUBOPT_0x7
                 ; 0001 00E0     }
00023d cff3      	RJMP _0x20046
                 _0x20048:
                 ; 0001 00E1 
                 ; 0001 00E2     if(Weigt<0||Weigt>99)
00023e 2400      	CLR  R0
00023f 14c0      	CP   R12,R0
000240 04d0      	CPC  R13,R0
000241 f02c      	BRLT _0x2004A
000242 e6e3      	LDI  R30,LOW(99)
000243 e0f0      	LDI  R31,HIGH(99)
000244 15ec      	CP   R30,R12
000245 05fd      	CPC  R31,R13
000246 f434      	BRGE _0x20049
                 _0x2004A:
                 ; 0001 00E3     {
                 ; 0001 00E4         lcd_clear();
000247 d0b9      	RCALL _lcd_clear
                 ; 0001 00E5         lcd_puts("EE");
                +
000248 efaa     +LDI R26 , LOW ( _0x20031 + ( 56 ) )
000249 e0b1     +LDI R27 , HIGH ( _0x20031 + ( 56 ) )
                 	__POINTW2MN _0x20031,56
00024a 940e 03f6 	CALL SUBOPT_0x9
                 ; 0001 00E6         delay_ms(1000);
                 ; 0001 00E7     }
                 ; 0001 00E8 
                 ; 0001 00E9     else
00024c c003      	RJMP _0x2004C
                 _0x20049:
                 ; 0001 00EA     {
                 ; 0001 00EB         flag=0;
00024d e0e0      	LDI  R30,LOW(0)
00024e 93e0 022d 	STS  _flag,R30
                 ; 0001 00EC     }
                 _0x2004C:
                 ; 0001 00ED 
                 ; 0001 00EE }
000250 cfd4      	RJMP _0x20043
                 _0x20045:
                 ; 0001 00EF 
                 ; 0001 00F0 //****************************
                 ; 0001 00F1 
                 ; 0001 00F2 delay_ms(1000);
000251 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 00F3 flag=1;
000253 e0e1      	LDI  R30,LOW(1)
000254 93e0 022d 	STS  _flag,R30
                 ; 0001 00F4 
                 ; 0001 00F5 while(flag){
                 _0x2004D:
000256 91e0 022d 	LDS  R30,_flag
000258 30e0      	CPI  R30,0
000259 f1b1      	BREQ _0x2004F
                 ; 0001 00F6     lcd_clear();
00025a d0a6      	RCALL _lcd_clear
                 ; 0001 00F7     lcd_puts("Temp:??(20-80C)\n");
                +
00025b efad     +LDI R26 , LOW ( _0x20031 + ( 59 ) )
00025c e0b1     +LDI R27 , HIGH ( _0x20031 + ( 59 ) )
                 	__POINTW2MN _0x20031,59
00025d d0d1      	RCALL _lcd_puts
                 ; 0001 00F8     Temp=0;
00025e e0e0      	LDI  R30,LOW(0)
00025f 93e0 0229 	STS  _Temp,R30
000261 93e0 022a 	STS  _Temp+1,R30
                 ; 0001 00F9     t=key_press();
000263 940e 03e5 	CALL SUBOPT_0x7
                 ; 0001 00FA 
                 ; 0001 00FB     while(t!='F')
                 _0x20050:
000265 91a0 022f 	LDS  R26,_t
000267 34a6      	CPI  R26,LOW(0x46)
000268 f079      	BREQ _0x20052
                 ; 0001 00FC     {
                 ; 0001 00FD         Temp=Temp*10+((int)t-48);
000269 91e0 0229 	LDS  R30,_Temp
00026b 91f0 022a 	LDS  R31,_Temp+1
00026d 940e 03ea 	CALL SUBOPT_0x8
00026f 93e0 0229 	STS  _Temp,R30
000271 93f0 022a 	STS  _Temp+1,R31
                 ; 0001 00FE         delay_ms(1000);
000273 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 00FF         t=key_press();
000275 940e 03e5 	CALL SUBOPT_0x7
                 ; 0001 0100     }
000277 cfed      	RJMP _0x20050
                 _0x20052:
                 ; 0001 0101 
                 ; 0001 0102     if(Temp<20||Temp>80)
000278 91a0 0229 	LDS  R26,_Temp
00027a 91b0 022a 	LDS  R27,_Temp+1
00027c 9754      	SBIW R26,20
00027d f044      	BRLT _0x20054
00027e 91a0 0229 	LDS  R26,_Temp
000280 91b0 022a 	LDS  R27,_Temp+1
000282 35a1      	CPI  R26,LOW(0x51)
000283 e0e0      	LDI  R30,HIGH(0x51)
000284 07be      	CPC  R27,R30
000285 f034      	BRLT _0x20053
                 _0x20054:
                 ; 0001 0103     {
                 ; 0001 0104         lcd_clear();
000286 d07a      	RCALL _lcd_clear
                 ; 0001 0105         lcd_puts("EE");
                +
000287 e0ae     +LDI R26 , LOW ( _0x20031 + ( 76 ) )
000288 e0b2     +LDI R27 , HIGH ( _0x20031 + ( 76 ) )
                 	__POINTW2MN _0x20031,76
000289 940e 03f6 	CALL SUBOPT_0x9
                 ; 0001 0106         delay_ms(1000);
                 ; 0001 0107     }
                 ; 0001 0108 
                 ; 0001 0109     else
00028b c003      	RJMP _0x20056
                 _0x20053:
                 ; 0001 010A     {
                 ; 0001 010B         flag=0;
00028c e0e0      	LDI  R30,LOW(0)
00028d 93e0 022d 	STS  _flag,R30
                 ; 0001 010C     }
                 _0x20056:
                 ; 0001 010D 
                 ; 0001 010E }
00028f cfc6      	RJMP _0x2004D
                 _0x2004F:
                 ; 0001 010F 
                 ; 0001 0110 delay_ms(1000);
000290 940e 03d2 	CALL SUBOPT_0x5
                 ; 0001 0111 lcd_clear();
000292 d06e      	RCALL _lcd_clear
                 ; 0001 0112 lcd_puts("THE END");
                +
000293 e1a1     +LDI R26 , LOW ( _0x20031 + ( 79 ) )
000294 e0b2     +LDI R27 , HIGH ( _0x20031 + ( 79 ) )
                 	__POINTW2MN _0x20031,79
000295 d099      	RCALL _lcd_puts
                 ; 0001 0113 
                 ; 0001 0114 }
000296 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20031:
0001c2           	.BYTE 0x57
                 ;
                 ;
                 ; void port_init()
                 ; 0001 0118  {
                 
                 	.CSEG
                 _port_init:
                 ; .FSTART _port_init
                 ; 0001 0119   // Declare your local variables here
                 ; 0001 011A 
                 ; 0001 011B // Input/Output Ports initialization
                 ; 0001 011C // Port A initialization
                 ; 0001 011D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0001 011E DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
000297 efef      	LDI  R30,LOW(255)
000298 bbea      	OUT  0x1A,R30
                 ; 0001 011F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 0120 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000299 e0e0      	LDI  R30,LOW(0)
00029a bbeb      	OUT  0x1B,R30
                 ; 0001 0121 
                 ; 0001 0122 // Port B initialization
                 ; 0001 0123 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0124 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00029b efe0      	LDI  R30,LOW(240)
00029c bbe7      	OUT  0x17,R30
                 ; 0001 0125 
                 ; 0001 0126 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0127 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00029d bbe8      	OUT  0x18,R30
                 ; 0001 0128 
                 ; 0001 0129 // Port C initialization
                 ; 0001 012A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 012B DDRC=(1<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
00029e e8e1      	LDI  R30,LOW(129)
00029f bbe4      	OUT  0x14,R30
                 ; 0001 012C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 012D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0002a0 e0e0      	LDI  R30,LOW(0)
0002a1 bbe5      	OUT  0x15,R30
                 ; 0001 012E 
                 ; 0001 012F // Port D initialization
                 ; 0001 0130 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0131 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0002a2 bbe1      	OUT  0x11,R30
                 ; 0001 0132 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 0133 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0002a3 bbe2      	OUT  0x12,R30
                 ; 0001 0134 
                 ; 0001 0135 
                 ; 0001 0136  }
0002a4 9508      	RET
                 ; .FEND
                 ;
                 ;void intrupt_init()
                 ; 0001 0139 {
                 _intrupt_init:
                 ; .FSTART _intrupt_init
                 ; 0001 013A 
                 ; 0001 013B // Timer/Counter 0 initialization
                 ; 0001 013C // Clock source: System Clock
                 ; 0001 013D // Clock value: Timer 0 Stopped
                 ; 0001 013E // Mode: Normal top=0xFF
                 ; 0001 013F // OC0 output: Disconnected
                 ; 0001 0140 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0002a5 e0e0      	LDI  R30,LOW(0)
0002a6 bfe3      	OUT  0x33,R30
                 ; 0001 0141 TCNT0=0x00;
0002a7 bfe2      	OUT  0x32,R30
                 ; 0001 0142 OCR0=0x00;
0002a8 bfec      	OUT  0x3C,R30
                 ; 0001 0143 
                 ; 0001 0144 // Timer/Counter 1 initialization
                 ; 0001 0145 // Clock source: System Clock
                 ; 0001 0146 // Clock value: Timer1 Stopped
                 ; 0001 0147 // Mode: Normal top=0xFFFF
                 ; 0001 0148 // OC1A output: Disconnected
                 ; 0001 0149 // OC1B output: Disconnected
                 ; 0001 014A // Noise Canceler: Off
                 ; 0001 014B // Input Capture on Falling Edge
                 ; 0001 014C // Timer1 Overflow Interrupt: Off
                 ; 0001 014D // Input Capture Interrupt: Off
                 ; 0001 014E // Compare A Match Interrupt: Off
                 ; 0001 014F // Compare B Match Interrupt: Off
                 ; 0001 0150 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0002a9 bdef      	OUT  0x2F,R30
                 ; 0001 0151 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0002aa bdee      	OUT  0x2E,R30
                 ; 0001 0152 TCNT1H=0x00;
0002ab bded      	OUT  0x2D,R30
                 ; 0001 0153 TCNT1L=0x00;
0002ac bdec      	OUT  0x2C,R30
                 ; 0001 0154 ICR1H=0x00;
0002ad bde7      	OUT  0x27,R30
                 ; 0001 0155 ICR1L=0x00;
0002ae bde6      	OUT  0x26,R30
                 ; 0001 0156 OCR1AH=0x00;
0002af bdeb      	OUT  0x2B,R30
                 ; 0001 0157 OCR1AL=0x00;
0002b0 bdea      	OUT  0x2A,R30
                 ; 0001 0158 OCR1BH=0x00;
0002b1 bde9      	OUT  0x29,R30
                 ; 0001 0159 OCR1BL=0x00;
0002b2 bde8      	OUT  0x28,R30
                 ; 0001 015A 
                 ; 0001 015B // Timer/Counter 2 initialization
                 ; 0001 015C // Clock source: System Clock
                 ; 0001 015D // Clock value: Timer2 Stopped
                 ; 0001 015E // Mode: Normal top=0xFF
                 ; 0001 015F // OC2 output: Disconnected
                 ; 0001 0160 ASSR=0<<AS2;
0002b3 bde2      	OUT  0x22,R30
                 ; 0001 0161 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0002b4 bde5      	OUT  0x25,R30
                 ; 0001 0162 TCNT2=0x00;
0002b5 bde4      	OUT  0x24,R30
                 ; 0001 0163 OCR2=0x00;
0002b6 bde3      	OUT  0x23,R30
                 ; 0001 0164 
                 ; 0001 0165 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 0166 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0002b7 bfe9      	OUT  0x39,R30
                 ; 0001 0167 
                 ; 0001 0168 // External Interrupt(s) initialization
                 ; 0001 0169 // INT0: Off
                 ; 0001 016A // INT1: On
                 ; 0001 016B // INT1 Mode: Rising Edge
                 ; 0001 016C // INT2: Off
                 ; 0001 016D GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
0002b8 b7eb      	IN   R30,0x3B
0002b9 68e0      	ORI  R30,0x80
0002ba bfeb      	OUT  0x3B,R30
                 ; 0001 016E MCUCR=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
0002bb e0ec      	LDI  R30,LOW(12)
0002bc bfe5      	OUT  0x35,R30
                 ; 0001 016F MCUCSR=(0<<ISC2);
0002bd e0e0      	LDI  R30,LOW(0)
0002be bfe4      	OUT  0x34,R30
                 ; 0001 0170 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
0002bf e8e0      	LDI  R30,LOW(128)
0002c0 bfea      	OUT  0x3A,R30
                 ; 0001 0171 
                 ; 0001 0172 // USART initialization
                 ; 0001 0173 // USART disabled
                 ; 0001 0174 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 b9ea      	OUT  0xA,R30
                 ; 0001 0175 
                 ; 0001 0176 // Analog Comparator initialization
                 ; 0001 0177 // Analog Comparator: Off
                 ; 0001 0178 // The Analog Comparator's positive input is
                 ; 0001 0179 // connected to the AIN0 pin
                 ; 0001 017A // The Analog Comparator's negative input is
                 ; 0001 017B // connected to the AIN1 pin
                 ; 0001 017C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0002c3 e8e0      	LDI  R30,LOW(128)
0002c4 b9e8      	OUT  0x8,R30
                 ; 0001 017D SFIOR=(0<<ACME);
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 bfe0      	OUT  0x30,R30
                 ; 0001 017E 
                 ; 0001 017F // ADC initialization
                 ; 0001 0180 // ADC disabled
                 ; 0001 0181 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0002c7 b9e6      	OUT  0x6,R30
                 ; 0001 0182 
                 ; 0001 0183 // SPI initialization
                 ; 0001 0184 // SPI disabled
                 ; 0001 0185 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0002c8 b9ed      	OUT  0xD,R30
                 ; 0001 0186 
                 ; 0001 0187 // TWI initialization
                 ; 0001 0188 // TWI disabled
                 ; 0001 0189 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0002c9 bfe6      	OUT  0x36,R30
                 ; 0001 018A 
                 ; 0001 018B 
                 ; 0001 018C 
                 ; 0001 018D }
0002ca 9508      	RET
                 ; .FEND
                 ;
                 ;void all_init()
                 ; 0001 0190 {
                 _all_init:
                 ; .FSTART _all_init
                 ; 0001 0191  port_init();
0002cb dfcb      	RCALL _port_init
                 ; 0001 0192  intrupt_init();
0002cc dfd8      	RCALL _intrupt_init
                 ; 0001 0193  lcd_init(16);
0002cd e1a0      	LDI  R26,LOW(16)
0002ce d071      	RCALL _lcd_init
                 ; 0001 0194 }
0002cf 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002d0 93aa      	ST   -Y,R26
0002d1 b3eb      	IN   R30,0x1B
0002d2 70ef      	ANDI R30,LOW(0xF)
0002d3 2fae      	MOV  R26,R30
0002d4 81e8      	LD   R30,Y
0002d5 7fe0      	ANDI R30,LOW(0xF0)
0002d6 2bea      	OR   R30,R26
0002d7 bbeb      	OUT  0x1B,R30
                +
0002d8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002d9 958a     +DEC R24
0002da f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002db 9ada      	SBI  0x1B,2
                +
0002dc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002dd 958a     +DEC R24
0002de f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002df 98da      	CBI  0x1B,2
                +
0002e0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002e1 958a     +DEC R24
0002e2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002e3 c089      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002e4 93aa      	ST   -Y,R26
0002e5 81a8      	LD   R26,Y
0002e6 dfe9      	RCALL __lcd_write_nibble_G100
0002e7 81e8          ld    r30,y
0002e8 95e2          swap  r30
0002e9 83e8          st    y,r30
0002ea 81a8      	LD   R26,Y
0002eb dfe4      	RCALL __lcd_write_nibble_G100
                +
0002ec e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002ed 958a     +DEC R24
0002ee f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002ef c07d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002f0 93aa      	ST   -Y,R26
0002f1 81e8      	LD   R30,Y
0002f2 e0f0      	LDI  R31,0
0002f3 5de0      	SUBI R30,LOW(-__base_y_G100)
0002f4 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0002f5 81e0      	LD   R30,Z
0002f6 81a9      	LDD  R26,Y+1
0002f7 0fae      	ADD  R26,R30
0002f8 dfeb      	RCALL __lcd_write_data
0002f9 81e9      	LDD  R30,Y+1
0002fa 93e0 0234 	STS  __lcd_x,R30
0002fc 81e8      	LD   R30,Y
0002fd 93e0 0235 	STS  __lcd_y,R30
0002ff 9622      	ADIW R28,2
000300 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000301 e0a2      	LDI  R26,LOW(2)
000302 940e 03f9 	CALL SUBOPT_0xA
000304 e0ac      	LDI  R26,LOW(12)
000305 dfde      	RCALL __lcd_write_data
000306 e0a1      	LDI  R26,LOW(1)
000307 940e 03f9 	CALL SUBOPT_0xA
000309 e0e0      	LDI  R30,LOW(0)
00030a 93e0 0235 	STS  __lcd_y,R30
00030c 93e0 0234 	STS  __lcd_x,R30
00030e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00030f 93aa      	ST   -Y,R26
000310 81a8      	LD   R26,Y
000311 30aa      	CPI  R26,LOW(0xA)
000312 f031      	BREQ _0x2000005
000313 91e0 0236 	LDS  R30,__lcd_maxx
000315 91a0 0234 	LDS  R26,__lcd_x
000317 17ae      	CP   R26,R30
000318 f060      	BRLO _0x2000004
                 _0x2000005:
000319 e0e0      	LDI  R30,LOW(0)
00031a 93ea      	ST   -Y,R30
00031b 91a0 0235 	LDS  R26,__lcd_y
00031d 5faf      	SUBI R26,-LOW(1)
00031e 93a0 0235 	STS  __lcd_y,R26
000320 dfcf      	RCALL _lcd_gotoxy
000321 81a8      	LD   R26,Y
000322 30aa      	CPI  R26,LOW(0xA)
000323 f409      	BRNE _0x2000007
000324 c048      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
000325 91e0 0234 	LDS  R30,__lcd_x
000327 5fef      	SUBI R30,-LOW(1)
000328 93e0 0234 	STS  __lcd_x,R30
00032a 9ad8      	SBI  0x1B,0
00032b 81a8      	LD   R26,Y
00032c dfb7      	RCALL __lcd_write_data
00032d 98d8      	CBI  0x1B,0
00032e c03e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00032f 93ba      	ST   -Y,R27
000330 93aa      	ST   -Y,R26
000331 931a      	ST   -Y,R17
                 _0x2000008:
000332 81a9      	LDD  R26,Y+1
000333 81ba      	LDD  R27,Y+1+1
000334 91ed      	LD   R30,X+
000335 83a9      	STD  Y+1,R26
000336 83ba      	STD  Y+1+1,R27
000337 2f1e      	MOV  R17,R30
000338 30e0      	CPI  R30,0
000339 f019      	BREQ _0x200000A
00033a 2fa1      	MOV  R26,R17
00033b dfd3      	RCALL _lcd_putchar
00033c cff5      	RJMP _0x2000008
                 _0x200000A:
00033d 8118      	LDD  R17,Y+0
00033e 9623      	ADIW R28,3
00033f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000340 93aa      	ST   -Y,R26
000341 b3ea      	IN   R30,0x1A
000342 6fe0      	ORI  R30,LOW(0xF0)
000343 bbea      	OUT  0x1A,R30
000344 9ad2      	SBI  0x1A,2
000345 9ad0      	SBI  0x1A,0
000346 9ad1      	SBI  0x1A,1
000347 98da      	CBI  0x1B,2
000348 98d8      	CBI  0x1B,0
000349 98d9      	CBI  0x1B,1
00034a 81e8      	LD   R30,Y
00034b 93e0 0236 	STS  __lcd_maxx,R30
00034d 58e0      	SUBI R30,-LOW(128)
                +
00034e 93e0 0232+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000350 81e8      	LD   R30,Y
000351 54e0      	SUBI R30,-LOW(192)
                +
000352 93e0 0233+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000354 e1a4      	LDI  R26,LOW(20)
000355 e0b0      	LDI  R27,0
000356 940e 0407 	CALL _delay_ms
000358 940e 03ff 	CALL SUBOPT_0xB
00035a 940e 03ff 	CALL SUBOPT_0xB
00035c 940e 03ff 	CALL SUBOPT_0xB
00035e e2a0      	LDI  R26,LOW(32)
00035f df70      	RCALL __lcd_write_nibble_G100
                +
000360 ec88     +LDI R24 , LOW ( 200 )
000361 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000362 9701     +SBIW R24 , 1
000363 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000364 e2a8      	LDI  R26,LOW(40)
000365 df7e      	RCALL __lcd_write_data
000366 e0a4      	LDI  R26,LOW(4)
000367 df7c      	RCALL __lcd_write_data
000368 e8a5      	LDI  R26,LOW(133)
000369 df7a      	RCALL __lcd_write_data
00036a e0a6      	LDI  R26,LOW(6)
00036b df78      	RCALL __lcd_write_data
00036c df94      	RCALL _lcd_clear
                 _0x20A0001:
00036d 9621      	ADIW R28,1
00036e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00036f 93ba      	ST   -Y,R27
000370 93aa      	ST   -Y,R26
000371 91a9          ld   r26,y+
000372 91b9          ld   r27,y+
000373 27ee          clr  r30
000374 27ff          clr  r31
                 strlen0:
000375 916d          ld   r22,x+
000376 2366          tst  r22
000377 f011          breq strlen1
000378 9631          adiw r30,1
000379 cffb          rjmp strlen0
                 strlen1:
00037a 9508          ret
                 ; .FEND
                 _strncpy:
                 ; .FSTART _strncpy
00037b 93aa      	ST   -Y,R26
00037c 9179          ld   r23,y+
00037d 91e9          ld   r30,y+
00037e 91f9          ld   r31,y+
00037f 91a9          ld   r26,y+
000380 91b9          ld   r27,y+
000381 01cd          movw r24,r26
                 strncpy0:
000382 2377          tst  r23
000383 f051          breq strncpy1
000384 957a          dec  r23
000385 9161          ld   r22,z+
000386 936d          st   x+,r22
000387 2366          tst  r22
000388 f7c9          brne strncpy0
                 strncpy2:
000389 2377          tst  r23
00038a f019          breq strncpy1
00038b 957a          dec  r23
00038c 936d          st   x+,r22
00038d cffb          rjmp strncpy2
                 strncpy1:
00038e 01fc          movw r30,r24
00038f 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _data_key:
000219           	.BYTE 0x10
                 _Temp:
000229           	.BYTE 0x2
                 _i:
00022b           	.BYTE 0x1
                 _j:
00022c           	.BYTE 0x1
                 _flag:
00022d           	.BYTE 0x1
                 _intrupt_flag:
00022e           	.BYTE 0x1
                 _t:
00022f           	.BYTE 0x1
                 __base_y_G100:
000230           	.BYTE 0x4
                 __lcd_x:
000234           	.BYTE 0x1
                 __lcd_y:
000235           	.BYTE 0x1
                 __lcd_maxx:
000236           	.BYTE 0x1
                 __seed_G102:
000237           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x0:
000390 e0e0      	LDI  R30,LOW(0)
000391 bbe8      	OUT  0x18,R30
000392 91e0 022b 	LDS  R30,_i
000394 e0a1      	LDI  R26,LOW(1)
000395 940e 0415 	CALL __LSLB12
000397 bbe8      	OUT  0x18,R30
000398 e0e0      	LDI  R30,LOW(0)
000399 93e0 022c 	STS  _j,R30
00039b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x1:
00039c b216      	IN   R1,22
00039d 91e0 022c 	LDS  R30,_j
00039f e0a1      	LDI  R26,LOW(1)
0003a0 e0b0      	LDI  R27,HIGH(1)
0003a1 940e 041d 	CALL __LSLW12
0003a3 2da1      	MOV  R26,R1
0003a4 e0b0      	LDI  R27,0
0003a5 23ea      	AND  R30,R26
0003a6 23fb      	AND  R31,R27
0003a7 01bf      	MOVW R22,R30
0003a8 91e0 022c 	LDS  R30,_j
0003aa e0a1      	LDI  R26,LOW(1)
0003ab e0b0      	LDI  R27,HIGH(1)
0003ac 940e 041d 	CALL __LSLW12
0003ae 17e6      	CP   R30,R22
0003af 07f7      	CPC  R31,R23
0003b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
0003b1 91e0 022b 	LDS  R30,_i
0003b3 e0f0      	LDI  R31,0
0003b4 9734      	SBIW R30,4
0003b5 940e 0426 	CALL __LSLW2
0003b7 01df      	MOVW R26,R30
0003b8 91e0 022c 	LDS  R30,_j
0003ba e0f0      	LDI  R31,0
0003bb 0fea      	ADD  R30,R26
0003bc 1ffb      	ADC  R31,R27
0003bd 5ee7      	SUBI R30,LOW(-_data_key)
0003be 4ffd      	SBCI R31,HIGH(-_data_key)
0003bf 81a0      	LD   R26,Z
0003c0 940e 030f 	CALL _lcd_putchar
0003c2 e0e0      	LDI  R30,LOW(0)
0003c3 93e0 022d 	STS  _flag,R30
0003c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0003c6 91e0 022c 	LDS  R30,_j
0003c8 5fef      	SUBI R30,-LOW(1)
0003c9 93e0 022c 	STS  _j,R30
0003cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0003cc 91e0 022b 	LDS  R30,_i
0003ce 5fef      	SUBI R30,-LOW(1)
0003cf 93e0 022b 	STS  _i,R30
0003d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x5:
0003d2 eea8      	LDI  R26,LOW(1000)
0003d3 e0b3      	LDI  R27,HIGH(1000)
0003d4 940c 0407 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0003d6 91e0 022b 	LDS  R30,_i
0003d8 e0f0      	LDI  R31,0
0003d9 9734      	SBIW R30,4
0003da 940e 0426 	CALL __LSLW2
0003dc 01df      	MOVW R26,R30
0003dd 91e0 022c 	LDS  R30,_j
0003df e0f0      	LDI  R31,0
0003e0 0fea      	ADD  R30,R26
0003e1 1ffb      	ADC  R31,R27
0003e2 5ee7      	SUBI R30,LOW(-_data_key)
0003e3 4ffd      	SBCI R31,HIGH(-_data_key)
0003e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x7:
0003e5 940e 0196 	CALL _key_press
0003e7 93e0 022f 	STS  _t,R30
0003e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x8:
0003ea e0aa      	LDI  R26,LOW(10)
0003eb e0b0      	LDI  R27,HIGH(10)
0003ec 940e 0433 	CALL __MULW12
0003ee 01df      	MOVW R26,R30
0003ef 91e0 022f 	LDS  R30,_t
0003f1 e0f0      	LDI  R31,0
0003f2 97f0      	SBIW R30,48
0003f3 0fea      	ADD  R30,R26
0003f4 1ffb      	ADC  R31,R27
0003f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0003f6 940e 032f 	CALL _lcd_puts
0003f8 cfd9      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003f9 940e 02e4 	CALL __lcd_write_data
0003fb e0a3      	LDI  R26,LOW(3)
0003fc e0b0      	LDI  R27,0
0003fd 940c 0407 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
0003ff e3a0      	LDI  R26,LOW(48)
000400 940e 02d0 	CALL __lcd_write_nibble_G100
                +
000402 ec88     +LDI R24 , LOW ( 200 )
000403 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000404 9701     +SBIW R24 , 1
000405 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000406 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000407 9610      	adiw r26,0
000408 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000409 ed80     +LDI R24 , LOW ( 0x7D0 )
00040a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00040b 9701     +SBIW R24 , 1
00040c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00040d 95a8      	wdr
00040e 9711      	sbiw r26,1
00040f f7c9      	brne __delay_ms0
                 __delay_ms1:
000410 9508      	ret
                 
                 __ANEGW1:
000411 95f1      	NEG  R31
000412 95e1      	NEG  R30
000413 40f0      	SBCI R31,0
000414 9508      	RET
                 
                 __LSLB12:
000415 23ee      	TST  R30
000416 2e0e      	MOV  R0,R30
000417 2fea      	MOV  R30,R26
000418 f019      	BREQ __LSLB12R
                 __LSLB12L:
000419 0fee      	LSL  R30
00041a 940a      	DEC  R0
00041b f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00041c 9508      	RET
                 
                 __LSLW12:
00041d 23ee      	TST  R30
00041e 2e0e      	MOV  R0,R30
00041f 01fd      	MOVW R30,R26
000420 f021      	BREQ __LSLW12R
                 __LSLW12L:
000421 0fee      	LSL  R30
000422 1fff      	ROL  R31
000423 940a      	DEC  R0
000424 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
000425 9508      	RET
                 
                 __LSLW2:
000426 0fee      	LSL  R30
000427 1fff      	ROL  R31
000428 0fee      	LSL  R30
000429 1fff      	ROL  R31
00042a 9508      	RET
                 
                 __MULW12U:
00042b 9ffa      	MUL  R31,R26
00042c 2df0      	MOV  R31,R0
00042d 9feb      	MUL  R30,R27
00042e 0df0      	ADD  R31,R0
00042f 9fea      	MUL  R30,R26
000430 2de0      	MOV  R30,R0
000431 0df1      	ADD  R31,R1
000432 9508      	RET
                 
                 __MULW12:
000433 d004      	RCALL __CHKSIGNW
000434 dff6      	RCALL __MULW12U
000435 f40e      	BRTC __MULW121
000436 dfda      	RCALL __ANEGW1
                 __MULW121:
000437 9508      	RET
                 
                 __CHKSIGNW:
000438 94e8      	CLT
000439 fff7      	SBRS R31,7
00043a c002      	RJMP __CHKSW1
00043b dfd5      	RCALL __ANEGW1
00043c 9468      	SET
                 __CHKSW1:
00043d ffb7      	SBRS R27,7
00043e c006      	RJMP __CHKSW2
00043f 95a0      	COM  R26
000440 95b0      	COM  R27
000441 9611      	ADIW R26,1
000442 f800      	BLD  R0,0
000443 9403      	INC  R0
000444 fa00      	BST  R0,0
                 __CHKSW2:
000445 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  25 r1 :   6 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   2 r7 :   1 
r8 :   5 r9 :   3 r10:   5 r11:   3 r12:   5 r13:   3 r14:   0 r15:   2 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   8 
r24:  25 r25:   7 r26: 111 r27:  41 r28:   4 r29:   1 r30: 243 r31:  43 
x  :   7 y  :  66 z  :  12 
Registers used: 27 out of 35 (77.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   7 
adiw  :   6 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  22 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   5 brmi  :   0 brne  :  19 brpl  :   0 brsh  :   6 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  65 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   9 cpc   :   9 cpi   :  24 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   1 jmp   :  24 ld    :  37 ldd   :   5 ldi   : 121 
lds   :  42 lpm   :   7 lsl   :   4 lsr   :   0 mov   :   9 movw  :  18 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  48 pop   :   0 push  :   0 rcall :  44 ret   :  30 
reti  :   1 rjmp  :  38 rol   :   3 ror   :   0 sbc   :   0 sbci  :   4 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  11 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  34 std   :   2 sts   :  34 sub   :   0 subi  :   9 swap  :   1 
tst   :   6 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00088c   1880    308   2188   16384  13.4%
[.dseg] 0x000060 0x00023b      0    219    219    1024  21.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
