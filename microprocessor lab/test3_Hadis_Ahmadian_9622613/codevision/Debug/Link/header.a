;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <string.h>
;#include <delay.h>
;#include <stdlib.h>
;
;
;char* string=" Welcome to the online lab classes due to Corona disease.";

	.DSEG
_0x20003:
	.BYTE 0x3A
;char* sub="0000000000000000";
_0x20004:
	.BYTE 0x11
;char data_key[]={'0','1','2','3',
;                 '4','5','6','7',
;                 '8','9','A','B',
;                 'C','D','E','F'};
;
;int speed,time,Weigt,Temp;
;char i,j,flag,intrupt_flag=0;
;char t;
;
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0001 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0016 
; 0001 0017     if(intrupt_flag){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0018     flag=1;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 0019     while(flag)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 001A     {
; 0001 001B         for(i=4;i<8;i++)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 001C         {
; 0001 001D             PORTB=0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 001E             PORTB=1<<i;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 001F             for(j=0;j<4;j++)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0020             {
; 0001 0021                  if((PINB&(1<<j))==(1<<j))
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0022                  {
; 0001 0023                     lcd_putchar(  data_key[(4*(i-4))+j]  );
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0024                     flag=0;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0025 
; 0001 0026                     break;
;PCODE: $0000004D VOL: 0
; 0001 0027                  }
; 0001 0028 
; 0001 0029              }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 002A 
; 0001 002B          if(flag==0)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 002C          break;
;PCODE: $00000058 VOL: 0
; 0001 002D 
; 0001 002E          }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 002F 
; 0001 0030     }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0031     intrupt_flag=0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0032     delay_ms(1000);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0033        }
; 0001 0034 }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;void one()
; 0001 0037 {
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0038  lcd_puts("Hadis Ahmadian\n9622613" );
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 0039  delay_ms(1000);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 003A  lcd_clear();
;PCODE: $00000071 VOL: 0
; 0001 003B }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0

	.DSEG
_0x20012:
	.BYTE 0x17
;
;
;void two()
; 0001 003F {

	.CSEG
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 0040  for(i=0;i<=strlen(string);i++)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 0041     {
; 0001 0042        delay_ms(100);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 0043        lcd_clear();
;PCODE: $00000086 VOL: 0
; 0001 0044        strncpy(sub,string+i,16);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0045        lcd_puts(sub);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0046     }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0047 
; 0001 0048  lcd_clear();
;PCODE: $00000096 VOL: 0
; 0001 0049 }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;
;
;void three(void)
; 0001 004E {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 004F     flag=1;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0050     while(flag)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 0051     {
; 0001 0052         for(i=4;i<8;i++)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0053         {
; 0001 0054             PORTB=0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 0055             PORTB=1<<i;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 0056             for(j=0;j<4;j++)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 0057             {
; 0001 0058                  if((PINB&(1<<j))==(1<<j))
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 0059                  {
; 0001 005A                     lcd_putchar(  data_key[(4*(i-4))+j]  );
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0001 005B                     flag=0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 005C                     break;
;PCODE: $000000D6 VOL: 0
; 0001 005D                  }
; 0001 005E 
; 0001 005F              }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 0060 
; 0001 0061          if(flag==0)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0062          break;
;PCODE: $000000E1 VOL: 0
; 0001 0063 
; 0001 0064          }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0001 0065 
; 0001 0066     }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0001 0067 
; 0001 0068     delay_ms(1000);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 0069     lcd_clear();
;PCODE: $000000ED VOL: 0
; 0001 006A 
; 0001 006B }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;
;
;char key_press()
; 0001 006F {
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0001 0070      while(1)
;PCODE: $000000F2 VOL: 0
; 0001 0071     {
; 0001 0072         for(i=4;i<8;i++)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0001 0073         {
; 0001 0074             PORTB=0;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 0075             PORTB=1<<i;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0001 0076             for(j=0;j<4;j++)
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0001 0077             {
; 0001 0078                 if((PINB&(1<<j))==(1<<j))
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0001 0079                 {
; 0001 007A                     lcd_putchar(  data_key[(4*(i-4))+j]  );
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0001 007B                     return(  data_key[(4*(i-4))+j]  );
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 007C                 }
; 0001 007D 
; 0001 007E             }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0001 007F 
; 0001 0080         }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0001 0081 
; 0001 0082     }
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0001 0083 
; 0001 0084 }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;
;
;void four()
; 0001 0088 {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0001 0089  intrupt_flag=1;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0001 008A  PORTB=0xff;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0001 008B  while(intrupt_flag);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0001 008C }
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;
;
;void five(void)
; 0001 0090 {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0001 0091 lcd_clear();
;PCODE: $00000152 VOL: 0
; 0001 0092 
; 0001 0093 flag=1;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0001 0094 
; 0001 0095 while(flag){
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 0096 
; 0001 0097     lcd_clear();
;PCODE: $00000159 VOL: 0
; 0001 0098     lcd_puts("Speed:??(0-50r)\n");
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0001 0099     speed=0;
;PCODE: $0000015D VOL: 0
; 0001 009A     t=key_press();
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0001 009B 
; 0001 009C     while(t!='F')
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0001 009D     {
; 0001 009E         speed=speed*10+(t - '0');
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0001 009F         delay_ms(1000);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0001 00A0         t=key_press();
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0001 00A1     }
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0001 00A2 
; 0001 00A3     if(speed<0||speed>50)
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0001 00A4     {
; 0001 00A5         lcd_clear();
;PCODE: $0000017A VOL: 0
; 0001 00A6         lcd_puts("EE");
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 00A7         delay_ms(1000);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0001 00A8     }
; 0001 00A9 
; 0001 00AA     else
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0001 00AB     {
; 0001 00AC         flag=0;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0001 00AD     }
;PCODE: $00000184 VOL: 0
; 0001 00AE 
; 0001 00AF }
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0001 00B0 
; 0001 00B1 //****************************
; 0001 00B2 
; 0001 00B3 delay_ms(1000);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0001 00B4 flag=1;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0001 00B5 while(flag){
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0001 00B6     lcd_clear();
;PCODE: $0000018F VOL: 0
; 0001 00B7     lcd_puts("Time:??(0-99s)\n");
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0001 00B8     time=0;
;PCODE: $00000193 VOL: 0
; 0001 00B9     t=key_press();
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0001 00BA 
; 0001 00BB     while(t!='F')
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0001 00BC     {
; 0001 00BD         time=time*10+((int)t-48);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0001 00BE         delay_ms(1000);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0001 00BF         t=key_press();
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0001 00C0     }
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0001 00C1 
; 0001 00C2     if(time<0||time>99)
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0001 00C3     {
; 0001 00C4         lcd_clear();
;PCODE: $000001B0 VOL: 0
; 0001 00C5         lcd_puts("EE");
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0001 00C6         delay_ms(1000);
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0001 00C7     }
; 0001 00C8 
; 0001 00C9     else
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0001 00CA     {
; 0001 00CB         flag=0;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0001 00CC     }
;PCODE: $000001BA VOL: 0
; 0001 00CD 
; 0001 00CE }
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0001 00CF 
; 0001 00D0 //****************************
; 0001 00D1 
; 0001 00D2 delay_ms(1000);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0001 00D3 flag=1;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0001 00D4 
; 0001 00D5 while(flag){
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 00D6     lcd_clear();
;PCODE: $000001C5 VOL: 0
; 0001 00D7     lcd_puts("Weigt:??(0-99F)\n");
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0001 00D8     Weigt=0;
;PCODE: $000001C9 VOL: 0
; 0001 00D9     t=key_press();
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0001 00DA 
; 0001 00DB     while(t!='F')
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0001 00DC     {
; 0001 00DD         Weigt=Weigt*10+((int)t-48);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0001 00DE         delay_ms(1000);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0001 00DF         t=key_press();
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0001 00E0     }
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0001 00E1 
; 0001 00E2     if(Weigt<0||Weigt>99)
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0001 00E3     {
; 0001 00E4         lcd_clear();
;PCODE: $000001E6 VOL: 0
; 0001 00E5         lcd_puts("EE");
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 00E6         delay_ms(1000);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0001 00E7     }
; 0001 00E8 
; 0001 00E9     else
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0001 00EA     {
; 0001 00EB         flag=0;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0001 00EC     }
;PCODE: $000001F0 VOL: 0
; 0001 00ED 
; 0001 00EE }
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0001 00EF 
; 0001 00F0 //****************************
; 0001 00F1 
; 0001 00F2 delay_ms(1000);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0001 00F3 flag=1;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0001 00F4 
; 0001 00F5 while(flag){
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0001 00F6     lcd_clear();
;PCODE: $000001FB VOL: 0
; 0001 00F7     lcd_puts("Temp:??(20-80C)\n");
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0001 00F8     Temp=0;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0001 00F9     t=key_press();
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0001 00FA 
; 0001 00FB     while(t!='F')
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0001 00FC     {
; 0001 00FD         Temp=Temp*10+((int)t-48);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0001 00FE         delay_ms(1000);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0001 00FF         t=key_press();
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0001 0100     }
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0001 0101 
; 0001 0102     if(Temp<20||Temp>80)
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0001 0103     {
; 0001 0104         lcd_clear();
;PCODE: $0000021E VOL: 0
; 0001 0105         lcd_puts("EE");
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0001 0106         delay_ms(1000);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0001 0107     }
; 0001 0108 
; 0001 0109     else
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0001 010A     {
; 0001 010B         flag=0;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0001 010C     }
;PCODE: $00000228 VOL: 0
; 0001 010D 
; 0001 010E }
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0001 010F 
; 0001 0110 delay_ms(1000);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0001 0111 lcd_clear();
;PCODE: $0000022D VOL: 0
; 0001 0112 lcd_puts("THE END");
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0001 0113 
; 0001 0114 }
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0

	.DSEG
_0x20031:
	.BYTE 0x57
;
;
; void port_init()
; 0001 0118  {

	.CSEG
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0001 0119   // Declare your local variables here
; 0001 011A 
; 0001 011B // Input/Output Ports initialization
; 0001 011C // Port A initialization
; 0001 011D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0001 011E DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0001 011F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0001 0120 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0001 0121 
; 0001 0122 // Port B initialization
; 0001 0123 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0124 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0001 0125 
; 0001 0126 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0127 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0001 0128 
; 0001 0129 // Port C initialization
; 0001 012A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 012B DDRC=(1<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0001 012C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 012D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0001 012E 
; 0001 012F // Port D initialization
; 0001 0130 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 0131 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0001 0132 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 0133 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0001 0134 
; 0001 0135 
; 0001 0136  }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;
;void intrupt_init()
; 0001 0139 {
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0001 013A 
; 0001 013B // Timer/Counter 0 initialization
; 0001 013C // Clock source: System Clock
; 0001 013D // Clock value: Timer 0 Stopped
; 0001 013E // Mode: Normal top=0xFF
; 0001 013F // OC0 output: Disconnected
; 0001 0140 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0001 0141 TCNT0=0x00;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0001 0142 OCR0=0x00;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0001 0143 
; 0001 0144 // Timer/Counter 1 initialization
; 0001 0145 // Clock source: System Clock
; 0001 0146 // Clock value: Timer1 Stopped
; 0001 0147 // Mode: Normal top=0xFFFF
; 0001 0148 // OC1A output: Disconnected
; 0001 0149 // OC1B output: Disconnected
; 0001 014A // Noise Canceler: Off
; 0001 014B // Input Capture on Falling Edge
; 0001 014C // Timer1 Overflow Interrupt: Off
; 0001 014D // Input Capture Interrupt: Off
; 0001 014E // Compare A Match Interrupt: Off
; 0001 014F // Compare B Match Interrupt: Off
; 0001 0150 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0001 0151 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0001 0152 TCNT1H=0x00;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0001 0153 TCNT1L=0x00;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0001 0154 ICR1H=0x00;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0001 0155 ICR1L=0x00;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0001 0156 OCR1AH=0x00;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0001 0157 OCR1AL=0x00;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0001 0158 OCR1BH=0x00;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0001 0159 OCR1BL=0x00;
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0001 015A 
; 0001 015B // Timer/Counter 2 initialization
; 0001 015C // Clock source: System Clock
; 0001 015D // Clock value: Timer2 Stopped
; 0001 015E // Mode: Normal top=0xFF
; 0001 015F // OC2 output: Disconnected
; 0001 0160 ASSR=0<<AS2;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0001 0161 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0001 0162 TCNT2=0x00;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0001 0163 OCR2=0x00;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0001 0164 
; 0001 0165 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0166 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0001 0167 
; 0001 0168 // External Interrupt(s) initialization
; 0001 0169 // INT0: Off
; 0001 016A // INT1: On
; 0001 016B // INT1 Mode: Rising Edge
; 0001 016C // INT2: Off
; 0001 016D GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0001 016E MCUCR=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0001 016F MCUCSR=(0<<ISC2);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0001 0170 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0001 0171 
; 0001 0172 // USART initialization
; 0001 0173 // USART disabled
; 0001 0174 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0001 0175 
; 0001 0176 // Analog Comparator initialization
; 0001 0177 // Analog Comparator: Off
; 0001 0178 // The Analog Comparator's positive input is
; 0001 0179 // connected to the AIN0 pin
; 0001 017A // The Analog Comparator's negative input is
; 0001 017B // connected to the AIN1 pin
; 0001 017C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0001 017D SFIOR=(0<<ACME);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0001 017E 
; 0001 017F // ADC initialization
; 0001 0180 // ADC disabled
; 0001 0181 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0001 0182 
; 0001 0183 // SPI initialization
; 0001 0184 // SPI disabled
; 0001 0185 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0001 0186 
; 0001 0187 // TWI initialization
; 0001 0188 // TWI disabled
; 0001 0189 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0001 018A 
; 0001 018B 
; 0001 018C 
; 0001 018D }
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;
;void all_init()
; 0001 0190 {
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0001 0191  port_init();
;PCODE: $00000286 VOL: 0
; 0001 0192  intrupt_init();
;PCODE: $00000287 VOL: 0
; 0001 0193  lcd_init(16);
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0001 0194 }
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
