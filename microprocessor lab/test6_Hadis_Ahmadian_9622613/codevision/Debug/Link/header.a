;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <alcd.h>
;#include <header.h>
;
;
;
;// Declare your global variables here
;char* str="           ";

	.DSEG
_0x20003:
	.BYTE 0xC
;int i;
;int mili_volt;
;int save_mv[8];
;int duty,ocr_tmp;
;int flag;
;
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;#define FIRST_ADC_INPUT 0
;#define LAST_ADC_INPUT 7
;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;
;
;interrupt [ADC_INT] void adc_isr(void)
; 0001 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 001D static unsigned char input_index=0;
; 0001 001E // Read the AD conversion result
; 0001 001F adc_data[input_index]=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 0020 // Select next ADC input
; 0001 0021 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT)){
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0022 
; 0001 0023    input_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0024                                      }
; 0001 0025 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0026 // Delay needed for the stabilization of the ADC input voltage
; 0001 0027 delay_us(10);
;PCODE: $00000021 VOL: 0
; 0001 0028 // Start the AD conversion
; 0001 0029 ADCSRA|=(1<<ADSC);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 002A }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0001 002E {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 002F ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000029 VOL: 0
;	adc_input -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0030 // Delay needed for the stabilization of the ADC input voltage
; 0001 0031 delay_us(10);
;PCODE: $0000002D VOL: 0
; 0001 0032 // Start the AD conversion
; 0001 0033 ADCSRA|=(1<<ADSC);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0034 // Wait for the AD conversion to complete
; 0001 0035 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0036 ADCSRA|=(1<<ADIF);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0037 return ADCW;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0038 }
;PCODE: $0000003B VOL: 0
;
;
;void port_init()
; 0001 003C {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 003D     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 003E     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 003F 
; 0001 0040     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0041     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0042 
; 0001 0043     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0044     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0045 
; 0001 0046     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0047     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0048 }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;
;void intrupts_and_timers()
; 0001 004C {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 004D // ADC initialization
; 0001 004E // ADC Clock frequency: 1000.000 kHz
; 0001 004F // ADC Voltage Reference: AVCC pin
; 0001 0050 // ADC Auto Trigger Source: Free Running
; 0001 0051 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 0052 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 0053 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0054 
; 0001 0055 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0056 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 0057 
; 0001 0058 // External Interrupt(s) initialization
; 0001 0059 // INT0: Off
; 0001 005A // INT1: Off
; 0001 005B // INT2: Off
; 0001 005C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 005D MCUCSR=(0<<ISC2);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 005E }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;
;void init_all()
; 0001 0062 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0063 port_init();
;PCODE: $00000062 VOL: 0
; 0001 0064 intrupts_and_timers()  ;
;PCODE: $00000063 VOL: 0
; 0001 0065 // Alphanumeric LCD initialization
; 0001 0066 // Characters/line: 16
; 0001 0067 //portC
; 0001 0068 lcd_init(16);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0069 }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;
;
;
;void one()
; 0001 006E {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 006F     lcd_puts("question 1:");
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0070     for(i=0;i<8;i++)
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 0071     {
; 0001 0072          lcd_gotoxy(0,1);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 0073          mili_volt=(read_adc(i)/1024.0)*5*1000;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 0074          save_mv[i]=mili_volt;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 0075          sprintf(str,"%d mv  ",mili_volt);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0076          lcd_puts(str);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0001 0077          delay_ms(1000);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0078     }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 0079 }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0

	.DSEG
_0x20008:
	.BYTE 0xC
;
;
;void q_2_init()
; 0001 007D {

	.CSEG
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0001 007E     // ADC initialization
; 0001 007F     // ADC Clock frequency: 1000.000 kHz
; 0001 0080     // ADC Voltage Reference: AVCC pin
; 0001 0081     // ADC Auto Trigger Source: Free Running
; 0001 0082     ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 0083     ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 0084     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 0085     #asm("sei")
;PCODE: $000000AA VOL: 0
	sei
;PCODE: $000000AB VOL: 0
; 0001 0086 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;
;
;void two()
; 0001 008A {
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 008B 
; 0001 008C  lcd_clear();
;PCODE: $000000B0 VOL: 0
; 0001 008D lcd_puts("question 2");
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 008E for(i=0;i<8;i++)
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 008F {
; 0001 0090  lcd_gotoxy(0,1);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 0091  mili_volt=(adc_data[i]/1024.0)*5*1000;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 0092 
; 0001 0093 
; 0001 0094  sprintf(str,"%d mv              ",mili_volt);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 0095  flag=mili_volt-save_mv[i];
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0001 0096  if(flag<0)
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0097     flag=-flag;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 0098 
; 0001 0099  if((save_mv[i]/20.0)<=flag)
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0001 009A      sprintf(str,"%d mv: changed ",mili_volt);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 009B 
; 0001 009C  lcd_puts(str);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0001 009D  delay_ms(1000);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 009E 
; 0001 009F }      }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0

	.DSEG
_0x2000C:
	.BYTE 0xB
;
;
;void three()
; 0001 00A3 {

	.CSEG
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 00A4  lcd_clear();
;PCODE: $00000113 VOL: 0
; 0001 00A5  TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0001 00A6  TCNT0=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0001 00A7  OCR0=0x01;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0001 00A8  lcd_puts("question 3 : \n");
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0001 00A9  while(1){
;PCODE: $0000011D VOL: 0
; 0001 00AA  duty=(adc_data[0]/1023.0)*90+5;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 00AB  ocr_tmp=duty*2.55;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 00AC  lcd_gotoxy(0,1);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0001 00AD  sprintf(str,"%d _ %d   ",duty,ocr_tmp);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0001 00AE  lcd_puts(str);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0001 00AF  OCR0=ocr_tmp;}
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0001 00B0 }
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0

	.DSEG
_0x20012:
	.BYTE 0xF
