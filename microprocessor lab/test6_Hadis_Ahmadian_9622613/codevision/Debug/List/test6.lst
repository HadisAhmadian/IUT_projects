
AVRASM ver. 2.1.30  E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm Sun Nov 29 15:50:31 2020

E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1096): warning: Register r12 already defined by the .DEF directive
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _str=R4
                 	.DEF _str_msb=R5
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _mili_volt=R8
                 	.DEF _mili_volt_msb=R9
                 	.DEF _duty=R10
                 	.DEF _duty_msb=R11
                 	.DEF _ocr_tmp=R12
                 	.DEF _ocr_tmp_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0086 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 00b9 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0160      	.DB  LOW(_0x20003),HIGH(_0x20003)
                 
                 _0x20000:
000034 2020
000035 2020
000036 2020
000037 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000038 2020
000039 0020
00003a 7571
00003b 7365      	.DB  0x20,0x20,0x20,0x0,0x71,0x75,0x65,0x73
00003c 6974
00003d 6e6f
00003e 3120
00003f 003a      	.DB  0x74,0x69,0x6F,0x6E,0x20,0x31,0x3A,0x0
000040 6425
000041 6d20
000042 2076
000043 0020      	.DB  0x25,0x64,0x20,0x6D,0x76,0x20,0x20,0x0
000044 7571
000045 7365
000046 6974
000047 6e6f      	.DB  0x71,0x75,0x65,0x73,0x74,0x69,0x6F,0x6E
000048 3220
000049 2500
00004a 2064
00004b 766d      	.DB  0x20,0x32,0x0,0x25,0x64,0x20,0x6D,0x76
00004c 2020
00004d 2020
00004e 2020
00004f 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000050 2020
000051 2020
000052 2020
000053 2500      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x0,0x25
000054 2064
000055 766d
000056 203a
000057 6863      	.DB  0x64,0x20,0x6D,0x76,0x3A,0x20,0x63,0x68
000058 6e61
000059 6567
00005a 2064
00005b 7100      	.DB  0x61,0x6E,0x67,0x65,0x64,0x20,0x0,0x71
00005c 6575
00005d 7473
00005e 6f69
00005f 206e      	.DB  0x75,0x65,0x73,0x74,0x69,0x6F,0x6E,0x20
000060 2033
000061 203a
000062 000a
000063 6425      	.DB  0x33,0x20,0x3A,0x20,0xA,0x0,0x25,0x64
000064 5f20
000065 2520
000066 2064
000067 2020      	.DB  0x20,0x5F,0x20,0x25,0x64,0x20,0x20,0x20
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1152): warning: .cseg .db misalignment - padding zero byte
000068 0000      	.DB  0x0
                 _0x2040060:
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1154): warning: .cseg .db misalignment - padding zero byte
000069 0001      	.DB  0x1
                 _0x2040000:
00006a 4e2d
00006b 4e41
00006c 4900
00006d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\project\test6_Hadis_Ahmadian_9622613\codevision\Debug\List\test6.asm(1157): warning: .cseg .db misalignment - padding zero byte
00006e 0000      	.DB  0x0
                 _0x2060003:
00006f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000070 0002      	.DW  0x02
000071 0004      	.DW  0x04
000072 0066      	.DW  __REG_VARS*2
                 
000073 000c      	.DW  0x0C
000074 0160      	.DW  _0x20003
000075 0068      	.DW  _0x20000*2
                 
000076 000c      	.DW  0x0C
000077 016c      	.DW  _0x20008
000078 0074      	.DW  _0x20000*2+12
                 
000079 000b      	.DW  0x0B
00007a 0178      	.DW  _0x2000C
00007b 0088      	.DW  _0x20000*2+32
                 
00007c 000f      	.DW  0x0F
00007d 0183      	.DW  _0x20012
00007e 00b7      	.DW  _0x20000*2+79
                 
00007f 0001      	.DW  0x01
000080 01b5      	.DW  __seed_G102
000081 00d2      	.DW  _0x2040060*2
                 
000082 0002      	.DW  0x02
000083 01b9      	.DW  __base_y_G103
000084 00de      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000085 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000086 94f8      	CLI
000087 27ee      	CLR  R30
000088 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000089 e0f1      	LDI  R31,1
00008a bffb      	OUT  GICR,R31
00008b bfeb      	OUT  GICR,R30
00008c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00008d e08d      	LDI  R24,(14-2)+1
00008e e0a2      	LDI  R26,2
00008f 27bb      	CLR  R27
                 __CLEAR_REG:
000090 93ed      	ST   X+,R30
000091 958a      	DEC  R24
000092 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000093 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000094 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000095 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000096 93ed      	ST   X+,R30
000097 9701      	SBIW R24,1
000098 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000099 eee0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00009a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00009b 9185      	LPM  R24,Z+
00009c 9195      	LPM  R25,Z+
00009d 9700      	SBIW R24,0
00009e f061      	BREQ __GLOBAL_INI_END
00009f 91a5      	LPM  R26,Z+
0000a0 91b5      	LPM  R27,Z+
0000a1 9005      	LPM  R0,Z+
0000a2 9015      	LPM  R1,Z+
0000a3 01bf      	MOVW R22,R30
0000a4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a5 9005      	LPM  R0,Z+
0000a6 920d      	ST   X+,R0
0000a7 9701      	SBIW R24,1
0000a8 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a9 01fb      	MOVW R30,R22
0000aa cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ab e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ac bfed      	OUT  SPL,R30
0000ad e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ae bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000af e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b0 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b1 940c 00b3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <header.h>
                 ;
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005 
                 ; 0000 0006 init_all();
0000b3 d05a      	RCALL _init_all
                 ; 0000 0007 one();
0000b4 d05f      	RCALL _one
                 ; 0000 0008 q_2_init();
0000b5 d082      	RCALL _q_2_init
                 ; 0000 0009 two();
0000b6 d089      	RCALL _two
                 ; 0000 000A three();
0000b7 d0e5      	RCALL _three
                 ; 0000 000B 
                 ; 0000 000C }
                 _0x3:
0000b8 cfff      	RJMP _0x3
                 ; .FEND
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <header.h>
                 ;
                 ;
                 ;
                 ;// Declare your global variables here
                 ;char* str="           ";
                 
                 	.DSEG
                 _0x20003:
000160           	.BYTE 0xC
                 ;int i;
                 ;int mili_volt;
                 ;int save_mv[8];
                 ;int duty,ocr_tmp;
                 ;int flag;
                 ;
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 7
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;
                 ;
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0001 001C {
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
0000b9 938a      	ST   -Y,R24
0000ba 93aa      	ST   -Y,R26
0000bb 93ba      	ST   -Y,R27
0000bc 93ea      	ST   -Y,R30
0000bd 93fa      	ST   -Y,R31
0000be b7ef      	IN   R30,SREG
0000bf 93ea      	ST   -Y,R30
                 ; 0001 001D static unsigned char input_index=0;
                 ; 0001 001E // Read the AD conversion result
                 ; 0001 001F adc_data[input_index]=ADCW;
0000c0 91e0 01b4 	LDS  R30,_input_index_S0010000000
0000c2 eaa4      	LDI  R26,LOW(_adc_data)
0000c3 e0b1      	LDI  R27,HIGH(_adc_data)
0000c4 e0f0      	LDI  R31,0
0000c5 0fee      	LSL  R30
0000c6 1fff      	ROL  R31
0000c7 0fae      	ADD  R26,R30
0000c8 1fbf      	ADC  R27,R31
0000c9 b1e4      	IN   R30,0x4
0000ca b1f5      	IN   R31,0x4+1
0000cb 93ed      	ST   X+,R30
0000cc 93fc      	ST   X,R31
                 ; 0001 0020 // Select next ADC input
                 ; 0001 0021 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT)){
0000cd 91a0 01b4 	LDS  R26,_input_index_S0010000000
0000cf 5faf      	SUBI R26,-LOW(1)
0000d0 93a0 01b4 	STS  _input_index_S0010000000,R26
0000d2 30a8      	CPI  R26,LOW(0x8)
0000d3 f018      	BRLO _0x20004
                 ; 0001 0022 
                 ; 0001 0023    input_index=0;
0000d4 e0e0      	LDI  R30,LOW(0)
0000d5 93e0 01b4 	STS  _input_index_S0010000000,R30
                 ; 0001 0024                                      }
                 ; 0001 0025 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x20004:
0000d7 91e0 01b4 	LDS  R30,_input_index_S0010000000
0000d9 5ce0      	SUBI R30,-LOW(64)
0000da b9e7      	OUT  0x7,R30
                 ; 0001 0026 // Delay needed for the stabilization of the ADC input voltage
                 ; 0001 0027 delay_us(10);
                +
0000db e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000dc 958a     +DEC R24
0000dd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 0028 // Start the AD conversion
                 ; 0001 0029 ADCSRA|=(1<<ADSC);
0000de 9a36      	SBI  0x6,6
                 ; 0001 002A }
0000df 91e9      	LD   R30,Y+
0000e0 bfef      	OUT  SREG,R30
0000e1 91f9      	LD   R31,Y+
0000e2 91e9      	LD   R30,Y+
0000e3 91b9      	LD   R27,Y+
0000e4 91a9      	LD   R26,Y+
0000e5 9189      	LD   R24,Y+
0000e6 9518      	RETI
                 ; .FEND
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0001 002E {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0001 002F ADMUX=adc_input | ADC_VREF_TYPE;
0000e7 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000e8 81e8      	LD   R30,Y
0000e9 64e0      	ORI  R30,0x40
0000ea b9e7      	OUT  0x7,R30
                 ; 0001 0030 // Delay needed for the stabilization of the ADC input voltage
                 ; 0001 0031 delay_us(10);
                +
0000eb e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000ec 958a     +DEC R24
0000ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 0032 // Start the AD conversion
                 ; 0001 0033 ADCSRA|=(1<<ADSC);
0000ee 9a36      	SBI  0x6,6
                 ; 0001 0034 // Wait for the AD conversion to complete
                 ; 0001 0035 while ((ADCSRA & (1<<ADIF))==0);
                 _0x20005:
0000ef 9b34      	SBIS 0x6,4
0000f0 cffe      	RJMP _0x20005
                 ; 0001 0036 ADCSRA|=(1<<ADIF);
0000f1 9a34      	SBI  0x6,4
                 ; 0001 0037 return ADCW;
0000f2 b1e4      	IN   R30,0x4
0000f3 b1f5      	IN   R31,0x4+1
0000f4 940c 044c 	JMP  _0x20C0001
                 ; 0001 0038 }
                 ; .FEND
                 ;
                 ;
                 ;void port_init()
                 ; 0001 003C {
                 _port_init:
                 ; .FSTART _port_init
                 ; 0001 003D     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 bbea      	OUT  0x1A,R30
                 ; 0001 003E     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000f8 bbeb      	OUT  0x1B,R30
                 ; 0001 003F 
                 ; 0001 0040     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000f9 e0e4      	LDI  R30,LOW(4)
0000fa bbe7      	OUT  0x17,R30
                 ; 0001 0041     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000fb e0e0      	LDI  R30,LOW(0)
0000fc bbe8      	OUT  0x18,R30
                 ; 0001 0042 
                 ; 0001 0043     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000fd efef      	LDI  R30,LOW(255)
0000fe bbe4      	OUT  0x14,R30
                 ; 0001 0044     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ff e0e0      	LDI  R30,LOW(0)
000100 bbe5      	OUT  0x15,R30
                 ; 0001 0045 
                 ; 0001 0046     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000101 bbe1      	OUT  0x11,R30
                 ; 0001 0047     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000102 bbe2      	OUT  0x12,R30
                 ; 0001 0048 }
000103 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void intrupts_and_timers()
                 ; 0001 004C {
                 _intrupts_and_timers:
                 ; .FSTART _intrupts_and_timers
                 ; 0001 004D // ADC initialization
                 ; 0001 004E // ADC Clock frequency: 1000.000 kHz
                 ; 0001 004F // ADC Voltage Reference: AVCC pin
                 ; 0001 0050 // ADC Auto Trigger Source: Free Running
                 ; 0001 0051 ADMUX=ADC_VREF_TYPE;
000104 e4e0      	LDI  R30,LOW(64)
000105 b9e7      	OUT  0x7,R30
                 ; 0001 0052 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000106 eae3      	LDI  R30,LOW(163)
000107 b9e6      	OUT  0x6,R30
                 ; 0001 0053 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000108 e0e0      	LDI  R30,LOW(0)
000109 bfe0      	OUT  0x30,R30
                 ; 0001 0054 
                 ; 0001 0055 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 0056 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00010a bfe9      	OUT  0x39,R30
                 ; 0001 0057 
                 ; 0001 0058 // External Interrupt(s) initialization
                 ; 0001 0059 // INT0: Off
                 ; 0001 005A // INT1: Off
                 ; 0001 005B // INT2: Off
                 ; 0001 005C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00010b bfe5      	OUT  0x35,R30
                 ; 0001 005D MCUCSR=(0<<ISC2);
00010c bfe4      	OUT  0x34,R30
                 ; 0001 005E }
00010d 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void init_all()
                 ; 0001 0062 {
                 _init_all:
                 ; .FSTART _init_all
                 ; 0001 0063 port_init();
00010e dfe7      	RCALL _port_init
                 ; 0001 0064 intrupts_and_timers()  ;
00010f dff4      	RCALL _intrupts_and_timers
                 ; 0001 0065 // Alphanumeric LCD initialization
                 ; 0001 0066 // Characters/line: 16
                 ; 0001 0067 //portC
                 ; 0001 0068 lcd_init(16);
000110 e1a0      	LDI  R26,LOW(16)
000111 940e 041f 	CALL _lcd_init
                 ; 0001 0069 }
000113 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void one()
                 ; 0001 006E {
                 _one:
                 ; .FSTART _one
                 ; 0001 006F     lcd_puts("question 1:");
                +
000114 e6ac     +LDI R26 , LOW ( _0x20008 + ( 0 ) )
000115 e0b1     +LDI R27 , HIGH ( _0x20008 + ( 0 ) )
                 	__POINTW2MN _0x20008,0
000116 940e 040e 	CALL _lcd_puts
                 ; 0001 0070     for(i=0;i<8;i++)
000118 2466      	CLR  R6
000119 2477      	CLR  R7
                 _0x2000A:
00011a e0e8      	LDI  R30,LOW(8)
00011b e0f0      	LDI  R31,HIGH(8)
00011c 166e      	CP   R6,R30
00011d 067f      	CPC  R7,R31
00011e f4c4      	BRGE _0x2000B
                 ; 0001 0071     {
                 ; 0001 0072          lcd_gotoxy(0,1);
00011f 940e 044e 	CALL SUBOPT_0x0
                 ; 0001 0073          mili_volt=(read_adc(i)/1024.0)*5*1000;
000121 2da6      	MOV  R26,R6
000122 dfc4      	RCALL _read_adc
000123 940e 0453 	CALL SUBOPT_0x1
                 ; 0001 0074          save_mv[i]=mili_volt;
000125 940e 046f 	CALL SUBOPT_0x2
000127 0fea      	ADD  R30,R26
000128 1ffb      	ADC  R31,R27
000129 8280      	ST   Z,R8
00012a 8291      	STD  Z+1,R9
                 ; 0001 0075          sprintf(str,"%d mv  ",mili_volt);
00012b 925a      	ST   -Y,R5
00012c 924a      	ST   -Y,R4
                +
00012d e8e0     +LDI R30 , LOW ( 2 * _0x20000 + ( 24 ) )
00012e e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 24 ) )
                 	__POINTW1FN _0x20000,24
00012f 940e 0475 	CALL SUBOPT_0x3
                 ; 0001 0076          lcd_puts(str);
000131 940e 0481 	CALL SUBOPT_0x4
                 ; 0001 0077          delay_ms(1000);
                 ; 0001 0078     }
000133 01f3      	MOVW R30,R6
000134 9631      	ADIW R30,1
000135 013f      	MOVW R6,R30
000136 cfe3      	RJMP _0x2000A
                 _0x2000B:
                 ; 0001 0079 }
000137 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20008:
00016c           	.BYTE 0xC
                 ;
                 ;
                 ;void q_2_init()
                 ; 0001 007D {
                 
                 	.CSEG
                 _q_2_init:
                 ; .FSTART _q_2_init
                 ; 0001 007E     // ADC initialization
                 ; 0001 007F     // ADC Clock frequency: 1000.000 kHz
                 ; 0001 0080     // ADC Voltage Reference: AVCC pin
                 ; 0001 0081     // ADC Auto Trigger Source: Free Running
                 ; 0001 0082     ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
000138 e4e0      	LDI  R30,LOW(64)
000139 b9e7      	OUT  0x7,R30
                 ; 0001 0083     ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00013a eeeb      	LDI  R30,LOW(235)
00013b b9e6      	OUT  0x6,R30
                 ; 0001 0084     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00013c e0e0      	LDI  R30,LOW(0)
00013d bfe0      	OUT  0x30,R30
                 ; 0001 0085     #asm("sei")
00013e 9478      	sei
                 ; 0001 0086 }
00013f 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void two()
                 ; 0001 008A {
                 _two:
                 ; .FSTART _two
                 ; 0001 008B 
                 ; 0001 008C  lcd_clear();
000140 940e 03e0 	CALL _lcd_clear
                 ; 0001 008D lcd_puts("question 2");
                +
000142 e7a8     +LDI R26 , LOW ( _0x2000C + ( 0 ) )
000143 e0b1     +LDI R27 , HIGH ( _0x2000C + ( 0 ) )
                 	__POINTW2MN _0x2000C,0
000144 940e 040e 	CALL _lcd_puts
                 ; 0001 008E for(i=0;i<8;i++)
000146 2466      	CLR  R6
000147 2477      	CLR  R7
                 _0x2000E:
000148 e0e8      	LDI  R30,LOW(8)
000149 e0f0      	LDI  R31,HIGH(8)
00014a 166e      	CP   R6,R30
00014b 067f      	CPC  R7,R31
00014c f00c      	BRLT PC+2
00014d c04e      	RJMP _0x2000F
                 ; 0001 008F {
                 ; 0001 0090  lcd_gotoxy(0,1);
00014e 940e 044e 	CALL SUBOPT_0x0
                 ; 0001 0091  mili_volt=(adc_data[i]/1024.0)*5*1000;
000150 01f3      	MOVW R30,R6
000151 eaa4      	LDI  R26,LOW(_adc_data)
000152 e0b1      	LDI  R27,HIGH(_adc_data)
000153 0fee      	LSL  R30
000154 1fff      	ROL  R31
000155 940e 0488 	CALL SUBOPT_0x5
000157 940e 0453 	CALL SUBOPT_0x1
                 ; 0001 0092 
                 ; 0001 0093 
                 ; 0001 0094  sprintf(str,"%d mv              ",mili_volt);
000159 925a      	ST   -Y,R5
00015a 924a      	ST   -Y,R4
                +
00015b e9e3     +LDI R30 , LOW ( 2 * _0x20000 + ( 43 ) )
00015c e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 43 ) )
                 	__POINTW1FN _0x20000,43
00015d 940e 0475 	CALL SUBOPT_0x3
                 ; 0001 0095  flag=mili_volt-save_mv[i];
00015f 940e 046f 	CALL SUBOPT_0x2
000161 940e 0488 	CALL SUBOPT_0x5
000163 01df      	MOVW R26,R30
000164 01f4      	MOVW R30,R8
000165 1bea      	SUB  R30,R26
000166 0bfb      	SBC  R31,R27
000167 93e0 01a2 	STS  _flag,R30
000169 93f0 01a3 	STS  _flag+1,R31
                 ; 0001 0096  if(flag<0)
00016b 91a0 01a3 	LDS  R26,_flag+1
00016d 23aa      	TST  R26
00016e f432      	BRPL _0x20010
                 ; 0001 0097     flag=-flag;
00016f 940e 0676 	CALL __ANEGW1
000171 93e0 01a2 	STS  _flag,R30
000173 93f0 01a3 	STS  _flag+1,R31
                 ; 0001 0098 
                 ; 0001 0099  if((save_mv[i]/20.0)<=flag)
                 _0x20010:
000175 940e 046f 	CALL SUBOPT_0x2
000177 940e 0488 	CALL SUBOPT_0x5
000179 940e 048d 	CALL SUBOPT_0x6
00017b 01df      	MOVW R26,R30
00017c 01cb      	MOVW R24,R22
                +
00017d e0e0     +LDI R30 , LOW ( 0x41A00000 )
00017e e0f0     +LDI R31 , HIGH ( 0x41A00000 )
00017f ea60     +LDI R22 , BYTE3 ( 0x41A00000 )
000180 e471     +LDI R23 , BYTE4 ( 0x41A00000 )
                 	__GETD1N 0x41A00000
000181 940e 060d 	CALL __DIVF21
000183 01df      	MOVW R26,R30
000184 01cb      	MOVW R24,R22
000185 91e0 01a2 	LDS  R30,_flag
000187 91f0 01a3 	LDS  R31,_flag+1
000189 940e 048d 	CALL SUBOPT_0x6
00018b 940e 0652 	CALL __CMPF12
00018d f011      	BREQ PC+3
00018e f008      	BRCS PC+2
00018f c006      	RJMP _0x20011
                 ; 0001 009A      sprintf(str,"%d mv: changed ",mili_volt);
000190 925a      	ST   -Y,R5
000191 924a      	ST   -Y,R4
                +
000192 eae7     +LDI R30 , LOW ( 2 * _0x20000 + ( 63 ) )
000193 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 63 ) )
                 	__POINTW1FN _0x20000,63
000194 940e 0475 	CALL SUBOPT_0x3
                 ; 0001 009B 
                 ; 0001 009C  lcd_puts(str);
                 _0x20011:
000196 940e 0481 	CALL SUBOPT_0x4
                 ; 0001 009D  delay_ms(1000);
                 ; 0001 009E 
                 ; 0001 009F }      }
000198 01f3      	MOVW R30,R6
000199 9631      	ADIW R30,1
00019a 013f      	MOVW R6,R30
00019b cfac      	RJMP _0x2000E
                 _0x2000F:
00019c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x2000C:
000178           	.BYTE 0xB
                 ;
                 ;
                 ;void three()
                 ; 0001 00A3 {
                 
                 	.CSEG
                 _three:
                 ; .FSTART _three
                 ; 0001 00A4  lcd_clear();
00019d 940e 03e0 	CALL _lcd_clear
                 ; 0001 00A5  TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00019f e6e5      	LDI  R30,LOW(101)
0001a0 bfe3      	OUT  0x33,R30
                 ; 0001 00A6  TCNT0=0x00;
0001a1 e0e0      	LDI  R30,LOW(0)
0001a2 bfe2      	OUT  0x32,R30
                 ; 0001 00A7  OCR0=0x01;
0001a3 e0e1      	LDI  R30,LOW(1)
0001a4 bfec      	OUT  0x3C,R30
                 ; 0001 00A8  lcd_puts("question 3 : \n");
                +
0001a5 e8a3     +LDI R26 , LOW ( _0x20012 + ( 0 ) )
0001a6 e0b1     +LDI R27 , HIGH ( _0x20012 + ( 0 ) )
                 	__POINTW2MN _0x20012,0
0001a7 940e 040e 	CALL _lcd_puts
                 ; 0001 00A9  while(1){
                 _0x20013:
                 ; 0001 00AA  duty=(adc_data[0]/1023.0)*90+5;
0001a9 91e0 01a4 	LDS  R30,_adc_data
0001ab 91f0 01a5 	LDS  R31,_adc_data+1
0001ad 2766      	CLR  R22
0001ae 2777      	CLR  R23
0001af 940e 053c 	CALL __CDF1
0001b1 01df      	MOVW R26,R30
0001b2 01cb      	MOVW R24,R22
                +
0001b3 e0e0     +LDI R30 , LOW ( 0x447FC000 )
0001b4 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
0001b5 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
0001b6 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
0001b7 940e 060d 	CALL __DIVF21
                +
0001b9 e0a0     +LDI R26 , LOW ( 0x42B40000 )
0001ba e0b0     +LDI R27 , HIGH ( 0x42B40000 )
0001bb eb84     +LDI R24 , BYTE3 ( 0x42B40000 )
0001bc e492     +LDI R25 , BYTE4 ( 0x42B40000 )
                 	__GETD2N 0x42B40000
0001bd 940e 05bf 	CALL __MULF12
                +
0001bf e0a0     +LDI R26 , LOW ( 0x40A00000 )
0001c0 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
0001c1 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
0001c2 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
0001c3 940e 056f 	CALL __ADDF12
0001c5 940e 0505 	CALL __CFD1
0001c7 015f      	MOVW R10,R30
                 ; 0001 00AB  ocr_tmp=duty*2.55;
0001c8 940e 048d 	CALL SUBOPT_0x6
                +
0001ca e3a3     +LDI R26 , LOW ( 0x40233333 )
0001cb e3b3     +LDI R27 , HIGH ( 0x40233333 )
0001cc e283     +LDI R24 , BYTE3 ( 0x40233333 )
0001cd e490     +LDI R25 , BYTE4 ( 0x40233333 )
                 	__GETD2N 0x40233333
0001ce 940e 05bf 	CALL __MULF12
0001d0 940e 0505 	CALL __CFD1
0001d2 016f      	MOVW R12,R30
                 ; 0001 00AC  lcd_gotoxy(0,1);
0001d3 940e 044e 	CALL SUBOPT_0x0
                 ; 0001 00AD  sprintf(str,"%d _ %d   ",duty,ocr_tmp);
0001d5 925a      	ST   -Y,R5
0001d6 924a      	ST   -Y,R4
                +
0001d7 ece6     +LDI R30 , LOW ( 2 * _0x20000 + ( 94 ) )
0001d8 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 94 ) )
                 	__POINTW1FN _0x20000,94
0001d9 93fa      	ST   -Y,R31
0001da 93ea      	ST   -Y,R30
0001db 01f5      	MOVW R30,R10
0001dc 940e 0682 	CALL __CWD1
0001de 940e 068f 	CALL __PUTPARD1
0001e0 01f6      	MOVW R30,R12
0001e1 940e 0682 	CALL __CWD1
0001e3 940e 068f 	CALL __PUTPARD1
0001e5 e088      	LDI  R24,8
0001e6 940e 0362 	CALL _sprintf
0001e8 962c      	ADIW R28,12
                 ; 0001 00AE  lcd_puts(str);
0001e9 01d2      	MOVW R26,R4
0001ea 940e 040e 	CALL _lcd_puts
                 ; 0001 00AF  OCR0=ocr_tmp;}
0001ec becc      	OUT  0x3C,R12
0001ed cfbb      	RJMP _0x20013
                 ; 0001 00B0 }
                 ; .FEND
                 
                 	.DSEG
                 _0x20012:
000183           	.BYTE 0xF
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0001ee 93ba      	ST   -Y,R27
0001ef 93aa      	ST   -Y,R26
0001f0 931a      	ST   -Y,R17
0001f1 930a      	ST   -Y,R16
0001f2 81aa      	LDD  R26,Y+2
0001f3 81bb      	LDD  R27,Y+2+1
0001f4 9612      	ADIW R26,2
0001f5 940e 0687 	CALL __GETW1P
0001f7 9730      	SBIW R30,0
0001f8 f159      	BREQ _0x2000010
0001f9 81aa      	LDD  R26,Y+2
0001fa 81bb      	LDD  R27,Y+2+1
0001fb 9614      	ADIW R26,4
0001fc 940e 0687 	CALL __GETW1P
0001fe 018f      	MOVW R16,R30
0001ff 9730      	SBIW R30,0
000200 f061      	BREQ _0x2000012
                +
000201 3002     +CPI R16 , LOW ( 2 )
000202 e0e0     +LDI R30 , HIGH ( 2 )
000203 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000204 f098      	BRLO _0x2000013
000205 01f8      	MOVW R30,R16
000206 9731      	SBIW R30,1
000207 018f      	MOVW R16,R30
                +
000208 81aa     +LDD R26 , Y + 2
000209 81bb     +LDD R27 , Y + 2 + 1
00020a 9614     +ADIW R26 , 4
00020b 93ed     +ST X + , R30
00020c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00020d 81aa      	LDD  R26,Y+2
00020e 81bb      	LDD  R27,Y+2+1
00020f 9612      	ADIW R26,2
000210 91ed      	LD   R30,X+
000211 91fd      	LD   R31,X+
000212 9631      	ADIW R30,1
000213 93fe      	ST   -X,R31
000214 93ee      	ST   -X,R30
000215 9731      	SBIW R30,1
000216 81ac      	LDD  R26,Y+4
000217 83a0      	STD  Z+0,R26
                 _0x2000013:
000218 81aa      	LDD  R26,Y+2
000219 81bb      	LDD  R27,Y+2+1
00021a 940e 0687 	CALL __GETW1P
00021c 23ff      	TST  R31
00021d f02a      	BRMI _0x2000014
00021e 91ed      	LD   R30,X+
00021f 91fd      	LD   R31,X+
000220 9631      	ADIW R30,1
000221 93fe      	ST   -X,R31
000222 93ee      	ST   -X,R30
                 _0x2000014:
000223 c006      	RJMP _0x2000015
                 _0x2000010:
000224 81aa      	LDD  R26,Y+2
000225 81bb      	LDD  R27,Y+2+1
000226 efef      	LDI  R30,LOW(65535)
000227 efff      	LDI  R31,HIGH(65535)
000228 93ed      	ST   X+,R30
000229 93fc      	ST   X,R31
                 _0x2000015:
00022a 8119      	LDD  R17,Y+1
00022b 8108      	LDD  R16,Y+0
00022c 9625      	ADIW R28,5
00022d 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00022e 93ba      	ST   -Y,R27
00022f 93aa      	ST   -Y,R26
000230 9726      	SBIW R28,6
000231 940e 0694 	CALL __SAVELOCR6
000233 e010      	LDI  R17,0
000234 85ac      	LDD  R26,Y+12
000235 85bd      	LDD  R27,Y+12+1
000236 e0e0      	LDI  R30,LOW(0)
000237 e0f0      	LDI  R31,HIGH(0)
000238 93ed      	ST   X+,R30
000239 93fc      	ST   X,R31
                 _0x2000016:
00023a 89ea      	LDD  R30,Y+18
00023b 89fb      	LDD  R31,Y+18+1
00023c 9631      	ADIW R30,1
00023d 8bea      	STD  Y+18,R30
00023e 8bfb      	STD  Y+18+1,R31
00023f 9731      	SBIW R30,1
000240 91e4      	LPM  R30,Z
000241 2f2e      	MOV  R18,R30
000242 30e0      	CPI  R30,0
000243 f409      	BRNE PC+2
000244 c115      	RJMP _0x2000018
000245 2fe1      	MOV  R30,R17
000246 30e0      	CPI  R30,0
000247 f439      	BRNE _0x200001C
000248 3225      	CPI  R18,37
000249 f411      	BRNE _0x200001D
00024a e011      	LDI  R17,LOW(1)
00024b c002      	RJMP _0x200001E
                 _0x200001D:
00024c 940e 0492 	CALL SUBOPT_0x7
                 _0x200001E:
00024e c10a      	RJMP _0x200001B
                 _0x200001C:
00024f 30e1      	CPI  R30,LOW(0x1)
000250 f4a9      	BRNE _0x200001F
000251 3225      	CPI  R18,37
000252 f419      	BRNE _0x2000020
000253 940e 0492 	CALL SUBOPT_0x7
000255 c102      	RJMP _0x20000CC
                 _0x2000020:
000256 e012      	LDI  R17,LOW(2)
000257 e040      	LDI  R20,LOW(0)
000258 e000      	LDI  R16,LOW(0)
000259 322d      	CPI  R18,45
00025a f411      	BRNE _0x2000021
00025b e001      	LDI  R16,LOW(1)
00025c c0fc      	RJMP _0x200001B
                 _0x2000021:
00025d 322b      	CPI  R18,43
00025e f411      	BRNE _0x2000022
00025f e24b      	LDI  R20,LOW(43)
000260 c0f8      	RJMP _0x200001B
                 _0x2000022:
000261 3220      	CPI  R18,32
000262 f411      	BRNE _0x2000023
000263 e240      	LDI  R20,LOW(32)
000264 c0f4      	RJMP _0x200001B
                 _0x2000023:
000265 c002      	RJMP _0x2000024
                 _0x200001F:
000266 30e2      	CPI  R30,LOW(0x2)
000267 f439      	BRNE _0x2000025
                 _0x2000024:
000268 e050      	LDI  R21,LOW(0)
000269 e013      	LDI  R17,LOW(3)
00026a 3320      	CPI  R18,48
00026b f411      	BRNE _0x2000026
00026c 6800      	ORI  R16,LOW(128)
00026d c0eb      	RJMP _0x200001B
                 _0x2000026:
00026e c003      	RJMP _0x2000027
                 _0x2000025:
00026f 30e3      	CPI  R30,LOW(0x3)
000270 f009      	BREQ PC+2
000271 c0e7      	RJMP _0x200001B
                 _0x2000027:
000272 3320      	CPI  R18,48
000273 f010      	BRLO _0x200002A
000274 332a      	CPI  R18,58
000275 f008      	BRLO _0x200002B
                 _0x200002A:
000276 c007      	RJMP _0x2000029
                 _0x200002B:
000277 e0aa      	LDI  R26,LOW(10)
000278 9f5a      	MUL  R21,R26
000279 2d50      	MOV  R21,R0
00027a 2fe2      	MOV  R30,R18
00027b 53e0      	SUBI R30,LOW(48)
00027c 0f5e      	ADD  R21,R30
00027d c0db      	RJMP _0x200001B
                 _0x2000029:
00027e 2fe2      	MOV  R30,R18
00027f 36e3      	CPI  R30,LOW(0x63)
000280 f449      	BRNE _0x200002F
000281 940e 0499 	CALL SUBOPT_0x8
000283 89e8      	LDD  R30,Y+16
000284 89f9      	LDD  R31,Y+16+1
000285 81a4      	LDD  R26,Z+4
000286 93aa      	ST   -Y,R26
000287 940e 049f 	CALL SUBOPT_0x9
000289 c0ce      	RJMP _0x2000030
                 _0x200002F:
00028a 37e3      	CPI  R30,LOW(0x73)
00028b f441      	BRNE _0x2000032
00028c 940e 0499 	CALL SUBOPT_0x8
00028e 940e 04a5 	CALL SUBOPT_0xA
000290 940e 0396 	CALL _strlen
000292 2f1e      	MOV  R17,R30
000293 c00a      	RJMP _0x2000033
                 _0x2000032:
000294 37e0      	CPI  R30,LOW(0x70)
000295 f461      	BRNE _0x2000035
000296 940e 0499 	CALL SUBOPT_0x8
000298 940e 04a5 	CALL SUBOPT_0xA
00029a 940e 03a2 	CALL _strlenf
00029c 2f1e      	MOV  R17,R30
00029d 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00029e 6002      	ORI  R16,LOW(2)
00029f 770f      	ANDI R16,LOW(127)
0002a0 e030      	LDI  R19,LOW(0)
0002a1 c034      	RJMP _0x2000036
                 _0x2000035:
0002a2 36e4      	CPI  R30,LOW(0x64)
0002a3 f011      	BREQ _0x2000039
0002a4 36e9      	CPI  R30,LOW(0x69)
0002a5 f411      	BRNE _0x200003A
                 _0x2000039:
0002a6 6004      	ORI  R16,LOW(4)
0002a7 c002      	RJMP _0x200003B
                 _0x200003A:
0002a8 37e5      	CPI  R30,LOW(0x75)
0002a9 f431      	BRNE _0x200003C
                 _0x200003B:
0002aa e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0002ab e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0002ac 83ee      	STD  Y+6,R30
0002ad 83ff      	STD  Y+6+1,R31
0002ae e015      	LDI  R17,LOW(5)
0002af c00c      	RJMP _0x200003D
                 _0x200003C:
0002b0 35e8      	CPI  R30,LOW(0x58)
0002b1 f411      	BRNE _0x200003F
0002b2 6008      	ORI  R16,LOW(8)
0002b3 c003      	RJMP _0x2000040
                 _0x200003F:
0002b4 37e8      	CPI  R30,LOW(0x78)
0002b5 f009      	BREQ PC+2
0002b6 c0a1      	RJMP _0x2000071
                 _0x2000040:
0002b7 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0002b8 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0002b9 83ee      	STD  Y+6,R30
0002ba 83ff      	STD  Y+6+1,R31
0002bb e014      	LDI  R17,LOW(4)
                 _0x200003D:
0002bc ff02      	SBRS R16,2
0002bd c014      	RJMP _0x2000042
0002be 940e 0499 	CALL SUBOPT_0x8
0002c0 940e 04af 	CALL SUBOPT_0xB
0002c2 85ab      	LDD  R26,Y+11
0002c3 23aa      	TST  R26
0002c4 f43a      	BRPL _0x2000043
0002c5 85ea      	LDD  R30,Y+10
0002c6 85fb      	LDD  R31,Y+10+1
0002c7 940e 0676 	CALL __ANEGW1
0002c9 87ea      	STD  Y+10,R30
0002ca 87fb      	STD  Y+10+1,R31
0002cb e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0002cc 3040      	CPI  R20,0
0002cd f011      	BREQ _0x2000044
0002ce 5f1f      	SUBI R17,-LOW(1)
0002cf c001      	RJMP _0x2000045
                 _0x2000044:
0002d0 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0002d1 c004      	RJMP _0x2000046
                 _0x2000042:
0002d2 940e 0499 	CALL SUBOPT_0x8
0002d4 940e 04af 	CALL SUBOPT_0xB
                 _0x2000046:
                 _0x2000036:
0002d6 fd00      	SBRC R16,0
0002d7 c011      	RJMP _0x2000047
                 _0x2000048:
0002d8 1715      	CP   R17,R21
0002d9 f478      	BRSH _0x200004A
0002da ff07      	SBRS R16,7
0002db c008      	RJMP _0x200004B
0002dc ff02      	SBRS R16,2
0002dd c004      	RJMP _0x200004C
0002de 7f0b      	ANDI R16,LOW(251)
0002df 2f24      	MOV  R18,R20
0002e0 5011      	SUBI R17,LOW(1)
0002e1 c001      	RJMP _0x200004D
                 _0x200004C:
0002e2 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0002e3 c001      	RJMP _0x200004E
                 _0x200004B:
0002e4 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0002e5 940e 0492 	CALL SUBOPT_0x7
0002e7 5051      	SUBI R21,LOW(1)
0002e8 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0002e9 2f31      	MOV  R19,R17
0002ea ff01      	SBRS R16,1
0002eb c017      	RJMP _0x200004F
                 _0x2000050:
0002ec 3030      	CPI  R19,0
0002ed f0a1      	BREQ _0x2000052
0002ee ff03      	SBRS R16,3
0002ef c006      	RJMP _0x2000053
0002f0 81ee      	LDD  R30,Y+6
0002f1 81ff      	LDD  R31,Y+6+1
0002f2 9125      	LPM  R18,Z+
0002f3 83ee      	STD  Y+6,R30
0002f4 83ff      	STD  Y+6+1,R31
0002f5 c005      	RJMP _0x2000054
                 _0x2000053:
0002f6 81ae      	LDD  R26,Y+6
0002f7 81bf      	LDD  R27,Y+6+1
0002f8 912d      	LD   R18,X+
0002f9 83ae      	STD  Y+6,R26
0002fa 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0002fb 940e 0492 	CALL SUBOPT_0x7
0002fd 3050      	CPI  R21,0
0002fe f009      	BREQ _0x2000055
0002ff 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000300 5031      	SUBI R19,LOW(1)
000301 cfea      	RJMP _0x2000050
                 _0x2000052:
000302 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000303 e320      	LDI  R18,LOW(48)
000304 81ee      	LDD  R30,Y+6
000305 81ff      	LDD  R31,Y+6+1
000306 940e 068b 	CALL __GETW1PF
000308 87e8      	STD  Y+8,R30
000309 87f9      	STD  Y+8+1,R31
00030a 81ee      	LDD  R30,Y+6
00030b 81ff      	LDD  R31,Y+6+1
00030c 9632      	ADIW R30,2
00030d 83ee      	STD  Y+6,R30
00030e 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00030f 85e8      	LDD  R30,Y+8
000310 85f9      	LDD  R31,Y+8+1
000311 85aa      	LDD  R26,Y+10
000312 85bb      	LDD  R27,Y+10+1
000313 17ae      	CP   R26,R30
000314 07bf      	CPC  R27,R31
000315 f050      	BRLO _0x200005C
000316 5f2f      	SUBI R18,-LOW(1)
000317 85a8      	LDD  R26,Y+8
000318 85b9      	LDD  R27,Y+8+1
000319 85ea      	LDD  R30,Y+10
00031a 85fb      	LDD  R31,Y+10+1
00031b 1bea      	SUB  R30,R26
00031c 0bfb      	SBC  R31,R27
00031d 87ea      	STD  Y+10,R30
00031e 87fb      	STD  Y+10+1,R31
00031f cfef      	RJMP _0x200005A
                 _0x200005C:
000320 332a      	CPI  R18,58
000321 f028      	BRLO _0x200005D
000322 ff03      	SBRS R16,3
000323 c002      	RJMP _0x200005E
000324 5f29      	SUBI R18,-LOW(7)
000325 c001      	RJMP _0x200005F
                 _0x200005E:
000326 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000327 fd04      	SBRC R16,4
000328 c01a      	RJMP _0x2000061
000329 3321      	CPI  R18,49
00032a f420      	BRSH _0x2000063
00032b 85a8      	LDD  R26,Y+8
00032c 85b9      	LDD  R27,Y+8+1
00032d 9711      	SBIW R26,1
00032e f409      	BRNE _0x2000062
                 _0x2000063:
00032f c009      	RJMP _0x20000CD
                 _0x2000062:
000330 1753      	CP   R21,R19
000331 f010      	BRLO _0x2000067
000332 ff00      	SBRS R16,0
000333 c001      	RJMP _0x2000068
                 _0x2000067:
000334 c013      	RJMP _0x2000066
                 _0x2000068:
000335 e220      	LDI  R18,LOW(32)
000336 ff07      	SBRS R16,7
000337 c00b      	RJMP _0x2000069
000338 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000339 6100      	ORI  R16,LOW(16)
00033a ff02      	SBRS R16,2
00033b c007      	RJMP _0x200006A
00033c 7f0b      	ANDI R16,LOW(251)
00033d 934a      	ST   -Y,R20
00033e 940e 049f 	CALL SUBOPT_0x9
000340 3050      	CPI  R21,0
000341 f009      	BREQ _0x200006B
000342 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000343 940e 0492 	CALL SUBOPT_0x7
000345 3050      	CPI  R21,0
000346 f009      	BREQ _0x200006C
000347 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000348 5031      	SUBI R19,LOW(1)
000349 85a8      	LDD  R26,Y+8
00034a 85b9      	LDD  R27,Y+8+1
00034b 9712      	SBIW R26,2
00034c f008      	BRLO _0x2000059
00034d cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00034e ff00      	SBRS R16,0
00034f c008      	RJMP _0x200006D
                 _0x200006E:
000350 3050      	CPI  R21,0
000351 f031      	BREQ _0x2000070
000352 5051      	SUBI R21,LOW(1)
000353 e2e0      	LDI  R30,LOW(32)
000354 93ea      	ST   -Y,R30
000355 940e 049f 	CALL SUBOPT_0x9
000357 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000358 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000359 cee0      	RJMP _0x2000016
                 _0x2000018:
00035a 85ac      	LDD  R26,Y+12
00035b 85bd      	LDD  R27,Y+12+1
00035c 940e 0687 	CALL __GETW1P
00035e 940e 069b 	CALL __LOADLOCR6
000360 9664      	ADIW R28,20
000361 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000362 92ff      	PUSH R15
000363 2ef8      	MOV  R15,R24
000364 9726      	SBIW R28,6
000365 940e 0696 	CALL __SAVELOCR4
000367 940e 04b7 	CALL SUBOPT_0xC
000369 9730      	SBIW R30,0
00036a f419      	BRNE _0x2000072
00036b efef      	LDI  R30,LOW(65535)
00036c efff      	LDI  R31,HIGH(65535)
00036d c023      	RJMP _0x20C0002
                 _0x2000072:
00036e 01de      	MOVW R26,R28
00036f 9616      	ADIW R26,6
000370 940e 0672 	CALL __ADDW2R15
000372 018d      	MOVW R16,R26
000373 940e 04b7 	CALL SUBOPT_0xC
000375 83ee      	STD  Y+6,R30
000376 83ff      	STD  Y+6+1,R31
000377 e0e0      	LDI  R30,LOW(0)
000378 87e8      	STD  Y+8,R30
000379 87e9      	STD  Y+8+1,R30
00037a 01de      	MOVW R26,R28
00037b 961a      	ADIW R26,10
00037c 940e 0672 	CALL __ADDW2R15
00037e 940e 0687 	CALL __GETW1P
000380 93fa      	ST   -Y,R31
000381 93ea      	ST   -Y,R30
000382 931a      	ST   -Y,R17
000383 930a      	ST   -Y,R16
000384 eeee      	LDI  R30,LOW(_put_buff_G100)
000385 e0f1      	LDI  R31,HIGH(_put_buff_G100)
000386 93fa      	ST   -Y,R31
000387 93ea      	ST   -Y,R30
000388 01de      	MOVW R26,R28
000389 961a      	ADIW R26,10
00038a dea3      	RCALL __print_G100
00038b 019f      	MOVW R18,R30
00038c 81ae      	LDD  R26,Y+6
00038d 81bf      	LDD  R27,Y+6+1
00038e e0e0      	LDI  R30,LOW(0)
00038f 93ec      	ST   X,R30
000390 01f9      	MOVW R30,R18
                 _0x20C0002:
000391 940e 069d 	CALL __LOADLOCR4
000393 962a      	ADIW R28,10
000394 90ff      	POP  R15
000395 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000396 93ba      	ST   -Y,R27
000397 93aa      	ST   -Y,R26
000398 91a9          ld   r26,y+
000399 91b9          ld   r27,y+
00039a 27ee          clr  r30
00039b 27ff          clr  r31
                 strlen0:
00039c 916d          ld   r22,x+
00039d 2366          tst  r22
00039e f011          breq strlen1
00039f 9631          adiw r30,1
0003a0 cffb          rjmp strlen0
                 strlen1:
0003a1 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003a2 93ba      	ST   -Y,R27
0003a3 93aa      	ST   -Y,R26
0003a4 27aa          clr  r26
0003a5 27bb          clr  r27
0003a6 91e9          ld   r30,y+
0003a7 91f9          ld   r31,y+
                 strlenf0:
0003a8 9005      	lpm  r0,z+
0003a9 2000          tst  r0
0003aa f011          breq strlenf1
0003ab 9611          adiw r26,1
0003ac cffb          rjmp strlenf0
                 strlenf1:
0003ad 01fd          movw r30,r26
0003ae 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
0003af 93aa      	ST   -Y,R26
0003b0 b3e5      	IN   R30,0x15
0003b1 70ef      	ANDI R30,LOW(0xF)
0003b2 2fae      	MOV  R26,R30
0003b3 81e8      	LD   R30,Y
0003b4 7fe0      	ANDI R30,LOW(0xF0)
0003b5 2bea      	OR   R30,R26
0003b6 bbe5      	OUT  0x15,R30
                +
0003b7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003b8 958a     +DEC R24
0003b9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003ba 9aaa      	SBI  0x15,2
                +
0003bb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003bc 958a     +DEC R24
0003bd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003be 98aa      	CBI  0x15,2
                +
0003bf e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003c0 958a     +DEC R24
0003c1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003c2 c089      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0003c3 93aa      	ST   -Y,R26
0003c4 81a8      	LD   R26,Y
0003c5 dfe9      	RCALL __lcd_write_nibble_G103
0003c6 81e8          ld    r30,y
0003c7 95e2          swap  r30
0003c8 83e8          st    y,r30
0003c9 81a8      	LD   R26,Y
0003ca dfe4      	RCALL __lcd_write_nibble_G103
                +
0003cb e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0003cc 958a     +DEC R24
0003cd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0003ce c07d      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0003cf 93aa      	ST   -Y,R26
0003d0 81e8      	LD   R30,Y
0003d1 e0f0      	LDI  R31,0
0003d2 54e7      	SUBI R30,LOW(-__base_y_G103)
0003d3 4ffe      	SBCI R31,HIGH(-__base_y_G103)
0003d4 81e0      	LD   R30,Z
0003d5 81a9      	LDD  R26,Y+1
0003d6 0fae      	ADD  R26,R30
0003d7 dfeb      	RCALL __lcd_write_data
0003d8 81e9      	LDD  R30,Y+1
0003d9 93e0 01bd 	STS  __lcd_x,R30
0003db 81e8      	LD   R30,Y
0003dc 93e0 01be 	STS  __lcd_y,R30
0003de 9622      	ADIW R28,2
0003df 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0003e0 e0a2      	LDI  R26,LOW(2)
0003e1 940e 04be 	CALL SUBOPT_0xD
0003e3 e0ac      	LDI  R26,LOW(12)
0003e4 dfde      	RCALL __lcd_write_data
0003e5 e0a1      	LDI  R26,LOW(1)
0003e6 940e 04be 	CALL SUBOPT_0xD
0003e8 e0e0      	LDI  R30,LOW(0)
0003e9 93e0 01be 	STS  __lcd_y,R30
0003eb 93e0 01bd 	STS  __lcd_x,R30
0003ed 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0003ee 93aa      	ST   -Y,R26
0003ef 81a8      	LD   R26,Y
0003f0 30aa      	CPI  R26,LOW(0xA)
0003f1 f031      	BREQ _0x2060005
0003f2 91e0 01bf 	LDS  R30,__lcd_maxx
0003f4 91a0 01bd 	LDS  R26,__lcd_x
0003f6 17ae      	CP   R26,R30
0003f7 f060      	BRLO _0x2060004
                 _0x2060005:
0003f8 e0e0      	LDI  R30,LOW(0)
0003f9 93ea      	ST   -Y,R30
0003fa 91a0 01be 	LDS  R26,__lcd_y
0003fc 5faf      	SUBI R26,-LOW(1)
0003fd 93a0 01be 	STS  __lcd_y,R26
0003ff dfcf      	RCALL _lcd_gotoxy
000400 81a8      	LD   R26,Y
000401 30aa      	CPI  R26,LOW(0xA)
000402 f409      	BRNE _0x2060007
000403 c048      	RJMP _0x20C0001
                 _0x2060007:
                 _0x2060004:
000404 91e0 01bd 	LDS  R30,__lcd_x
000406 5fef      	SUBI R30,-LOW(1)
000407 93e0 01bd 	STS  __lcd_x,R30
000409 9aa8      	SBI  0x15,0
00040a 81a8      	LD   R26,Y
00040b dfb7      	RCALL __lcd_write_data
00040c 98a8      	CBI  0x15,0
00040d c03e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00040e 93ba      	ST   -Y,R27
00040f 93aa      	ST   -Y,R26
000410 931a      	ST   -Y,R17
                 _0x2060008:
000411 81a9      	LDD  R26,Y+1
000412 81ba      	LDD  R27,Y+1+1
000413 91ed      	LD   R30,X+
000414 83a9      	STD  Y+1,R26
000415 83ba      	STD  Y+1+1,R27
000416 2f1e      	MOV  R17,R30
000417 30e0      	CPI  R30,0
000418 f019      	BREQ _0x206000A
000419 2fa1      	MOV  R26,R17
00041a dfd3      	RCALL _lcd_putchar
00041b cff5      	RJMP _0x2060008
                 _0x206000A:
00041c 8118      	LDD  R17,Y+0
00041d 9623      	ADIW R28,3
00041e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00041f 93aa      	ST   -Y,R26
000420 b3e4      	IN   R30,0x14
000421 6fe0      	ORI  R30,LOW(0xF0)
000422 bbe4      	OUT  0x14,R30
000423 9aa2      	SBI  0x14,2
000424 9aa0      	SBI  0x14,0
000425 9aa1      	SBI  0x14,1
000426 98aa      	CBI  0x15,2
000427 98a8      	CBI  0x15,0
000428 98a9      	CBI  0x15,1
000429 81e8      	LD   R30,Y
00042a 93e0 01bf 	STS  __lcd_maxx,R30
00042c 58e0      	SUBI R30,-LOW(128)
                +
00042d 93e0 01bb+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
00042f 81e8      	LD   R30,Y
000430 54e0      	SUBI R30,-LOW(192)
                +
000431 93e0 01bc+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000433 e1a4      	LDI  R26,LOW(20)
000434 e0b0      	LDI  R27,0
000435 940e 04cc 	CALL _delay_ms
000437 940e 04c4 	CALL SUBOPT_0xE
000439 940e 04c4 	CALL SUBOPT_0xE
00043b 940e 04c4 	CALL SUBOPT_0xE
00043d e2a0      	LDI  R26,LOW(32)
00043e df70      	RCALL __lcd_write_nibble_G103
                +
00043f ec88     +LDI R24 , LOW ( 200 )
000440 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000441 9701     +SBIW R24 , 1
000442 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000443 e2a8      	LDI  R26,LOW(40)
000444 df7e      	RCALL __lcd_write_data
000445 e0a4      	LDI  R26,LOW(4)
000446 df7c      	RCALL __lcd_write_data
000447 e8a5      	LDI  R26,LOW(133)
000448 df7a      	RCALL __lcd_write_data
000449 e0a6      	LDI  R26,LOW(6)
00044a df78      	RCALL __lcd_write_data
00044b df94      	RCALL _lcd_clear
                 _0x20C0001:
00044c 9621      	ADIW R28,1
00044d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _save_mv:
000192           	.BYTE 0x10
                 _flag:
0001a2           	.BYTE 0x2
                 _adc_data:
0001a4           	.BYTE 0x10
                 _input_index_S0010000000:
0001b4           	.BYTE 0x1
                 __seed_G102:
0001b5           	.BYTE 0x4
                 __base_y_G103:
0001b9           	.BYTE 0x4
                 __lcd_x:
0001bd           	.BYTE 0x1
                 __lcd_y:
0001be           	.BYTE 0x1
                 __lcd_maxx:
0001bf           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00044e e0e0      	LDI  R30,LOW(0)
00044f 93ea      	ST   -Y,R30
000450 e0a1      	LDI  R26,LOW(1)
000451 940c 03cf 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x1:
000453 2766      	CLR  R22
000454 2777      	CLR  R23
000455 940e 053c 	CALL __CDF1
000457 01df      	MOVW R26,R30
000458 01cb      	MOVW R24,R22
                +
000459 e0e0     +LDI R30 , LOW ( 0x44800000 )
00045a e0f0     +LDI R31 , HIGH ( 0x44800000 )
00045b e860     +LDI R22 , BYTE3 ( 0x44800000 )
00045c e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
00045d 940e 060d 	CALL __DIVF21
                +
00045f e0a0     +LDI R26 , LOW ( 0x40A00000 )
000460 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000461 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000462 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000463 940e 05bf 	CALL __MULF12
                +
000465 e0a0     +LDI R26 , LOW ( 0x447A0000 )
000466 e0b0     +LDI R27 , HIGH ( 0x447A0000 )
000467 e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
000468 e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
000469 940e 05bf 	CALL __MULF12
00046b 940e 0505 	CALL __CFD1
00046d 014f      	MOVW R8,R30
00046e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00046f 01f3      	MOVW R30,R6
000470 e9a2      	LDI  R26,LOW(_save_mv)
000471 e0b1      	LDI  R27,HIGH(_save_mv)
000472 0fee      	LSL  R30
000473 1fff      	ROL  R31
000474 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3:
000475 93fa      	ST   -Y,R31
000476 93ea      	ST   -Y,R30
000477 01f4      	MOVW R30,R8
000478 940e 0682 	CALL __CWD1
00047a 940e 068f 	CALL __PUTPARD1
00047c e084      	LDI  R24,4
00047d 940e 0362 	CALL _sprintf
00047f 9628      	ADIW R28,8
000480 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000481 01d2      	MOVW R26,R4
000482 940e 040e 	CALL _lcd_puts
000484 eea8      	LDI  R26,LOW(1000)
000485 e0b3      	LDI  R27,HIGH(1000)
000486 940c 04cc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000488 0fae      	ADD  R26,R30
000489 1fbf      	ADC  R27,R31
00048a 940e 0687 	CALL __GETW1P
00048c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00048d 940e 0682 	CALL __CWD1
00048f 940e 053c 	CALL __CDF1
000491 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
000492 932a      	ST   -Y,R18
000493 85ad      	LDD  R26,Y+13
000494 85be      	LDD  R27,Y+13+1
000495 85ef      	LDD  R30,Y+15
000496 89f8      	LDD  R31,Y+15+1
000497 9509      	ICALL
000498 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
000499 89e8      	LDD  R30,Y+16
00049a 89f9      	LDD  R31,Y+16+1
00049b 9734      	SBIW R30,4
00049c 8be8      	STD  Y+16,R30
00049d 8bf9      	STD  Y+16+1,R31
00049e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00049f 85ad      	LDD  R26,Y+13
0004a0 85be      	LDD  R27,Y+13+1
0004a1 85ef      	LDD  R30,Y+15
0004a2 89f8      	LDD  R31,Y+15+1
0004a3 9509      	ICALL
0004a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0004a5 89a8      	LDD  R26,Y+16
0004a6 89b9      	LDD  R27,Y+16+1
0004a7 9614      	ADIW R26,4
0004a8 940e 0687 	CALL __GETW1P
0004aa 83ee      	STD  Y+6,R30
0004ab 83ff      	STD  Y+6+1,R31
0004ac 81ae      	LDD  R26,Y+6
0004ad 81bf      	LDD  R27,Y+6+1
0004ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
0004af 89a8      	LDD  R26,Y+16
0004b0 89b9      	LDD  R27,Y+16+1
0004b1 9614      	ADIW R26,4
0004b2 940e 0687 	CALL __GETW1P
0004b4 87ea      	STD  Y+10,R30
0004b5 87fb      	STD  Y+10+1,R31
0004b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0004b7 01de      	MOVW R26,R28
0004b8 961c      	ADIW R26,12
0004b9 940e 0672 	CALL __ADDW2R15
0004bb 940e 0687 	CALL __GETW1P
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0004be 940e 03c3 	CALL __lcd_write_data
0004c0 e0a3      	LDI  R26,LOW(3)
0004c1 e0b0      	LDI  R27,0
0004c2 940c 04cc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
0004c4 e3a0      	LDI  R26,LOW(48)
0004c5 940e 03af 	CALL __lcd_write_nibble_G103
                +
0004c7 ec88     +LDI R24 , LOW ( 200 )
0004c8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004c9 9701     +SBIW R24 , 1
0004ca f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004cb 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004cc 9610      	adiw r26,0
0004cd f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004ce ed80     +LDI R24 , LOW ( 0x7D0 )
0004cf e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0004d0 9701     +SBIW R24 , 1
0004d1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0004d2 95a8      	wdr
0004d3 9711      	sbiw r26,1
0004d4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004d5 9508      	ret
                 
                 __ROUND_REPACK:
0004d6 2355      	TST  R21
0004d7 f442      	BRPL __REPACK
0004d8 3850      	CPI  R21,0x80
0004d9 f411      	BRNE __ROUND_REPACK0
0004da ffe0      	SBRS R30,0
0004db c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0004dc 9631      	ADIW R30,1
0004dd 1f69      	ADC  R22,R25
0004de 1f79      	ADC  R23,R25
0004df f06b      	BRVS __REPACK1
                 
                 __REPACK:
0004e0 e850      	LDI  R21,0x80
0004e1 2757      	EOR  R21,R23
0004e2 f411      	BRNE __REPACK0
0004e3 935f      	PUSH R21
0004e4 c0c8      	RJMP __ZERORES
                 __REPACK0:
0004e5 3f5f      	CPI  R21,0xFF
0004e6 f031      	BREQ __REPACK1
0004e7 0f66      	LSL  R22
0004e8 0c00      	LSL  R0
0004e9 9557      	ROR  R21
0004ea 9567      	ROR  R22
0004eb 2f75      	MOV  R23,R21
0004ec 9508      	RET
                 __REPACK1:
0004ed 935f      	PUSH R21
0004ee 2000      	TST  R0
0004ef f00a      	BRMI __REPACK2
0004f0 c0c8      	RJMP __MAXRES
                 __REPACK2:
0004f1 c0c1      	RJMP __MINRES
                 
                 __UNPACK:
0004f2 e850      	LDI  R21,0x80
0004f3 2e19      	MOV  R1,R25
0004f4 2215      	AND  R1,R21
0004f5 0f88      	LSL  R24
0004f6 1f99      	ROL  R25
0004f7 2795      	EOR  R25,R21
0004f8 0f55      	LSL  R21
0004f9 9587      	ROR  R24
                 
                 __UNPACK1:
0004fa e850      	LDI  R21,0x80
0004fb 2e07      	MOV  R0,R23
0004fc 2205      	AND  R0,R21
0004fd 0f66      	LSL  R22
0004fe 1f77      	ROL  R23
0004ff 2775      	EOR  R23,R21
000500 0f55      	LSL  R21
000501 9567      	ROR  R22
000502 9508      	RET
                 
                 __CFD1U:
000503 9468      	SET
000504 c001      	RJMP __CFD1U0
                 __CFD1:
000505 94e8      	CLT
                 __CFD1U0:
000506 935f      	PUSH R21
000507 dff2      	RCALL __UNPACK1
000508 3870      	CPI  R23,0x80
000509 f018      	BRLO __CFD10
00050a 3f7f      	CPI  R23,0xFF
00050b f408      	BRCC __CFD10
00050c c0a0      	RJMP __ZERORES
                 __CFD10:
00050d e156      	LDI  R21,22
00050e 1b57      	SUB  R21,R23
00050f f4aa      	BRPL __CFD11
000510 9551      	NEG  R21
000511 3058      	CPI  R21,8
000512 f40e      	BRTC __CFD19
000513 3059      	CPI  R21,9
                 __CFD19:
000514 f030      	BRLO __CFD17
000515 efef      	SER  R30
000516 efff      	SER  R31
000517 ef6f      	SER  R22
000518 e77f      	LDI  R23,0x7F
000519 f977      	BLD  R23,7
00051a c01a      	RJMP __CFD15
                 __CFD17:
00051b 2777      	CLR  R23
00051c 2355      	TST  R21
00051d f0b9      	BREQ __CFD15
                 __CFD18:
00051e 0fee      	LSL  R30
00051f 1fff      	ROL  R31
000520 1f66      	ROL  R22
000521 1f77      	ROL  R23
000522 955a      	DEC  R21
000523 f7d1      	BRNE __CFD18
000524 c010      	RJMP __CFD15
                 __CFD11:
000525 2777      	CLR  R23
                 __CFD12:
000526 3058      	CPI  R21,8
000527 f028      	BRLO __CFD13
000528 2fef      	MOV  R30,R31
000529 2ff6      	MOV  R31,R22
00052a 2f67      	MOV  R22,R23
00052b 5058      	SUBI R21,8
00052c cff9      	RJMP __CFD12
                 __CFD13:
00052d 2355      	TST  R21
00052e f031      	BREQ __CFD15
                 __CFD14:
00052f 9576      	LSR  R23
000530 9567      	ROR  R22
000531 95f7      	ROR  R31
000532 95e7      	ROR  R30
000533 955a      	DEC  R21
000534 f7d1      	BRNE __CFD14
                 __CFD15:
000535 2000      	TST  R0
000536 f40a      	BRPL __CFD16
000537 d142      	RCALL __ANEGD1
                 __CFD16:
000538 915f      	POP  R21
000539 9508      	RET
                 
                 __CDF1U:
00053a 9468      	SET
00053b c001      	RJMP __CDF1U0
                 __CDF1:
00053c 94e8      	CLT
                 __CDF1U0:
00053d 9730      	SBIW R30,0
00053e 4060      	SBCI R22,0
00053f 4070      	SBCI R23,0
000540 f0b1      	BREQ __CDF10
000541 2400      	CLR  R0
000542 f026      	BRTS __CDF11
000543 2377      	TST  R23
000544 f412      	BRPL __CDF11
000545 9400      	COM  R0
000546 d133      	RCALL __ANEGD1
                 __CDF11:
000547 2e17      	MOV  R1,R23
000548 e17e      	LDI  R23,30
000549 2011      	TST  R1
                 __CDF12:
00054a f032      	BRMI __CDF13
00054b 957a      	DEC  R23
00054c 0fee      	LSL  R30
00054d 1fff      	ROL  R31
00054e 1f66      	ROL  R22
00054f 1c11      	ROL  R1
000550 cff9      	RJMP __CDF12
                 __CDF13:
000551 2fef      	MOV  R30,R31
000552 2ff6      	MOV  R31,R22
000553 2d61      	MOV  R22,R1
000554 935f      	PUSH R21
000555 df8a      	RCALL __REPACK
000556 915f      	POP  R21
                 __CDF10:
000557 9508      	RET
                 
                 __SWAPACC:
000558 934f      	PUSH R20
000559 01af      	MOVW R20,R30
00055a 01fd      	MOVW R30,R26
00055b 01da      	MOVW R26,R20
00055c 01ab      	MOVW R20,R22
00055d 01bc      	MOVW R22,R24
00055e 01ca      	MOVW R24,R20
00055f 2d40      	MOV  R20,R0
000560 2c01      	MOV  R0,R1
000561 2e14      	MOV  R1,R20
000562 914f      	POP  R20
000563 9508      	RET
                 
                 __UADD12:
000564 0fea      	ADD  R30,R26
000565 1ffb      	ADC  R31,R27
000566 1f68      	ADC  R22,R24
000567 9508      	RET
                 
                 __NEGMAN1:
000568 95e0      	COM  R30
000569 95f0      	COM  R31
00056a 9560      	COM  R22
00056b 5fef      	SUBI R30,-1
00056c 4fff      	SBCI R31,-1
00056d 4f6f      	SBCI R22,-1
00056e 9508      	RET
                 
                 __ADDF12:
00056f 935f      	PUSH R21
000570 df81      	RCALL __UNPACK
000571 3890      	CPI  R25,0x80
000572 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000573 3870      	CPI  R23,0x80
000574 f121      	BREQ __ADDF128
                 __ADDF121:
000575 2f57      	MOV  R21,R23
000576 1b59      	SUB  R21,R25
000577 f12b      	BRVS __ADDF1211
000578 f412      	BRPL __ADDF122
000579 dfde      	RCALL __SWAPACC
00057a cffa      	RJMP __ADDF121
                 __ADDF122:
00057b 3158      	CPI  R21,24
00057c f018      	BRLO __ADDF123
00057d 27aa      	CLR  R26
00057e 27bb      	CLR  R27
00057f 2788      	CLR  R24
                 __ADDF123:
000580 3058      	CPI  R21,8
000581 f028      	BRLO __ADDF124
000582 2fab      	MOV  R26,R27
000583 2fb8      	MOV  R27,R24
000584 2788      	CLR  R24
000585 5058      	SUBI R21,8
000586 cff9      	RJMP __ADDF123
                 __ADDF124:
000587 2355      	TST  R21
000588 f029      	BREQ __ADDF126
                 __ADDF125:
000589 9586      	LSR  R24
00058a 95b7      	ROR  R27
00058b 95a7      	ROR  R26
00058c 955a      	DEC  R21
00058d f7d9      	BRNE __ADDF125
                 __ADDF126:
00058e 2d50      	MOV  R21,R0
00058f 2551      	EOR  R21,R1
000590 f072      	BRMI __ADDF127
000591 dfd2      	RCALL __UADD12
000592 f438      	BRCC __ADDF129
000593 9567      	ROR  R22
000594 95f7      	ROR  R31
000595 95e7      	ROR  R30
000596 9573      	INC  R23
000597 f413      	BRVC __ADDF129
000598 c020      	RJMP __MAXRES
                 __ADDF128:
000599 dfbe      	RCALL __SWAPACC
                 __ADDF129:
00059a df45      	RCALL __REPACK
00059b 915f      	POP  R21
00059c 9508      	RET
                 __ADDF1211:
00059d f7d8      	BRCC __ADDF128
00059e cffb      	RJMP __ADDF129
                 __ADDF127:
00059f 1bea      	SUB  R30,R26
0005a0 0bfb      	SBC  R31,R27
0005a1 0b68      	SBC  R22,R24
0005a2 f051      	BREQ __ZERORES
0005a3 f410      	BRCC __ADDF1210
0005a4 9400      	COM  R0
0005a5 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
0005a6 2366      	TST  R22
0005a7 f392      	BRMI __ADDF129
0005a8 0fee      	LSL  R30
0005a9 1fff      	ROL  R31
0005aa 1f66      	ROL  R22
0005ab 957a      	DEC  R23
0005ac f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0005ad 27ee      	CLR  R30
0005ae 27ff      	CLR  R31
0005af 2766      	CLR  R22
0005b0 2777      	CLR  R23
0005b1 915f      	POP  R21
0005b2 9508      	RET
                 
                 __MINRES:
0005b3 efef      	SER  R30
0005b4 efff      	SER  R31
0005b5 e76f      	LDI  R22,0x7F
0005b6 ef7f      	SER  R23
0005b7 915f      	POP  R21
0005b8 9508      	RET
                 
                 __MAXRES:
0005b9 efef      	SER  R30
0005ba efff      	SER  R31
0005bb e76f      	LDI  R22,0x7F
0005bc e77f      	LDI  R23,0x7F
0005bd 915f      	POP  R21
0005be 9508      	RET
                 
                 __MULF12:
0005bf 935f      	PUSH R21
0005c0 df31      	RCALL __UNPACK
0005c1 3870      	CPI  R23,0x80
0005c2 f351      	BREQ __ZERORES
0005c3 3890      	CPI  R25,0x80
0005c4 f341      	BREQ __ZERORES
0005c5 2401      	EOR  R0,R1
0005c6 9408      	SEC
0005c7 1f79      	ADC  R23,R25
0005c8 f423      	BRVC __MULF124
0005c9 f31c      	BRLT __ZERORES
                 __MULF125:
0005ca 2000      	TST  R0
0005cb f33a      	BRMI __MINRES
0005cc cfec      	RJMP __MAXRES
                 __MULF124:
0005cd 920f      	PUSH R0
0005ce 931f      	PUSH R17
0005cf 932f      	PUSH R18
0005d0 933f      	PUSH R19
0005d1 934f      	PUSH R20
0005d2 2711      	CLR  R17
0005d3 2722      	CLR  R18
0005d4 2799      	CLR  R25
0005d5 9f68      	MUL  R22,R24
0005d6 01a0      	MOVW R20,R0
0005d7 9f8f      	MUL  R24,R31
0005d8 2d30      	MOV  R19,R0
0005d9 0d41      	ADD  R20,R1
0005da 1f59      	ADC  R21,R25
0005db 9f6b      	MUL  R22,R27
0005dc 0d30      	ADD  R19,R0
0005dd 1d41      	ADC  R20,R1
0005de 1f59      	ADC  R21,R25
0005df 9f8e      	MUL  R24,R30
0005e0 d027      	RCALL __MULF126
0005e1 9fbf      	MUL  R27,R31
0005e2 d025      	RCALL __MULF126
0005e3 9f6a      	MUL  R22,R26
0005e4 d023      	RCALL __MULF126
0005e5 9fbe      	MUL  R27,R30
0005e6 d01d      	RCALL __MULF127
0005e7 9faf      	MUL  R26,R31
0005e8 d01b      	RCALL __MULF127
0005e9 9fae      	MUL  R26,R30
0005ea 0d11      	ADD  R17,R1
0005eb 1f29      	ADC  R18,R25
0005ec 1f39      	ADC  R19,R25
0005ed 1f49      	ADC  R20,R25
0005ee 1f59      	ADC  R21,R25
0005ef 2fe3      	MOV  R30,R19
0005f0 2ff4      	MOV  R31,R20
0005f1 2f65      	MOV  R22,R21
0005f2 2f52      	MOV  R21,R18
0005f3 914f      	POP  R20
0005f4 913f      	POP  R19
0005f5 912f      	POP  R18
0005f6 911f      	POP  R17
0005f7 900f      	POP  R0
0005f8 2366      	TST  R22
0005f9 f02a      	BRMI __MULF122
0005fa 0f55      	LSL  R21
0005fb 1fee      	ROL  R30
0005fc 1fff      	ROL  R31
0005fd 1f66      	ROL  R22
0005fe c002      	RJMP __MULF123
                 __MULF122:
0005ff 9573      	INC  R23
000600 f24b      	BRVS __MULF125
                 __MULF123:
000601 ded4      	RCALL __ROUND_REPACK
000602 915f      	POP  R21
000603 9508      	RET
                 
                 __MULF127:
000604 0d10      	ADD  R17,R0
000605 1d21      	ADC  R18,R1
000606 1f39      	ADC  R19,R25
000607 c002      	RJMP __MULF128
                 __MULF126:
000608 0d20      	ADD  R18,R0
000609 1d31      	ADC  R19,R1
                 __MULF128:
00060a 1f49      	ADC  R20,R25
00060b 1f59      	ADC  R21,R25
00060c 9508      	RET
                 
                 __DIVF21:
00060d 935f      	PUSH R21
00060e dee3      	RCALL __UNPACK
00060f 3870      	CPI  R23,0x80
000610 f421      	BRNE __DIVF210
000611 2011      	TST  R1
                 __DIVF211:
000612 f40a      	BRPL __DIVF219
000613 cf9f      	RJMP __MINRES
                 __DIVF219:
000614 cfa4      	RJMP __MAXRES
                 __DIVF210:
000615 3890      	CPI  R25,0x80
000616 f409      	BRNE __DIVF218
                 __DIVF217:
000617 cf95      	RJMP __ZERORES
                 __DIVF218:
000618 2401      	EOR  R0,R1
000619 9408      	SEC
00061a 0b97      	SBC  R25,R23
00061b f41b      	BRVC __DIVF216
00061c f3d4      	BRLT __DIVF217
00061d 2000      	TST  R0
00061e cff3      	RJMP __DIVF211
                 __DIVF216:
00061f 2f79      	MOV  R23,R25
000620 931f      	PUSH R17
000621 932f      	PUSH R18
000622 933f      	PUSH R19
000623 934f      	PUSH R20
000624 2411      	CLR  R1
000625 2711      	CLR  R17
000626 2722      	CLR  R18
000627 2733      	CLR  R19
000628 2744      	CLR  R20
000629 2755      	CLR  R21
00062a e290      	LDI  R25,32
                 __DIVF212:
00062b 17ae      	CP   R26,R30
00062c 07bf      	CPC  R27,R31
00062d 0786      	CPC  R24,R22
00062e 0741      	CPC  R20,R17
00062f f030      	BRLO __DIVF213
000630 1bae      	SUB  R26,R30
000631 0bbf      	SBC  R27,R31
000632 0b86      	SBC  R24,R22
000633 0b41      	SBC  R20,R17
000634 9408      	SEC
000635 c001      	RJMP __DIVF214
                 __DIVF213:
000636 9488      	CLC
                 __DIVF214:
000637 1f55      	ROL  R21
000638 1f22      	ROL  R18
000639 1f33      	ROL  R19
00063a 1c11      	ROL  R1
00063b 1faa      	ROL  R26
00063c 1fbb      	ROL  R27
00063d 1f88      	ROL  R24
00063e 1f44      	ROL  R20
00063f 959a      	DEC  R25
000640 f751      	BRNE __DIVF212
000641 01f9      	MOVW R30,R18
000642 2d61      	MOV  R22,R1
000643 914f      	POP  R20
000644 913f      	POP  R19
000645 912f      	POP  R18
000646 911f      	POP  R17
000647 2366      	TST  R22
000648 f032      	BRMI __DIVF215
000649 0f55      	LSL  R21
00064a 1fee      	ROL  R30
00064b 1fff      	ROL  R31
00064c 1f66      	ROL  R22
00064d 957a      	DEC  R23
00064e f243      	BRVS __DIVF217
                 __DIVF215:
00064f de86      	RCALL __ROUND_REPACK
000650 915f      	POP  R21
000651 9508      	RET
                 
                 __CMPF12:
000652 2399      	TST  R25
000653 f09a      	BRMI __CMPF120
000654 2377      	TST  R23
000655 f042      	BRMI __CMPF121
000656 1797      	CP   R25,R23
000657 f048      	BRLO __CMPF122
000658 f429      	BRNE __CMPF121
000659 17ae      	CP   R26,R30
00065a 07bf      	CPC  R27,R31
00065b 0786      	CPC  R24,R22
00065c f020      	BRLO __CMPF122
00065d f031      	BREQ __CMPF123
                 __CMPF121:
00065e 9498      	CLZ
00065f 9488      	CLC
000660 9508      	RET
                 __CMPF122:
000661 9498      	CLZ
000662 9408      	SEC
000663 9508      	RET
                 __CMPF123:
000664 9418      	SEZ
000665 9488      	CLC
000666 9508      	RET
                 __CMPF120:
000667 2377      	TST  R23
000668 f7c2      	BRPL __CMPF122
000669 1797      	CP   R25,R23
00066a f398      	BRLO __CMPF121
00066b f7a9      	BRNE __CMPF122
00066c 17ea      	CP   R30,R26
00066d 07fb      	CPC  R31,R27
00066e 0768      	CPC  R22,R24
00066f f388      	BRLO __CMPF122
000670 f399      	BREQ __CMPF123
000671 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000672 2400      	CLR  R0
000673 0daf      	ADD  R26,R15
000674 1db0      	ADC  R27,R0
000675 9508      	RET
                 
                 __ANEGW1:
000676 95f1      	NEG  R31
000677 95e1      	NEG  R30
000678 40f0      	SBCI R31,0
000679 9508      	RET
                 
                 __ANEGD1:
00067a 95f0      	COM  R31
00067b 9560      	COM  R22
00067c 9570      	COM  R23
00067d 95e1      	NEG  R30
00067e 4fff      	SBCI R31,-1
00067f 4f6f      	SBCI R22,-1
000680 4f7f      	SBCI R23,-1
000681 9508      	RET
                 
                 __CWD1:
000682 2f6f      	MOV  R22,R31
000683 0f66      	ADD  R22,R22
000684 0b66      	SBC  R22,R22
000685 2f76      	MOV  R23,R22
000686 9508      	RET
                 
                 __GETW1P:
000687 91ed      	LD   R30,X+
000688 91fc      	LD   R31,X
000689 9711      	SBIW R26,1
00068a 9508      	RET
                 
                 __GETW1PF:
00068b 9005      	LPM  R0,Z+
00068c 91f4      	LPM  R31,Z
00068d 2de0      	MOV  R30,R0
00068e 9508      	RET
                 
                 __PUTPARD1:
00068f 937a      	ST   -Y,R23
000690 936a      	ST   -Y,R22
000691 93fa      	ST   -Y,R31
000692 93ea      	ST   -Y,R30
000693 9508      	RET
                 
                 __SAVELOCR6:
000694 935a      	ST   -Y,R21
                 __SAVELOCR5:
000695 934a      	ST   -Y,R20
                 __SAVELOCR4:
000696 933a      	ST   -Y,R19
                 __SAVELOCR3:
000697 932a      	ST   -Y,R18
                 __SAVELOCR2:
000698 931a      	ST   -Y,R17
000699 930a      	ST   -Y,R16
00069a 9508      	RET
                 
                 __LOADLOCR6:
00069b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00069c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00069d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00069e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00069f 8119      	LDD  R17,Y+1
0006a0 8108      	LD   R16,Y
0006a1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  33 r1 :  21 r2 :   0 r3 :   0 r4 :   6 r5 :   4 r6 :  11 r7 :   4 
r8 :   4 r9 :   1 r10:   2 r11:   0 r12:   3 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  34 r18:  41 r19:  20 r20:  31 r21:  77 r22:  61 r23:  48 
r24:  57 r25:  37 r26: 148 r27:  68 r28:  15 r29:   1 r30: 280 r31: 113 
x  :  25 y  : 187 z  :  17 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  13 
adiw  :  28 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   1 break :   0 breq  :  30 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  19 
brlt  :   3 brmi  :  10 brne  :  42 brpl  :   9 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  :  99 
cbi   :   5 cbr   :   0 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  35 cls   :   0 clt   :   2 clv   :   0 clz   :   2 com   :   8 
cp    :  11 cpc   :  11 cpi   :  49 cpse  :   0 dec   :  14 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   2 jmp   :  26 ld    :  33 ldd   :  75 ldi   : 166 
lds   :  12 lpm   :  14 lsl   :  14 lsr   :   2 mov   :  41 movw  :  46 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   8 out   :  32 pop   :  19 push  :  18 rcall :  41 ret   :  54 
reti  :   1 rjmp  :  88 rol   :  27 ror   :  12 sbc   :   9 sbci  :   9 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   4 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  77 std   :  32 sts   :  15 sub   :   6 subi  :  23 swap  :   1 
tst   :  22 wdr   :   1 
Instructions used: 79 out of 116 (68.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d44   3212    184   3396   16384  20.7%
[.dseg] 0x000060 0x0001c0      0     96     96    1024   9.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
