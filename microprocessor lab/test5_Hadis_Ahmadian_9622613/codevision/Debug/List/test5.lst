
AVRASM ver. 2.1.30  E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm Fri Nov 06 21:14:37 2020

E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1094): warning: Register r11 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1095): warning: Register r10 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1096): warning: Register r13 already defined by the .DEF directive
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _duty_cycle=R4
                 	.DEF _duty_cycle_msb=R5
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _round=R8
                 	.DEF _round_msb=R9
                 	.DEF _active=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00cc 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0193 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x20003:
000035 0010
000036 0020
000037 0040
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1139): warning: .cseg .db misalignment - padding zero byte
000038 0080      	.DB  0x10,0x0,0x20,0x0,0x40,0x0,0x80
                 _0x20000:
000039 7571
00003a 7365
00003b 6974
00003c 6e6f      	.DB  0x71,0x75,0x65,0x73,0x74,0x69,0x6F,0x6E
00003d 3120
00003e 3a20
00003f 640a
000040 7475      	.DB  0x20,0x31,0x20,0x3A,0xA,0x64,0x75,0x74
000041 3a79
000042 3031
000043 0025
000044 7571      	.DB  0x79,0x3A,0x31,0x30,0x25,0x0,0x71,0x75
000045 7365
000046 6974
000047 6e6f
000048 3120      	.DB  0x65,0x73,0x74,0x69,0x6F,0x6E,0x20,0x31
000049 3a20
00004a 640a
00004b 7475
00004c 3a79      	.DB  0x20,0x3A,0xA,0x64,0x75,0x74,0x79,0x3A
00004d 3033
00004e 0025
00004f 7571
000050 7365      	.DB  0x33,0x30,0x25,0x0,0x71,0x75,0x65,0x73
000051 6974
000052 6e6f
000053 3120
000054 3a20      	.DB  0x74,0x69,0x6F,0x6E,0x20,0x31,0x20,0x3A
000055 640a
000056 7475
000057 3a79
000058 3035      	.DB  0xA,0x64,0x75,0x74,0x79,0x3A,0x35,0x30
000059 0025
00005a 7571
00005b 7365
00005c 6974      	.DB  0x25,0x0,0x71,0x75,0x65,0x73,0x74,0x69
00005d 6e6f
00005e 3120
00005f 3a20
000060 640a      	.DB  0x6F,0x6E,0x20,0x31,0x20,0x3A,0xA,0x64
000061 7475
000062 3a79
000063 3037
000064 0025      	.DB  0x75,0x74,0x79,0x3A,0x37,0x30,0x25,0x0
000065 7571
000066 7365
000067 6974
000068 6e6f      	.DB  0x71,0x75,0x65,0x73,0x74,0x69,0x6F,0x6E
000069 3120
00006a 3a20
00006b 640a
00006c 7475      	.DB  0x20,0x31,0x20,0x3A,0xA,0x64,0x75,0x74
00006d 3a79
00006e 3039
00006f 0025
000070 7571      	.DB  0x79,0x3A,0x39,0x30,0x25,0x0,0x71,0x75
000071 7365
000072 6974
000073 6e6f
000074 3320      	.DB  0x65,0x73,0x74,0x69,0x6F,0x6E,0x20,0x33
000075 3a20
000076 000a
000077 6425
000078 6400      	.DB  0x20,0x3A,0xA,0x0,0x25,0x64,0x0,0x64
000079 7475
00007a 3d79
00007b 0020
00007c 7571      	.DB  0x75,0x74,0x79,0x3D,0x20,0x0,0x71,0x75
00007d 7365
00007e 6974
00007f 6e6f
000080 2f34      	.DB  0x65,0x73,0x74,0x69,0x6F,0x6E,0x34,0x2F
000081 7073
000082 6565
000083 3a64
000084 000a      	.DB  0x73,0x70,0x65,0x65,0x64,0x3A,0xA,0x0
000085 3634
000086 2e38
000087 3537
000088 7220      	.DB  0x34,0x36,0x38,0x2E,0x37,0x35,0x20,0x72
000089 6d70
00008a 5220
00008b 4749
00008c 5448      	.DB  0x70,0x6D,0x20,0x52,0x49,0x47,0x48,0x54
00008d 3000
00008e 7220
00008f 6d70
000090 2020      	.DB  0x0,0x30,0x20,0x72,0x70,0x6D,0x20,0x20
000091 2020
000092 5320
000093 4f54
000094 2050      	.DB  0x20,0x20,0x20,0x53,0x54,0x4F,0x50,0x20
000095 2020
000096 3400
000097 3836
000098 372e      	.DB  0x20,0x20,0x0,0x34,0x36,0x38,0x2E,0x37
000099 2035
00009a 7072
00009b 206d
00009c 454c      	.DB  0x35,0x20,0x72,0x70,0x6D,0x20,0x4C,0x45
00009d 5446
00009e 2020
E:\project\test5_Hadis_Ahmadian_9622613\codevision\Debug\List\test5.asm(1166): warning: .cseg .db misalignment - padding zero byte
00009f 0000      	.DB  0x46,0x54,0x20,0x20,0x0
                 _0x2000003:
0000a0 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000a1 0004      	.DW  0x04
0000a2 0008      	.DW  0x08
0000a3 0066      	.DW  __REG_VARS*2
                 
0000a4 0007      	.DW  0x07
0000a5 022a      	.DW  _coils
0000a6 006a      	.DW  _0x20003*2
                 
0000a7 0016      	.DW  0x16
0000a8 0160      	.DW  _0x20004
0000a9 0072      	.DW  _0x20000*2
                 
0000aa 0016      	.DW  0x16
0000ab 0176      	.DW  _0x20004+22
0000ac 0088      	.DW  _0x20000*2+22
                 
0000ad 0016      	.DW  0x16
0000ae 018c      	.DW  _0x20004+44
0000af 009e      	.DW  _0x20000*2+44
                 
0000b0 0016      	.DW  0x16
0000b1 01a2      	.DW  _0x20004+66
0000b2 00b4      	.DW  _0x20000*2+66
                 
0000b3 0016      	.DW  0x16
0000b4 01b8      	.DW  _0x20004+88
0000b5 00ca      	.DW  _0x20000*2+88
                 
0000b6 000e      	.DW  0x0E
0000b7 01ce      	.DW  _0x20005
0000b8 00e0      	.DW  _0x20000*2+110
                 
0000b9 0007      	.DW  0x07
0000ba 01dc      	.DW  _0x20005+14
0000bb 00f1      	.DW  _0x20000*2+127
                 
0000bc 0012      	.DW  0x12
0000bd 01e3      	.DW  _0x20007
0000be 00f8      	.DW  _0x20000*2+134
                 
0000bf 0011      	.DW  0x11
0000c0 01f5      	.DW  _0x20007+18
0000c1 010a      	.DW  _0x20000*2+152
                 
0000c2 0012      	.DW  0x12
0000c3 0206      	.DW  _0x20007+35
0000c4 011b      	.DW  _0x20000*2+169
                 
0000c5 0012      	.DW  0x12
0000c6 0218      	.DW  _0x20007+53
0000c7 012d      	.DW  _0x20000*2+187
                 
0000c8 0002      	.DW  0x02
0000c9 0238      	.DW  __base_y_G100
0000ca 0140      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000cb 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000cc 94f8      	CLI
0000cd 27ee      	CLR  R30
0000ce bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000cf e0f1      	LDI  R31,1
0000d0 bffb      	OUT  GICR,R31
0000d1 bfeb      	OUT  GICR,R30
0000d2 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000d3 e08d      	LDI  R24,(14-2)+1
0000d4 e0a2      	LDI  R26,2
0000d5 27bb      	CLR  R27
                 __CLEAR_REG:
0000d6 93ed      	ST   X+,R30
0000d7 958a      	DEC  R24
0000d8 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d9 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000da e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000db e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000dc 93ed      	ST   X+,R30
0000dd 9701      	SBIW R24,1
0000de f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000df e4e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000e0 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e1 9185      	LPM  R24,Z+
0000e2 9195      	LPM  R25,Z+
0000e3 9700      	SBIW R24,0
0000e4 f061      	BREQ __GLOBAL_INI_END
0000e5 91a5      	LPM  R26,Z+
0000e6 91b5      	LPM  R27,Z+
0000e7 9005      	LPM  R0,Z+
0000e8 9015      	LPM  R1,Z+
0000e9 01bf      	MOVW R22,R30
0000ea 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000eb 9005      	LPM  R0,Z+
0000ec 920d      	ST   X+,R0
0000ed 9701      	SBIW R24,1
0000ee f7e1      	BRNE __GLOBAL_INI_LOOP
0000ef 01fb      	MOVW R30,R22
0000f0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f1 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f2 bfed      	OUT  SPL,R30
0000f3 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f5 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f6 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f7 940c 00f9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <source.h>
                 ;
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005 
                 ; 0000 0006 init_all();
0000f9 d023      	RCALL _init_all
                 ; 0000 0007 #asm("sei")
0000fa 9478      	sei
                 ; 0000 0008 one();
0000fb d026      	RCALL _one
                 ; 0000 0009 three();
0000fc d06d      	RCALL _three
                 ; 0000 000A four();
0000fd d090      	RCALL _four
                 ; 0000 000B 
                 ; 0000 000C 
                 ; 0000 000D }
                 _0x3:
0000fe cfff      	RJMP _0x3
                 ; .FEND
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;int duty_cycle;
                 ;int coils[7]={0X10,0X20,0X40,0X80,0};
                 
                 	.DSEG
                 ;int i;
                 ;int round=0;
                 ;char active=0;
                 ;
                 ;void port_init()
                 ;{
                 
                 	.CSEG
                 _port_init:
                 ; .FSTART _port_init
                 ; 0001 000E 
                 ; 0001 000F     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000ff e0e0      	LDI  R30,LOW(0)
000100 bbea      	OUT  0x1A,R30
                 ; 0001 0010     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000101 bbeb      	OUT  0x1B,R30
                 ; 0001 0011 
                 ; 0001 0012     DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000102 efef      	LDI  R30,LOW(255)
000103 bbe7      	OUT  0x17,R30
                 ; 0001 0013     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000104 e0e0      	LDI  R30,LOW(0)
000105 bbe8      	OUT  0x18,R30
                 ; 0001 0014 
                 ; 0001 0015     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000106 efef      	LDI  R30,LOW(255)
000107 bbe4      	OUT  0x14,R30
                 ; 0001 0016     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000108 e0e0      	LDI  R30,LOW(0)
000109 bbe5      	OUT  0x15,R30
                 ; 0001 0017 
                 ; 0001 0018     DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00010a efef      	LDI  R30,LOW(255)
00010b bbe1      	OUT  0x11,R30
                 ; 0001 0019     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00010c e0e0      	LDI  R30,LOW(0)
00010d bbe2      	OUT  0x12,R30
                 ; 0001 001A 
                 ; 0001 001B }
00010e 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void timer_init()
                 ; 0001 001F {
                 _timer_init:
                 ; .FSTART _timer_init
                 ; 0001 0020 // Timer/Counter 0 initialization
                 ; 0001 0021 // Mode: Phase correct PWM top=0xFF
                 ; 0001 0022 // OC0 output: Non-Inverted PWM
                 ; 0001 0023 // Timer Period: 65.28 ms
                 ; 0001 0024 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00010f e6e5      	LDI  R30,LOW(101)
000110 bfe3      	OUT  0x33,R30
                 ; 0001 0025 TCNT0=0x00;
000111 e0e0      	LDI  R30,LOW(0)
000112 bfe2      	OUT  0x32,R30
                 ; 0001 0026 
                 ; 0001 0027 
                 ; 0001 0028 
                 ; 0001 0029 // Timer/Counter 2 initialization
                 ; 0001 002A // Mode: Normal top=0xFF
                 ; 0001 002B // OC2 output: Disconnected
                 ; 0001 002C // Timer Period: 32 ms
                 ; 0001 002D ASSR=0<<AS2;
000113 bde2      	OUT  0x22,R30
                 ; 0001 002E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
000114 e0e7      	LDI  R30,LOW(7)
000115 bde5      	OUT  0x25,R30
                 ; 0001 002F TCNT2=0x06;
000116 e0e6      	LDI  R30,LOW(6)
000117 bde4      	OUT  0x24,R30
                 ; 0001 0030 OCR2=0x00;
000118 e0e0      	LDI  R30,LOW(0)
000119 bde3      	OUT  0x23,R30
                 ; 0001 0031 
                 ; 0001 0032 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 0033 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00011a e4e0      	LDI  R30,LOW(64)
00011b bfe9      	OUT  0x39,R30
                 ; 0001 0034 
                 ; 0001 0035 
                 ; 0001 0036 
                 ; 0001 0037 }
00011c 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void init_all()
                 ; 0001 003B {
                 _init_all:
                 ; .FSTART _init_all
                 ; 0001 003C port_init();
00011d dfe1      	RCALL _port_init
                 ; 0001 003D timer_init();
00011e dff0      	RCALL _timer_init
                 ; 0001 003E lcd_init(16);
00011f e1a0      	LDI  R26,LOW(16)
000120 d14b      	RCALL _lcd_init
                 ; 0001 003F }
000121 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void one()
                 ; 0001 0044 {
                 _one:
                 ; .FSTART _one
                 ; 0001 0045 
                 ; 0001 0046 OCR0=0x1A;// duty=10;
000122 e1ea      	LDI  R30,LOW(26)
000123 bfec      	OUT  0x3C,R30
                 ; 0001 0047 lcd_clear();
000124 d115      	RCALL _lcd_clear
                 ; 0001 0048 lcd_puts("question 1 :\nduty:10%");
                +
000125 e6a0     +LDI R26 , LOW ( _0x20004 + ( 0 ) )
000126 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 0 ) )
                 	__POINTW2MN _0x20004,0
000127 940e 045b 	CALL SUBOPT_0x0
                 ; 0001 0049 delay_ms(2000);
                 ; 0001 004A 
                 ; 0001 004B OCR0=0x4D;// duty=30
000129 e4ed      	LDI  R30,LOW(77)
00012a bfec      	OUT  0x3C,R30
                 ; 0001 004C lcd_clear();
00012b d10e      	RCALL _lcd_clear
                 ; 0001 004D lcd_puts("question 1 :\nduty:30%");
                +
00012c e7a6     +LDI R26 , LOW ( _0x20004 + ( 22 ) )
00012d e0b1     +LDI R27 , HIGH ( _0x20004 + ( 22 ) )
                 	__POINTW2MN _0x20004,22
00012e 940e 045b 	CALL SUBOPT_0x0
                 ; 0001 004E delay_ms(2000);
                 ; 0001 004F 
                 ; 0001 0050 OCR0=0x80;// duty=50
000130 e8e0      	LDI  R30,LOW(128)
000131 bfec      	OUT  0x3C,R30
                 ; 0001 0051 lcd_clear();
000132 d107      	RCALL _lcd_clear
                 ; 0001 0052 lcd_puts("question 1 :\nduty:50%");
                +
000133 e8ac     +LDI R26 , LOW ( _0x20004 + ( 44 ) )
000134 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 44 ) )
                 	__POINTW2MN _0x20004,44
000135 940e 045b 	CALL SUBOPT_0x0
                 ; 0001 0053 delay_ms(2000);
                 ; 0001 0054 
                 ; 0001 0055 OCR0=0xB2; // duty=70
000137 ebe2      	LDI  R30,LOW(178)
000138 bfec      	OUT  0x3C,R30
                 ; 0001 0056 lcd_clear();
000139 d100      	RCALL _lcd_clear
                 ; 0001 0057 lcd_puts("question 1 :\nduty:70%");
                +
00013a eaa2     +LDI R26 , LOW ( _0x20004 + ( 66 ) )
00013b e0b1     +LDI R27 , HIGH ( _0x20004 + ( 66 ) )
                 	__POINTW2MN _0x20004,66
00013c 940e 045b 	CALL SUBOPT_0x0
                 ; 0001 0058 delay_ms(2000);
                 ; 0001 0059 
                 ; 0001 005A OCR0=0xE5;// duty=90
00013e eee5      	LDI  R30,LOW(229)
00013f bfec      	OUT  0x3C,R30
                 ; 0001 005B lcd_clear();
000140 d0f9      	RCALL _lcd_clear
                 ; 0001 005C lcd_puts("question 1 :\nduty:90%");
                +
000141 eba8     +LDI R26 , LOW ( _0x20004 + ( 88 ) )
000142 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 88 ) )
                 	__POINTW2MN _0x20004,88
000143 940e 045b 	CALL SUBOPT_0x0
                 ; 0001 005D delay_ms(2000);
                 ; 0001 005E 
                 ; 0001 005F }
000145 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20004:
000160           	.BYTE 0x6E
                 ;
                 ;
                 ;int calculate(int number)
                 ; 0001 0063 {
                 
                 	.CSEG
                 _calculate:
                 ; .FSTART _calculate
                 ; 0001 0064     duty_cycle=((90.0/255.0)*number)+5;
000146 93ba      	ST   -Y,R27
000147 93aa      	ST   -Y,R26
                 ;	number -> Y+0
000148 81e8      	LD   R30,Y
000149 81f9      	LDD  R31,Y+1
00014a 940e 05ec 	CALL __CWD1
00014c 940e 050b 	CALL __CDF1
                +
00014e eba5     +LDI R26 , LOW ( 0x3EB4B4B5 )
00014f ebb4     +LDI R27 , HIGH ( 0x3EB4B4B5 )
000150 eb84     +LDI R24 , BYTE3 ( 0x3EB4B4B5 )
000151 e39e     +LDI R25 , BYTE4 ( 0x3EB4B4B5 )
                 	__GETD2N 0x3EB4B4B5
000152 940e 058e 	CALL __MULF12
                +
000154 e0a0     +LDI R26 , LOW ( 0x40A00000 )
000155 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000156 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000157 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000158 940e 053e 	CALL __ADDF12
00015a 940e 04d4 	CALL __CFD1
00015c 012f      	MOVW R4,R30
                 ; 0001 0065     return 2.55 * duty_cycle;
00015d 940e 05ec 	CALL __CWD1
00015f 940e 050b 	CALL __CDF1
                +
000161 e3a3     +LDI R26 , LOW ( 0x40233333 )
000162 e3b3     +LDI R27 , HIGH ( 0x40233333 )
000163 e283     +LDI R24 , BYTE3 ( 0x40233333 )
000164 e490     +LDI R25 , BYTE4 ( 0x40233333 )
                 	__GETD2N 0x40233333
000165 940e 058e 	CALL __MULF12
000167 940e 04d4 	CALL __CFD1
000169 c0ce      	RJMP _0x2080003
                 ; 0001 0066 }
                 ; .FEND
                 ;
                 ;void three()
                 ; 0001 0069 {
                 _three:
                 ; .FSTART _three
                 ; 0001 006A     char tmp[2];
                 ; 0001 006B     lcd_clear();
00016a 9722      	SBIW R28,2
                 ;	tmp -> Y+0
00016b d0ce      	RCALL _lcd_clear
                 ; 0001 006C     lcd_puts("question 3 :\n");
                +
00016c ecae     +LDI R26 , LOW ( _0x20005 + ( 0 ) )
00016d e0b1     +LDI R27 , HIGH ( _0x20005 + ( 0 ) )
                 	__POINTW2MN _0x20005,0
00016e d0ec      	RCALL _lcd_puts
                 ; 0001 006D     OCR0=  calculate(PINA);
00016f b3e9      	IN   R30,0x19
000170 e0f0      	LDI  R31,0
000171 01df      	MOVW R26,R30
000172 dfd3      	RCALL _calculate
000173 bfec      	OUT  0x3C,R30
                 ; 0001 006E     sprintf(tmp, "%d", duty_cycle);
000174 01fe      	MOVW R30,R28
000175 93fa      	ST   -Y,R31
000176 93ea      	ST   -Y,R30
                +
000177 eeee     +LDI R30 , LOW ( 2 * _0x20000 + ( 124 ) )
000178 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 124 ) )
                 	__POINTW1FN _0x20000,124
000179 93fa      	ST   -Y,R31
00017a 93ea      	ST   -Y,R30
00017b 01f2      	MOVW R30,R4
00017c 940e 05ec 	CALL __CWD1
00017e 940e 05f9 	CALL __PUTPARD1
000180 e084      	LDI  R24,4
000181 940e 040e 	CALL _sprintf
000183 9628      	ADIW R28,8
                 ; 0001 006F     lcd_puts("duty= ");
                +
000184 edac     +LDI R26 , LOW ( _0x20005 + ( 14 ) )
000185 e0b1     +LDI R27 , HIGH ( _0x20005 + ( 14 ) )
                 	__POINTW2MN _0x20005,14
000186 d0d4      	RCALL _lcd_puts
                 ; 0001 0070     lcd_puts(tmp);
000187 01de      	MOVW R26,R28
000188 d0d2      	RCALL _lcd_puts
                 ; 0001 0071     delay_ms(5000);
000189 e8a8      	LDI  R26,LOW(5000)
00018a e1b3      	LDI  R27,HIGH(5000)
00018b 940e 049b 	CALL _delay_ms
                 ; 0001 0072 
                 ; 0001 0073 }
00018d c0aa      	RJMP _0x2080003
                 ; .FEND
                 
                 	.DSEG
                 _0x20005:
0001ce           	.BYTE 0x15
                 ;
                 ;
                 ;
                 ;
                 ;void four()
                 ; 0001 0079 {
                 
                 	.CSEG
                 _four:
                 ; .FSTART _four
                 ; 0001 007A active=1;
00018e e0e1      	LDI  R30,LOW(1)
00018f 2ebe      	MOV  R11,R30
                 ; 0001 007B i=0;
000190 2466      	CLR  R6
000191 2477      	CLR  R7
                 ; 0001 007C }
000192 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void){
                 ; 0001 0080 interrupt [5] void timer2_ovf_isr(void){
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000193 920a      	ST   -Y,R0
000194 921a      	ST   -Y,R1
000195 92fa      	ST   -Y,R15
000196 936a      	ST   -Y,R22
000197 937a      	ST   -Y,R23
000198 938a      	ST   -Y,R24
000199 939a      	ST   -Y,R25
00019a 93aa      	ST   -Y,R26
00019b 93ba      	ST   -Y,R27
00019c 93ea      	ST   -Y,R30
00019d 93fa      	ST   -Y,R31
00019e b7ef      	IN   R30,SREG
00019f 93ea      	ST   -Y,R30
                 ; 0001 0081 
                 ; 0001 0082 TCNT2=0x06;  //Reinitialize
0001a0 e0e6      	LDI  R30,LOW(6)
0001a1 bde4      	OUT  0x24,R30
                 ; 0001 0083 
                 ; 0001 0084 //speed(rpm) = ( 1/(32ms*4) ) * 60 =     468.75 rpm
                 ; 0001 0085 
                 ; 0001 0086     if(active){
0001a2 20bb      	TST  R11
0001a3 f409      	BRNE PC+2
0001a4 c05a      	RJMP _0x20006
                 ; 0001 0087 
                 ; 0001 0088         round++;
0001a5 01f4      	MOVW R30,R8
0001a6 9631      	ADIW R30,1
0001a7 014f      	MOVW R8,R30
                 ; 0001 0089         lcd_gotoxy(0,0);
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 93ea      	ST   -Y,R30
0001aa e0a0      	LDI  R26,LOW(0)
0001ab d081      	RCALL _lcd_gotoxy
                 ; 0001 008A         lcd_puts("question4/speed:\n")   ;
                +
0001ac eea3     +LDI R26 , LOW ( _0x20007 + ( 0 ) )
0001ad e0b1     +LDI R27 , HIGH ( _0x20007 + ( 0 ) )
                 	__POINTW2MN _0x20007,0
0001ae d0ac      	RCALL _lcd_puts
                 ; 0001 008B 
                 ; 0001 008C 
                 ; 0001 008D         PORTB=coils[i];
0001af 01f3      	MOVW R30,R6
0001b0 e2aa      	LDI  R26,LOW(_coils)
0001b1 e0b2      	LDI  R27,HIGH(_coils)
0001b2 0fee      	LSL  R30
0001b3 1fff      	ROL  R31
0001b4 0fae      	ADD  R26,R30
0001b5 1fbf      	ADC  R27,R31
0001b6 91ec      	LD   R30,X
0001b7 bbe8      	OUT  0x18,R30
                 ; 0001 008E 
                 ; 0001 008F         if(round<=100){
0001b8 e6e4      	LDI  R30,LOW(100)
0001b9 e0f0      	LDI  R31,HIGH(100)
0001ba 15e8      	CP   R30,R8
0001bb 05f9      	CPC  R31,R9
0001bc f084      	BRLT _0x20008
                 ; 0001 0090              PORTD.0 = 0;
0001bd 9890      	CBI  0x12,0
                 ; 0001 0091              PORTD.1 = 1;
0001be 9a91      	SBI  0x12,1
                 ; 0001 0092              i++;
0001bf 01f3      	MOVW R30,R6
0001c0 9631      	ADIW R30,1
0001c1 013f      	MOVW R6,R30
                 ; 0001 0093              if(i>=4)
0001c2 e0e4      	LDI  R30,LOW(4)
0001c3 e0f0      	LDI  R31,HIGH(4)
0001c4 166e      	CP   R6,R30
0001c5 067f      	CPC  R7,R31
0001c6 f014      	BRLT _0x2000D
                 ; 0001 0094                 i=0;
0001c7 2466      	CLR  R6
0001c8 2477      	CLR  R7
                 ; 0001 0095 
                 ; 0001 0096              lcd_puts("468.75 rpm RIGHT");
                 _0x2000D:
                +
0001c9 efa5     +LDI R26 , LOW ( _0x20007 + ( 18 ) )
0001ca e0b1     +LDI R27 , HIGH ( _0x20007 + ( 18 ) )
                 	__POINTW2MN _0x20007,18
0001cb d08f      	RCALL _lcd_puts
                 ; 0001 0097         }
                 ; 0001 0098 
                 ; 0001 0099         else if(round>100&&round<200)
0001cc c032      	RJMP _0x2000E
                 _0x20008:
0001cd e6e4      	LDI  R30,LOW(100)
0001ce e0f0      	LDI  R31,HIGH(100)
0001cf 15e8      	CP   R30,R8
0001d0 05f9      	CPC  R31,R9
0001d1 f42c      	BRGE _0x20010
0001d2 ece8      	LDI  R30,LOW(200)
0001d3 e0f0      	LDI  R31,HIGH(200)
0001d4 168e      	CP   R8,R30
0001d5 069f      	CPC  R9,R31
0001d6 f00c      	BRLT _0x20011
                 _0x20010:
0001d7 c009      	RJMP _0x2000F
                 _0x20011:
                 ; 0001 009A         {
                 ; 0001 009B                PORTD.0 = 0;
0001d8 9890      	CBI  0x12,0
                 ; 0001 009C                PORTD.1 = 0;
0001d9 9891      	CBI  0x12,1
                 ; 0001 009D                i=4;
0001da e0e4      	LDI  R30,LOW(4)
0001db e0f0      	LDI  R31,HIGH(4)
0001dc 013f      	MOVW R6,R30
                 ; 0001 009E                lcd_puts("0 rpm     STOP   ");
                +
0001dd e0a6     +LDI R26 , LOW ( _0x20007 + ( 35 ) )
0001de e0b2     +LDI R27 , HIGH ( _0x20007 + ( 35 ) )
                 	__POINTW2MN _0x20007,35
0001df d07b      	RCALL _lcd_puts
                 ; 0001 009F         }
                 ; 0001 00A0 
                 ; 0001 00A1         else if(round>=100&&round<300)
0001e0 c01e      	RJMP _0x20016
                 _0x2000F:
0001e1 e6e4      	LDI  R30,LOW(100)
0001e2 e0f0      	LDI  R31,HIGH(100)
0001e3 168e      	CP   R8,R30
0001e4 069f      	CPC  R9,R31
0001e5 f02c      	BRLT _0x20018
0001e6 e2ec      	LDI  R30,LOW(300)
0001e7 e0f1      	LDI  R31,HIGH(300)
0001e8 168e      	CP   R8,R30
0001e9 069f      	CPC  R9,R31
0001ea f00c      	BRLT _0x20019
                 _0x20018:
0001eb c010      	RJMP _0x20017
                 _0x20019:
                 ; 0001 00A2         {
                 ; 0001 00A3              PORTD.0 = 1;
0001ec 9a90      	SBI  0x12,0
                 ; 0001 00A4              PORTD.1 = 0;
0001ed 9891      	CBI  0x12,1
                 ; 0001 00A5              i--;
0001ee 01f3      	MOVW R30,R6
0001ef 9731      	SBIW R30,1
0001f0 013f      	MOVW R6,R30
                 ; 0001 00A6              if(i<0)
0001f1 2400      	CLR  R0
0001f2 1460      	CP   R6,R0
0001f3 0470      	CPC  R7,R0
0001f4 f41c      	BRGE _0x2001E
                 ; 0001 00A7                 i=3;
0001f5 e0e3      	LDI  R30,LOW(3)
0001f6 e0f0      	LDI  R31,HIGH(3)
0001f7 013f      	MOVW R6,R30
                 ; 0001 00A8              lcd_puts("468.75 rpm LEFT  ");
                 _0x2001E:
                +
0001f8 e1a8     +LDI R26 , LOW ( _0x20007 + ( 53 ) )
0001f9 e0b2     +LDI R27 , HIGH ( _0x20007 + ( 53 ) )
                 	__POINTW2MN _0x20007,53
0001fa d060      	RCALL _lcd_puts
                 ; 0001 00A9         }
                 ; 0001 00AA 
                 ; 0001 00AB         else{ i=4; }
0001fb c003      	RJMP _0x2001F
                 _0x20017:
0001fc e0e4      	LDI  R30,LOW(4)
0001fd e0f0      	LDI  R31,HIGH(4)
0001fe 013f      	MOVW R6,R30
                 _0x2001F:
                 _0x20016:
                 _0x2000E:
                 ; 0001 00AC 
                 ; 0001 00AD     }
                 ; 0001 00AE 
                 ; 0001 00AF 
                 ; 0001 00B0 }
                 _0x20006:
0001ff 91e9      	LD   R30,Y+
000200 bfef      	OUT  SREG,R30
000201 91f9      	LD   R31,Y+
000202 91e9      	LD   R30,Y+
000203 91b9      	LD   R27,Y+
000204 91a9      	LD   R26,Y+
000205 9199      	LD   R25,Y+
000206 9189      	LD   R24,Y+
000207 9179      	LD   R23,Y+
000208 9169      	LD   R22,Y+
000209 90f9      	LD   R15,Y+
00020a 9019      	LD   R1,Y+
00020b 9009      	LD   R0,Y+
00020c 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x20007:
0001e3           	.BYTE 0x47
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00020d 93aa      	ST   -Y,R26
00020e b3e5      	IN   R30,0x15
00020f 70ef      	ANDI R30,LOW(0xF)
000210 2fae      	MOV  R26,R30
000211 81e8      	LD   R30,Y
000212 7fe0      	ANDI R30,LOW(0xF0)
000213 2bea      	OR   R30,R26
000214 bbe5      	OUT  0x15,R30
                +
000215 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000216 958a     +DEC R24
000217 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000218 9aaa      	SBI  0x15,2
                +
000219 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00021a 958a     +DEC R24
00021b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00021c 98aa      	CBI  0x15,2
                +
00021d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00021e 958a     +DEC R24
00021f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000220 c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000221 93aa      	ST   -Y,R26
000222 81a8      	LD   R26,Y
000223 dfe9      	RCALL __lcd_write_nibble_G100
000224 81e8          ld    r30,y
000225 95e2          swap  r30
000226 83e8          st    y,r30
000227 81a8      	LD   R26,Y
000228 dfe4      	RCALL __lcd_write_nibble_G100
                +
000229 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00022a 958a     +DEC R24
00022b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00022c c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00022d 93aa      	ST   -Y,R26
00022e 81e8      	LD   R30,Y
00022f e0f0      	LDI  R31,0
000230 5ce8      	SUBI R30,LOW(-__base_y_G100)
000231 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000232 81e0      	LD   R30,Z
000233 81a9      	LDD  R26,Y+1
000234 0fae      	ADD  R26,R30
000235 dfeb      	RCALL __lcd_write_data
000236 80a9      	LDD  R10,Y+1
000237 80d8      	LDD  R13,Y+0
                 _0x2080003:
000238 9622      	ADIW R28,2
000239 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00023a e0a2      	LDI  R26,LOW(2)
00023b 940e 0461 	CALL SUBOPT_0x1
00023d e0ac      	LDI  R26,LOW(12)
00023e dfe2      	RCALL __lcd_write_data
00023f e0a1      	LDI  R26,LOW(1)
000240 940e 0461 	CALL SUBOPT_0x1
000242 e0e0      	LDI  R30,LOW(0)
000243 2ede      	MOV  R13,R30
000244 2eae      	MOV  R10,R30
000245 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000246 93aa      	ST   -Y,R26
000247 81a8      	LD   R26,Y
000248 30aa      	CPI  R26,LOW(0xA)
000249 f011      	BREQ _0x2000005
00024a 14ac      	CP   R10,R12
00024b f048      	BRLO _0x2000004
                 _0x2000005:
00024c e0e0      	LDI  R30,LOW(0)
00024d 93ea      	ST   -Y,R30
00024e 94d3      	INC  R13
00024f 2dad      	MOV  R26,R13
000250 dfdc      	RCALL _lcd_gotoxy
000251 81a8      	LD   R26,Y
000252 30aa      	CPI  R26,LOW(0xA)
000253 f409      	BRNE _0x2000007
000254 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000255 94a3      	INC  R10
000256 9aa8      	SBI  0x15,0
000257 81a8      	LD   R26,Y
000258 dfc8      	RCALL __lcd_write_data
000259 98a8      	CBI  0x15,0
00025a c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00025b 93ba      	ST   -Y,R27
00025c 93aa      	ST   -Y,R26
00025d 931a      	ST   -Y,R17
                 _0x2000008:
00025e 81a9      	LDD  R26,Y+1
00025f 81ba      	LDD  R27,Y+1+1
000260 91ed      	LD   R30,X+
000261 83a9      	STD  Y+1,R26
000262 83ba      	STD  Y+1+1,R27
000263 2f1e      	MOV  R17,R30
000264 30e0      	CPI  R30,0
000265 f019      	BREQ _0x200000A
000266 2fa1      	MOV  R26,R17
000267 dfde      	RCALL _lcd_putchar
000268 cff5      	RJMP _0x2000008
                 _0x200000A:
000269 8118      	LDD  R17,Y+0
00026a 9623      	ADIW R28,3
00026b 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00026c 93aa      	ST   -Y,R26
00026d b3e4      	IN   R30,0x14
00026e 6fe0      	ORI  R30,LOW(0xF0)
00026f bbe4      	OUT  0x14,R30
000270 9aa2      	SBI  0x14,2
000271 9aa0      	SBI  0x14,0
000272 9aa1      	SBI  0x14,1
000273 98aa      	CBI  0x15,2
000274 98a8      	CBI  0x15,0
000275 98a9      	CBI  0x15,1
000276 80c8      	LDD  R12,Y+0
000277 81e8      	LD   R30,Y
000278 58e0      	SUBI R30,-LOW(128)
                +
000279 93e0 023a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00027b 81e8      	LD   R30,Y
00027c 54e0      	SUBI R30,-LOW(192)
                +
00027d 93e0 023b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00027f e1a4      	LDI  R26,LOW(20)
000280 e0b0      	LDI  R27,0
000281 940e 049b 	CALL _delay_ms
000283 940e 0467 	CALL SUBOPT_0x2
000285 940e 0467 	CALL SUBOPT_0x2
000287 940e 0467 	CALL SUBOPT_0x2
000289 e2a0      	LDI  R26,LOW(32)
00028a df82      	RCALL __lcd_write_nibble_G100
                +
00028b ec88     +LDI R24 , LOW ( 200 )
00028c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00028d 9701     +SBIW R24 , 1
00028e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00028f e2a8      	LDI  R26,LOW(40)
000290 df90      	RCALL __lcd_write_data
000291 e0a4      	LDI  R26,LOW(4)
000292 df8e      	RCALL __lcd_write_data
000293 e8a5      	LDI  R26,LOW(133)
000294 df8c      	RCALL __lcd_write_data
000295 e0a6      	LDI  R26,LOW(6)
000296 df8a      	RCALL __lcd_write_data
000297 dfa2      	RCALL _lcd_clear
                 _0x2080002:
000298 9621      	ADIW R28,1
000299 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00029a 93ba      	ST   -Y,R27
00029b 93aa      	ST   -Y,R26
00029c 931a      	ST   -Y,R17
00029d 930a      	ST   -Y,R16
00029e 81aa      	LDD  R26,Y+2
00029f 81bb      	LDD  R27,Y+2+1
0002a0 9612      	ADIW R26,2
0002a1 940e 05f1 	CALL __GETW1P
0002a3 9730      	SBIW R30,0
0002a4 f159      	BREQ _0x2020010
0002a5 81aa      	LDD  R26,Y+2
0002a6 81bb      	LDD  R27,Y+2+1
0002a7 9614      	ADIW R26,4
0002a8 940e 05f1 	CALL __GETW1P
0002aa 018f      	MOVW R16,R30
0002ab 9730      	SBIW R30,0
0002ac f061      	BREQ _0x2020012
                +
0002ad 3002     +CPI R16 , LOW ( 2 )
0002ae e0e0     +LDI R30 , HIGH ( 2 )
0002af 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002b0 f098      	BRLO _0x2020013
0002b1 01f8      	MOVW R30,R16
0002b2 9731      	SBIW R30,1
0002b3 018f      	MOVW R16,R30
                +
0002b4 81aa     +LDD R26 , Y + 2
0002b5 81bb     +LDD R27 , Y + 2 + 1
0002b6 9614     +ADIW R26 , 4
0002b7 93ed     +ST X + , R30
0002b8 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0002b9 81aa      	LDD  R26,Y+2
0002ba 81bb      	LDD  R27,Y+2+1
0002bb 9612      	ADIW R26,2
0002bc 91ed      	LD   R30,X+
0002bd 91fd      	LD   R31,X+
0002be 9631      	ADIW R30,1
0002bf 93fe      	ST   -X,R31
0002c0 93ee      	ST   -X,R30
0002c1 9731      	SBIW R30,1
0002c2 81ac      	LDD  R26,Y+4
0002c3 83a0      	STD  Z+0,R26
                 _0x2020013:
0002c4 81aa      	LDD  R26,Y+2
0002c5 81bb      	LDD  R27,Y+2+1
0002c6 940e 05f1 	CALL __GETW1P
0002c8 23ff      	TST  R31
0002c9 f02a      	BRMI _0x2020014
0002ca 91ed      	LD   R30,X+
0002cb 91fd      	LD   R31,X+
0002cc 9631      	ADIW R30,1
0002cd 93fe      	ST   -X,R31
0002ce 93ee      	ST   -X,R30
                 _0x2020014:
0002cf c006      	RJMP _0x2020015
                 _0x2020010:
0002d0 81aa      	LDD  R26,Y+2
0002d1 81bb      	LDD  R27,Y+2+1
0002d2 efef      	LDI  R30,LOW(65535)
0002d3 efff      	LDI  R31,HIGH(65535)
0002d4 93ed      	ST   X+,R30
0002d5 93fc      	ST   X,R31
                 _0x2020015:
0002d6 8119      	LDD  R17,Y+1
0002d7 8108      	LDD  R16,Y+0
0002d8 9625      	ADIW R28,5
0002d9 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0002da 93ba      	ST   -Y,R27
0002db 93aa      	ST   -Y,R26
0002dc 9726      	SBIW R28,6
0002dd 940e 05fe 	CALL __SAVELOCR6
0002df e010      	LDI  R17,0
0002e0 85ac      	LDD  R26,Y+12
0002e1 85bd      	LDD  R27,Y+12+1
0002e2 e0e0      	LDI  R30,LOW(0)
0002e3 e0f0      	LDI  R31,HIGH(0)
0002e4 93ed      	ST   X+,R30
0002e5 93fc      	ST   X,R31
                 _0x2020016:
0002e6 89ea      	LDD  R30,Y+18
0002e7 89fb      	LDD  R31,Y+18+1
0002e8 9631      	ADIW R30,1
0002e9 8bea      	STD  Y+18,R30
0002ea 8bfb      	STD  Y+18+1,R31
0002eb 9731      	SBIW R30,1
0002ec 91e4      	LPM  R30,Z
0002ed 2f2e      	MOV  R18,R30
0002ee 30e0      	CPI  R30,0
0002ef f409      	BRNE PC+2
0002f0 c115      	RJMP _0x2020018
0002f1 2fe1      	MOV  R30,R17
0002f2 30e0      	CPI  R30,0
0002f3 f439      	BRNE _0x202001C
0002f4 3225      	CPI  R18,37
0002f5 f411      	BRNE _0x202001D
0002f6 e011      	LDI  R17,LOW(1)
0002f7 c002      	RJMP _0x202001E
                 _0x202001D:
0002f8 940e 046f 	CALL SUBOPT_0x3
                 _0x202001E:
0002fa c10a      	RJMP _0x202001B
                 _0x202001C:
0002fb 30e1      	CPI  R30,LOW(0x1)
0002fc f4a9      	BRNE _0x202001F
0002fd 3225      	CPI  R18,37
0002fe f419      	BRNE _0x2020020
0002ff 940e 046f 	CALL SUBOPT_0x3
000301 c102      	RJMP _0x20200CC
                 _0x2020020:
000302 e012      	LDI  R17,LOW(2)
000303 e040      	LDI  R20,LOW(0)
000304 e000      	LDI  R16,LOW(0)
000305 322d      	CPI  R18,45
000306 f411      	BRNE _0x2020021
000307 e001      	LDI  R16,LOW(1)
000308 c0fc      	RJMP _0x202001B
                 _0x2020021:
000309 322b      	CPI  R18,43
00030a f411      	BRNE _0x2020022
00030b e24b      	LDI  R20,LOW(43)
00030c c0f8      	RJMP _0x202001B
                 _0x2020022:
00030d 3220      	CPI  R18,32
00030e f411      	BRNE _0x2020023
00030f e240      	LDI  R20,LOW(32)
000310 c0f4      	RJMP _0x202001B
                 _0x2020023:
000311 c002      	RJMP _0x2020024
                 _0x202001F:
000312 30e2      	CPI  R30,LOW(0x2)
000313 f439      	BRNE _0x2020025
                 _0x2020024:
000314 e050      	LDI  R21,LOW(0)
000315 e013      	LDI  R17,LOW(3)
000316 3320      	CPI  R18,48
000317 f411      	BRNE _0x2020026
000318 6800      	ORI  R16,LOW(128)
000319 c0eb      	RJMP _0x202001B
                 _0x2020026:
00031a c003      	RJMP _0x2020027
                 _0x2020025:
00031b 30e3      	CPI  R30,LOW(0x3)
00031c f009      	BREQ PC+2
00031d c0e7      	RJMP _0x202001B
                 _0x2020027:
00031e 3320      	CPI  R18,48
00031f f010      	BRLO _0x202002A
000320 332a      	CPI  R18,58
000321 f008      	BRLO _0x202002B
                 _0x202002A:
000322 c007      	RJMP _0x2020029
                 _0x202002B:
000323 e0aa      	LDI  R26,LOW(10)
000324 9f5a      	MUL  R21,R26
000325 2d50      	MOV  R21,R0
000326 2fe2      	MOV  R30,R18
000327 53e0      	SUBI R30,LOW(48)
000328 0f5e      	ADD  R21,R30
000329 c0db      	RJMP _0x202001B
                 _0x2020029:
00032a 2fe2      	MOV  R30,R18
00032b 36e3      	CPI  R30,LOW(0x63)
00032c f449      	BRNE _0x202002F
00032d 940e 0476 	CALL SUBOPT_0x4
00032f 89e8      	LDD  R30,Y+16
000330 89f9      	LDD  R31,Y+16+1
000331 81a4      	LDD  R26,Z+4
000332 93aa      	ST   -Y,R26
000333 940e 047c 	CALL SUBOPT_0x5
000335 c0ce      	RJMP _0x2020030
                 _0x202002F:
000336 37e3      	CPI  R30,LOW(0x73)
000337 f441      	BRNE _0x2020032
000338 940e 0476 	CALL SUBOPT_0x4
00033a 940e 0482 	CALL SUBOPT_0x6
00033c 940e 0442 	CALL _strlen
00033e 2f1e      	MOV  R17,R30
00033f c00a      	RJMP _0x2020033
                 _0x2020032:
000340 37e0      	CPI  R30,LOW(0x70)
000341 f461      	BRNE _0x2020035
000342 940e 0476 	CALL SUBOPT_0x4
000344 940e 0482 	CALL SUBOPT_0x6
000346 940e 044e 	CALL _strlenf
000348 2f1e      	MOV  R17,R30
000349 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00034a 6002      	ORI  R16,LOW(2)
00034b 770f      	ANDI R16,LOW(127)
00034c e030      	LDI  R19,LOW(0)
00034d c034      	RJMP _0x2020036
                 _0x2020035:
00034e 36e4      	CPI  R30,LOW(0x64)
00034f f011      	BREQ _0x2020039
000350 36e9      	CPI  R30,LOW(0x69)
000351 f411      	BRNE _0x202003A
                 _0x2020039:
000352 6004      	ORI  R16,LOW(4)
000353 c002      	RJMP _0x202003B
                 _0x202003A:
000354 37e5      	CPI  R30,LOW(0x75)
000355 f431      	BRNE _0x202003C
                 _0x202003B:
000356 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000357 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000358 83ee      	STD  Y+6,R30
000359 83ff      	STD  Y+6+1,R31
00035a e015      	LDI  R17,LOW(5)
00035b c00c      	RJMP _0x202003D
                 _0x202003C:
00035c 35e8      	CPI  R30,LOW(0x58)
00035d f411      	BRNE _0x202003F
00035e 6008      	ORI  R16,LOW(8)
00035f c003      	RJMP _0x2020040
                 _0x202003F:
000360 37e8      	CPI  R30,LOW(0x78)
000361 f009      	BREQ PC+2
000362 c0a1      	RJMP _0x2020071
                 _0x2020040:
000363 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000364 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000365 83ee      	STD  Y+6,R30
000366 83ff      	STD  Y+6+1,R31
000367 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000368 ff02      	SBRS R16,2
000369 c014      	RJMP _0x2020042
00036a 940e 0476 	CALL SUBOPT_0x4
00036c 940e 048c 	CALL SUBOPT_0x7
00036e 85ab      	LDD  R26,Y+11
00036f 23aa      	TST  R26
000370 f43a      	BRPL _0x2020043
000371 85ea      	LDD  R30,Y+10
000372 85fb      	LDD  R31,Y+10+1
000373 940e 05e0 	CALL __ANEGW1
000375 87ea      	STD  Y+10,R30
000376 87fb      	STD  Y+10+1,R31
000377 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000378 3040      	CPI  R20,0
000379 f011      	BREQ _0x2020044
00037a 5f1f      	SUBI R17,-LOW(1)
00037b c001      	RJMP _0x2020045
                 _0x2020044:
00037c 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00037d c004      	RJMP _0x2020046
                 _0x2020042:
00037e 940e 0476 	CALL SUBOPT_0x4
000380 940e 048c 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
000382 fd00      	SBRC R16,0
000383 c011      	RJMP _0x2020047
                 _0x2020048:
000384 1715      	CP   R17,R21
000385 f478      	BRSH _0x202004A
000386 ff07      	SBRS R16,7
000387 c008      	RJMP _0x202004B
000388 ff02      	SBRS R16,2
000389 c004      	RJMP _0x202004C
00038a 7f0b      	ANDI R16,LOW(251)
00038b 2f24      	MOV  R18,R20
00038c 5011      	SUBI R17,LOW(1)
00038d c001      	RJMP _0x202004D
                 _0x202004C:
00038e e320      	LDI  R18,LOW(48)
                 _0x202004D:
00038f c001      	RJMP _0x202004E
                 _0x202004B:
000390 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000391 940e 046f 	CALL SUBOPT_0x3
000393 5051      	SUBI R21,LOW(1)
000394 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000395 2f31      	MOV  R19,R17
000396 ff01      	SBRS R16,1
000397 c017      	RJMP _0x202004F
                 _0x2020050:
000398 3030      	CPI  R19,0
000399 f0a1      	BREQ _0x2020052
00039a ff03      	SBRS R16,3
00039b c006      	RJMP _0x2020053
00039c 81ee      	LDD  R30,Y+6
00039d 81ff      	LDD  R31,Y+6+1
00039e 9125      	LPM  R18,Z+
00039f 83ee      	STD  Y+6,R30
0003a0 83ff      	STD  Y+6+1,R31
0003a1 c005      	RJMP _0x2020054
                 _0x2020053:
0003a2 81ae      	LDD  R26,Y+6
0003a3 81bf      	LDD  R27,Y+6+1
0003a4 912d      	LD   R18,X+
0003a5 83ae      	STD  Y+6,R26
0003a6 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0003a7 940e 046f 	CALL SUBOPT_0x3
0003a9 3050      	CPI  R21,0
0003aa f009      	BREQ _0x2020055
0003ab 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0003ac 5031      	SUBI R19,LOW(1)
0003ad cfea      	RJMP _0x2020050
                 _0x2020052:
0003ae c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0003af e320      	LDI  R18,LOW(48)
0003b0 81ee      	LDD  R30,Y+6
0003b1 81ff      	LDD  R31,Y+6+1
0003b2 940e 05f5 	CALL __GETW1PF
0003b4 87e8      	STD  Y+8,R30
0003b5 87f9      	STD  Y+8+1,R31
0003b6 81ee      	LDD  R30,Y+6
0003b7 81ff      	LDD  R31,Y+6+1
0003b8 9632      	ADIW R30,2
0003b9 83ee      	STD  Y+6,R30
0003ba 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0003bb 85e8      	LDD  R30,Y+8
0003bc 85f9      	LDD  R31,Y+8+1
0003bd 85aa      	LDD  R26,Y+10
0003be 85bb      	LDD  R27,Y+10+1
0003bf 17ae      	CP   R26,R30
0003c0 07bf      	CPC  R27,R31
0003c1 f050      	BRLO _0x202005C
0003c2 5f2f      	SUBI R18,-LOW(1)
0003c3 85a8      	LDD  R26,Y+8
0003c4 85b9      	LDD  R27,Y+8+1
0003c5 85ea      	LDD  R30,Y+10
0003c6 85fb      	LDD  R31,Y+10+1
0003c7 1bea      	SUB  R30,R26
0003c8 0bfb      	SBC  R31,R27
0003c9 87ea      	STD  Y+10,R30
0003ca 87fb      	STD  Y+10+1,R31
0003cb cfef      	RJMP _0x202005A
                 _0x202005C:
0003cc 332a      	CPI  R18,58
0003cd f028      	BRLO _0x202005D
0003ce ff03      	SBRS R16,3
0003cf c002      	RJMP _0x202005E
0003d0 5f29      	SUBI R18,-LOW(7)
0003d1 c001      	RJMP _0x202005F
                 _0x202005E:
0003d2 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0003d3 fd04      	SBRC R16,4
0003d4 c01a      	RJMP _0x2020061
0003d5 3321      	CPI  R18,49
0003d6 f420      	BRSH _0x2020063
0003d7 85a8      	LDD  R26,Y+8
0003d8 85b9      	LDD  R27,Y+8+1
0003d9 9711      	SBIW R26,1
0003da f409      	BRNE _0x2020062
                 _0x2020063:
0003db c009      	RJMP _0x20200CD
                 _0x2020062:
0003dc 1753      	CP   R21,R19
0003dd f010      	BRLO _0x2020067
0003de ff00      	SBRS R16,0
0003df c001      	RJMP _0x2020068
                 _0x2020067:
0003e0 c013      	RJMP _0x2020066
                 _0x2020068:
0003e1 e220      	LDI  R18,LOW(32)
0003e2 ff07      	SBRS R16,7
0003e3 c00b      	RJMP _0x2020069
0003e4 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0003e5 6100      	ORI  R16,LOW(16)
0003e6 ff02      	SBRS R16,2
0003e7 c007      	RJMP _0x202006A
0003e8 7f0b      	ANDI R16,LOW(251)
0003e9 934a      	ST   -Y,R20
0003ea 940e 047c 	CALL SUBOPT_0x5
0003ec 3050      	CPI  R21,0
0003ed f009      	BREQ _0x202006B
0003ee 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0003ef 940e 046f 	CALL SUBOPT_0x3
0003f1 3050      	CPI  R21,0
0003f2 f009      	BREQ _0x202006C
0003f3 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0003f4 5031      	SUBI R19,LOW(1)
0003f5 85a8      	LDD  R26,Y+8
0003f6 85b9      	LDD  R27,Y+8+1
0003f7 9712      	SBIW R26,2
0003f8 f008      	BRLO _0x2020059
0003f9 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0003fa ff00      	SBRS R16,0
0003fb c008      	RJMP _0x202006D
                 _0x202006E:
0003fc 3050      	CPI  R21,0
0003fd f031      	BREQ _0x2020070
0003fe 5051      	SUBI R21,LOW(1)
0003ff e2e0      	LDI  R30,LOW(32)
000400 93ea      	ST   -Y,R30
000401 940e 047c 	CALL SUBOPT_0x5
000403 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000404 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000405 cee0      	RJMP _0x2020016
                 _0x2020018:
000406 85ac      	LDD  R26,Y+12
000407 85bd      	LDD  R27,Y+12+1
000408 940e 05f1 	CALL __GETW1P
00040a 940e 0605 	CALL __LOADLOCR6
00040c 9664      	ADIW R28,20
00040d 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00040e 92ff      	PUSH R15
00040f 2ef8      	MOV  R15,R24
000410 9726      	SBIW R28,6
000411 940e 0600 	CALL __SAVELOCR4
000413 940e 0494 	CALL SUBOPT_0x8
000415 9730      	SBIW R30,0
000416 f419      	BRNE _0x2020072
000417 efef      	LDI  R30,LOW(65535)
000418 efff      	LDI  R31,HIGH(65535)
000419 c023      	RJMP _0x2080001
                 _0x2020072:
00041a 01de      	MOVW R26,R28
00041b 9616      	ADIW R26,6
00041c 940e 05dc 	CALL __ADDW2R15
00041e 018d      	MOVW R16,R26
00041f 940e 0494 	CALL SUBOPT_0x8
000421 83ee      	STD  Y+6,R30
000422 83ff      	STD  Y+6+1,R31
000423 e0e0      	LDI  R30,LOW(0)
000424 87e8      	STD  Y+8,R30
000425 87e9      	STD  Y+8+1,R30
000426 01de      	MOVW R26,R28
000427 961a      	ADIW R26,10
000428 940e 05dc 	CALL __ADDW2R15
00042a 940e 05f1 	CALL __GETW1P
00042c 93fa      	ST   -Y,R31
00042d 93ea      	ST   -Y,R30
00042e 931a      	ST   -Y,R17
00042f 930a      	ST   -Y,R16
000430 e9ea      	LDI  R30,LOW(_put_buff_G101)
000431 e0f2      	LDI  R31,HIGH(_put_buff_G101)
000432 93fa      	ST   -Y,R31
000433 93ea      	ST   -Y,R30
000434 01de      	MOVW R26,R28
000435 961a      	ADIW R26,10
000436 dea3      	RCALL __print_G101
000437 019f      	MOVW R18,R30
000438 81ae      	LDD  R26,Y+6
000439 81bf      	LDD  R27,Y+6+1
00043a e0e0      	LDI  R30,LOW(0)
00043b 93ec      	ST   X,R30
00043c 01f9      	MOVW R30,R18
                 _0x2080001:
00043d 940e 0607 	CALL __LOADLOCR4
00043f 962a      	ADIW R28,10
000440 90ff      	POP  R15
000441 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000442 93ba      	ST   -Y,R27
000443 93aa      	ST   -Y,R26
000444 91a9          ld   r26,y+
000445 91b9          ld   r27,y+
000446 27ee          clr  r30
000447 27ff          clr  r31
                 strlen0:
000448 916d          ld   r22,x+
000449 2366          tst  r22
00044a f011          breq strlen1
00044b 9631          adiw r30,1
00044c cffb          rjmp strlen0
                 strlen1:
00044d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00044e 93ba      	ST   -Y,R27
00044f 93aa      	ST   -Y,R26
000450 27aa          clr  r26
000451 27bb          clr  r27
000452 91e9          ld   r30,y+
000453 91f9          ld   r31,y+
                 strlenf0:
000454 9005      	lpm  r0,z+
000455 2000          tst  r0
000456 f011          breq strlenf1
000457 9611          adiw r26,1
000458 cffb          rjmp strlenf0
                 strlenf1:
000459 01fd          movw r30,r26
00045a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _coils:
00022a           	.BYTE 0xE
                 __base_y_G100:
000238           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00045b 940e 025b 	CALL _lcd_puts
00045d eda0      	LDI  R26,LOW(2000)
00045e e0b7      	LDI  R27,HIGH(2000)
00045f 940c 049b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000461 940e 0221 	CALL __lcd_write_data
000463 e0a3      	LDI  R26,LOW(3)
000464 e0b0      	LDI  R27,0
000465 940c 049b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000467 e3a0      	LDI  R26,LOW(48)
000468 940e 020d 	CALL __lcd_write_nibble_G100
                +
00046a ec88     +LDI R24 , LOW ( 200 )
00046b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00046c 9701     +SBIW R24 , 1
00046d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00046e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00046f 932a      	ST   -Y,R18
000470 85ad      	LDD  R26,Y+13
000471 85be      	LDD  R27,Y+13+1
000472 85ef      	LDD  R30,Y+15
000473 89f8      	LDD  R31,Y+15+1
000474 9509      	ICALL
000475 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000476 89e8      	LDD  R30,Y+16
000477 89f9      	LDD  R31,Y+16+1
000478 9734      	SBIW R30,4
000479 8be8      	STD  Y+16,R30
00047a 8bf9      	STD  Y+16+1,R31
00047b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00047c 85ad      	LDD  R26,Y+13
00047d 85be      	LDD  R27,Y+13+1
00047e 85ef      	LDD  R30,Y+15
00047f 89f8      	LDD  R31,Y+15+1
000480 9509      	ICALL
000481 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000482 89a8      	LDD  R26,Y+16
000483 89b9      	LDD  R27,Y+16+1
000484 9614      	ADIW R26,4
000485 940e 05f1 	CALL __GETW1P
000487 83ee      	STD  Y+6,R30
000488 83ff      	STD  Y+6+1,R31
000489 81ae      	LDD  R26,Y+6
00048a 81bf      	LDD  R27,Y+6+1
00048b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
00048c 89a8      	LDD  R26,Y+16
00048d 89b9      	LDD  R27,Y+16+1
00048e 9614      	ADIW R26,4
00048f 940e 05f1 	CALL __GETW1P
000491 87ea      	STD  Y+10,R30
000492 87fb      	STD  Y+10+1,R31
000493 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000494 01de      	MOVW R26,R28
000495 961c      	ADIW R26,12
000496 940e 05dc 	CALL __ADDW2R15
000498 940e 05f1 	CALL __GETW1P
00049a 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00049b 9610      	adiw r26,0
00049c f039      	breq __delay_ms1
                 __delay_ms0:
                +
00049d ed80     +LDI R24 , LOW ( 0x7D0 )
00049e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00049f 9701     +SBIW R24 , 1
0004a0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0004a1 95a8      	wdr
0004a2 9711      	sbiw r26,1
0004a3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004a4 9508      	ret
                 
                 __ROUND_REPACK:
0004a5 2355      	TST  R21
0004a6 f442      	BRPL __REPACK
0004a7 3850      	CPI  R21,0x80
0004a8 f411      	BRNE __ROUND_REPACK0
0004a9 ffe0      	SBRS R30,0
0004aa c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0004ab 9631      	ADIW R30,1
0004ac 1f69      	ADC  R22,R25
0004ad 1f79      	ADC  R23,R25
0004ae f06b      	BRVS __REPACK1
                 
                 __REPACK:
0004af e850      	LDI  R21,0x80
0004b0 2757      	EOR  R21,R23
0004b1 f411      	BRNE __REPACK0
0004b2 935f      	PUSH R21
0004b3 c0c8      	RJMP __ZERORES
                 __REPACK0:
0004b4 3f5f      	CPI  R21,0xFF
0004b5 f031      	BREQ __REPACK1
0004b6 0f66      	LSL  R22
0004b7 0c00      	LSL  R0
0004b8 9557      	ROR  R21
0004b9 9567      	ROR  R22
0004ba 2f75      	MOV  R23,R21
0004bb 9508      	RET
                 __REPACK1:
0004bc 935f      	PUSH R21
0004bd 2000      	TST  R0
0004be f00a      	BRMI __REPACK2
0004bf c0c8      	RJMP __MAXRES
                 __REPACK2:
0004c0 c0c1      	RJMP __MINRES
                 
                 __UNPACK:
0004c1 e850      	LDI  R21,0x80
0004c2 2e19      	MOV  R1,R25
0004c3 2215      	AND  R1,R21
0004c4 0f88      	LSL  R24
0004c5 1f99      	ROL  R25
0004c6 2795      	EOR  R25,R21
0004c7 0f55      	LSL  R21
0004c8 9587      	ROR  R24
                 
                 __UNPACK1:
0004c9 e850      	LDI  R21,0x80
0004ca 2e07      	MOV  R0,R23
0004cb 2205      	AND  R0,R21
0004cc 0f66      	LSL  R22
0004cd 1f77      	ROL  R23
0004ce 2775      	EOR  R23,R21
0004cf 0f55      	LSL  R21
0004d0 9567      	ROR  R22
0004d1 9508      	RET
                 
                 __CFD1U:
0004d2 9468      	SET
0004d3 c001      	RJMP __CFD1U0
                 __CFD1:
0004d4 94e8      	CLT
                 __CFD1U0:
0004d5 935f      	PUSH R21
0004d6 dff2      	RCALL __UNPACK1
0004d7 3870      	CPI  R23,0x80
0004d8 f018      	BRLO __CFD10
0004d9 3f7f      	CPI  R23,0xFF
0004da f408      	BRCC __CFD10
0004db c0a0      	RJMP __ZERORES
                 __CFD10:
0004dc e156      	LDI  R21,22
0004dd 1b57      	SUB  R21,R23
0004de f4aa      	BRPL __CFD11
0004df 9551      	NEG  R21
0004e0 3058      	CPI  R21,8
0004e1 f40e      	BRTC __CFD19
0004e2 3059      	CPI  R21,9
                 __CFD19:
0004e3 f030      	BRLO __CFD17
0004e4 efef      	SER  R30
0004e5 efff      	SER  R31
0004e6 ef6f      	SER  R22
0004e7 e77f      	LDI  R23,0x7F
0004e8 f977      	BLD  R23,7
0004e9 c01a      	RJMP __CFD15
                 __CFD17:
0004ea 2777      	CLR  R23
0004eb 2355      	TST  R21
0004ec f0b9      	BREQ __CFD15
                 __CFD18:
0004ed 0fee      	LSL  R30
0004ee 1fff      	ROL  R31
0004ef 1f66      	ROL  R22
0004f0 1f77      	ROL  R23
0004f1 955a      	DEC  R21
0004f2 f7d1      	BRNE __CFD18
0004f3 c010      	RJMP __CFD15
                 __CFD11:
0004f4 2777      	CLR  R23
                 __CFD12:
0004f5 3058      	CPI  R21,8
0004f6 f028      	BRLO __CFD13
0004f7 2fef      	MOV  R30,R31
0004f8 2ff6      	MOV  R31,R22
0004f9 2f67      	MOV  R22,R23
0004fa 5058      	SUBI R21,8
0004fb cff9      	RJMP __CFD12
                 __CFD13:
0004fc 2355      	TST  R21
0004fd f031      	BREQ __CFD15
                 __CFD14:
0004fe 9576      	LSR  R23
0004ff 9567      	ROR  R22
000500 95f7      	ROR  R31
000501 95e7      	ROR  R30
000502 955a      	DEC  R21
000503 f7d1      	BRNE __CFD14
                 __CFD15:
000504 2000      	TST  R0
000505 f40a      	BRPL __CFD16
000506 d0dd      	RCALL __ANEGD1
                 __CFD16:
000507 915f      	POP  R21
000508 9508      	RET
                 
                 __CDF1U:
000509 9468      	SET
00050a c001      	RJMP __CDF1U0
                 __CDF1:
00050b 94e8      	CLT
                 __CDF1U0:
00050c 9730      	SBIW R30,0
00050d 4060      	SBCI R22,0
00050e 4070      	SBCI R23,0
00050f f0b1      	BREQ __CDF10
000510 2400      	CLR  R0
000511 f026      	BRTS __CDF11
000512 2377      	TST  R23
000513 f412      	BRPL __CDF11
000514 9400      	COM  R0
000515 d0ce      	RCALL __ANEGD1
                 __CDF11:
000516 2e17      	MOV  R1,R23
000517 e17e      	LDI  R23,30
000518 2011      	TST  R1
                 __CDF12:
000519 f032      	BRMI __CDF13
00051a 957a      	DEC  R23
00051b 0fee      	LSL  R30
00051c 1fff      	ROL  R31
00051d 1f66      	ROL  R22
00051e 1c11      	ROL  R1
00051f cff9      	RJMP __CDF12
                 __CDF13:
000520 2fef      	MOV  R30,R31
000521 2ff6      	MOV  R31,R22
000522 2d61      	MOV  R22,R1
000523 935f      	PUSH R21
000524 df8a      	RCALL __REPACK
000525 915f      	POP  R21
                 __CDF10:
000526 9508      	RET
                 
                 __SWAPACC:
000527 934f      	PUSH R20
000528 01af      	MOVW R20,R30
000529 01fd      	MOVW R30,R26
00052a 01da      	MOVW R26,R20
00052b 01ab      	MOVW R20,R22
00052c 01bc      	MOVW R22,R24
00052d 01ca      	MOVW R24,R20
00052e 2d40      	MOV  R20,R0
00052f 2c01      	MOV  R0,R1
000530 2e14      	MOV  R1,R20
000531 914f      	POP  R20
000532 9508      	RET
                 
                 __UADD12:
000533 0fea      	ADD  R30,R26
000534 1ffb      	ADC  R31,R27
000535 1f68      	ADC  R22,R24
000536 9508      	RET
                 
                 __NEGMAN1:
000537 95e0      	COM  R30
000538 95f0      	COM  R31
000539 9560      	COM  R22
00053a 5fef      	SUBI R30,-1
00053b 4fff      	SBCI R31,-1
00053c 4f6f      	SBCI R22,-1
00053d 9508      	RET
                 
                 __ADDF12:
00053e 935f      	PUSH R21
00053f df81      	RCALL __UNPACK
000540 3890      	CPI  R25,0x80
000541 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000542 3870      	CPI  R23,0x80
000543 f121      	BREQ __ADDF128
                 __ADDF121:
000544 2f57      	MOV  R21,R23
000545 1b59      	SUB  R21,R25
000546 f12b      	BRVS __ADDF1211
000547 f412      	BRPL __ADDF122
000548 dfde      	RCALL __SWAPACC
000549 cffa      	RJMP __ADDF121
                 __ADDF122:
00054a 3158      	CPI  R21,24
00054b f018      	BRLO __ADDF123
00054c 27aa      	CLR  R26
00054d 27bb      	CLR  R27
00054e 2788      	CLR  R24
                 __ADDF123:
00054f 3058      	CPI  R21,8
000550 f028      	BRLO __ADDF124
000551 2fab      	MOV  R26,R27
000552 2fb8      	MOV  R27,R24
000553 2788      	CLR  R24
000554 5058      	SUBI R21,8
000555 cff9      	RJMP __ADDF123
                 __ADDF124:
000556 2355      	TST  R21
000557 f029      	BREQ __ADDF126
                 __ADDF125:
000558 9586      	LSR  R24
000559 95b7      	ROR  R27
00055a 95a7      	ROR  R26
00055b 955a      	DEC  R21
00055c f7d9      	BRNE __ADDF125
                 __ADDF126:
00055d 2d50      	MOV  R21,R0
00055e 2551      	EOR  R21,R1
00055f f072      	BRMI __ADDF127
000560 dfd2      	RCALL __UADD12
000561 f438      	BRCC __ADDF129
000562 9567      	ROR  R22
000563 95f7      	ROR  R31
000564 95e7      	ROR  R30
000565 9573      	INC  R23
000566 f413      	BRVC __ADDF129
000567 c020      	RJMP __MAXRES
                 __ADDF128:
000568 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000569 df45      	RCALL __REPACK
00056a 915f      	POP  R21
00056b 9508      	RET
                 __ADDF1211:
00056c f7d8      	BRCC __ADDF128
00056d cffb      	RJMP __ADDF129
                 __ADDF127:
00056e 1bea      	SUB  R30,R26
00056f 0bfb      	SBC  R31,R27
000570 0b68      	SBC  R22,R24
000571 f051      	BREQ __ZERORES
000572 f410      	BRCC __ADDF1210
000573 9400      	COM  R0
000574 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000575 2366      	TST  R22
000576 f392      	BRMI __ADDF129
000577 0fee      	LSL  R30
000578 1fff      	ROL  R31
000579 1f66      	ROL  R22
00057a 957a      	DEC  R23
00057b f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00057c 27ee      	CLR  R30
00057d 27ff      	CLR  R31
00057e 2766      	CLR  R22
00057f 2777      	CLR  R23
000580 915f      	POP  R21
000581 9508      	RET
                 
                 __MINRES:
000582 efef      	SER  R30
000583 efff      	SER  R31
000584 e76f      	LDI  R22,0x7F
000585 ef7f      	SER  R23
000586 915f      	POP  R21
000587 9508      	RET
                 
                 __MAXRES:
000588 efef      	SER  R30
000589 efff      	SER  R31
00058a e76f      	LDI  R22,0x7F
00058b e77f      	LDI  R23,0x7F
00058c 915f      	POP  R21
00058d 9508      	RET
                 
                 __MULF12:
00058e 935f      	PUSH R21
00058f df31      	RCALL __UNPACK
000590 3870      	CPI  R23,0x80
000591 f351      	BREQ __ZERORES
000592 3890      	CPI  R25,0x80
000593 f341      	BREQ __ZERORES
000594 2401      	EOR  R0,R1
000595 9408      	SEC
000596 1f79      	ADC  R23,R25
000597 f423      	BRVC __MULF124
000598 f31c      	BRLT __ZERORES
                 __MULF125:
000599 2000      	TST  R0
00059a f33a      	BRMI __MINRES
00059b cfec      	RJMP __MAXRES
                 __MULF124:
00059c 920f      	PUSH R0
00059d 931f      	PUSH R17
00059e 932f      	PUSH R18
00059f 933f      	PUSH R19
0005a0 934f      	PUSH R20
0005a1 2711      	CLR  R17
0005a2 2722      	CLR  R18
0005a3 2799      	CLR  R25
0005a4 9f68      	MUL  R22,R24
0005a5 01a0      	MOVW R20,R0
0005a6 9f8f      	MUL  R24,R31
0005a7 2d30      	MOV  R19,R0
0005a8 0d41      	ADD  R20,R1
0005a9 1f59      	ADC  R21,R25
0005aa 9f6b      	MUL  R22,R27
0005ab 0d30      	ADD  R19,R0
0005ac 1d41      	ADC  R20,R1
0005ad 1f59      	ADC  R21,R25
0005ae 9f8e      	MUL  R24,R30
0005af d027      	RCALL __MULF126
0005b0 9fbf      	MUL  R27,R31
0005b1 d025      	RCALL __MULF126
0005b2 9f6a      	MUL  R22,R26
0005b3 d023      	RCALL __MULF126
0005b4 9fbe      	MUL  R27,R30
0005b5 d01d      	RCALL __MULF127
0005b6 9faf      	MUL  R26,R31
0005b7 d01b      	RCALL __MULF127
0005b8 9fae      	MUL  R26,R30
0005b9 0d11      	ADD  R17,R1
0005ba 1f29      	ADC  R18,R25
0005bb 1f39      	ADC  R19,R25
0005bc 1f49      	ADC  R20,R25
0005bd 1f59      	ADC  R21,R25
0005be 2fe3      	MOV  R30,R19
0005bf 2ff4      	MOV  R31,R20
0005c0 2f65      	MOV  R22,R21
0005c1 2f52      	MOV  R21,R18
0005c2 914f      	POP  R20
0005c3 913f      	POP  R19
0005c4 912f      	POP  R18
0005c5 911f      	POP  R17
0005c6 900f      	POP  R0
0005c7 2366      	TST  R22
0005c8 f02a      	BRMI __MULF122
0005c9 0f55      	LSL  R21
0005ca 1fee      	ROL  R30
0005cb 1fff      	ROL  R31
0005cc 1f66      	ROL  R22
0005cd c002      	RJMP __MULF123
                 __MULF122:
0005ce 9573      	INC  R23
0005cf f24b      	BRVS __MULF125
                 __MULF123:
0005d0 ded4      	RCALL __ROUND_REPACK
0005d1 915f      	POP  R21
0005d2 9508      	RET
                 
                 __MULF127:
0005d3 0d10      	ADD  R17,R0
0005d4 1d21      	ADC  R18,R1
0005d5 1f39      	ADC  R19,R25
0005d6 c002      	RJMP __MULF128
                 __MULF126:
0005d7 0d20      	ADD  R18,R0
0005d8 1d31      	ADC  R19,R1
                 __MULF128:
0005d9 1f49      	ADC  R20,R25
0005da 1f59      	ADC  R21,R25
0005db 9508      	RET
                 
                 __ADDW2R15:
0005dc 2400      	CLR  R0
0005dd 0daf      	ADD  R26,R15
0005de 1db0      	ADC  R27,R0
0005df 9508      	RET
                 
                 __ANEGW1:
0005e0 95f1      	NEG  R31
0005e1 95e1      	NEG  R30
0005e2 40f0      	SBCI R31,0
0005e3 9508      	RET
                 
                 __ANEGD1:
0005e4 95f0      	COM  R31
0005e5 9560      	COM  R22
0005e6 9570      	COM  R23
0005e7 95e1      	NEG  R30
0005e8 4fff      	SBCI R31,-1
0005e9 4f6f      	SBCI R22,-1
0005ea 4f7f      	SBCI R23,-1
0005eb 9508      	RET
                 
                 __CWD1:
0005ec 2f6f      	MOV  R22,R31
0005ed 0f66      	ADD  R22,R22
0005ee 0b66      	SBC  R22,R22
0005ef 2f76      	MOV  R23,R22
0005f0 9508      	RET
                 
                 __GETW1P:
0005f1 91ed      	LD   R30,X+
0005f2 91fc      	LD   R31,X
0005f3 9711      	SBIW R26,1
0005f4 9508      	RET
                 
                 __GETW1PF:
0005f5 9005      	LPM  R0,Z+
0005f6 91f4      	LPM  R31,Z
0005f7 2de0      	MOV  R30,R0
0005f8 9508      	RET
                 
                 __PUTPARD1:
0005f9 937a      	ST   -Y,R23
0005fa 936a      	ST   -Y,R22
0005fb 93fa      	ST   -Y,R31
0005fc 93ea      	ST   -Y,R30
0005fd 9508      	RET
                 
                 __SAVELOCR6:
0005fe 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005ff 934a      	ST   -Y,R20
                 __SAVELOCR4:
000600 933a      	ST   -Y,R19
                 __SAVELOCR3:
000601 932a      	ST   -Y,R18
                 __SAVELOCR2:
000602 931a      	ST   -Y,R17
000603 930a      	ST   -Y,R16
000604 9508      	RET
                 
                 __LOADLOCR6:
000605 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000606 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000607 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000608 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000609 8119      	LDD  R17,Y+1
00060a 8108      	LD   R16,Y
00060b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  36 r1 :  18 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :  12 r7 :   4 
r8 :   7 r9 :   5 r10:   4 r11:   2 r12:   2 r13:   4 r14:   0 r15:   6 
r16:  34 r17:  29 r18:  36 r19:  16 r20:  25 r21:  72 r22:  47 r23:  37 
r24:  41 r25:  29 r26: 129 r27:  66 r28:  17 r29:   1 r30: 258 r31: 102 
x  :  24 y  : 194 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  11 
adiw  :  27 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  27 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   6 brmi  :   7 brne  :  36 brpl  :   6 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   0 call  :  65 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :  11 cpc   :   9 cpi   :  46 cpse  :   0 dec   :  10 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  24 ld    :  39 ldd   :  78 ldi   : 169 
lds   :   0 lpm   :  14 lsl   :  11 lsr   :   2 mov   :  42 movw  :  36 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   7 out   :  32 pop   :  14 push  :  13 rcall :  53 ret   :  44 
reti  :   1 rjmp  :  84 rol   :  14 ror   :  12 sbc   :   4 sbci  :   9 
sbi   :   7 sbic  :   0 sbis  :   0 sbiw  :  22 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  73 std   :  31 sts   :   2 sub   :   4 subi  :  19 swap  :   1 
tst   :  16 wdr   :   1 
Instructions used: 73 out of 116 (62.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c18   2772    324   3096   16384  18.9%
[.dseg] 0x000060 0x00023c      0    220    220    1024  21.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
