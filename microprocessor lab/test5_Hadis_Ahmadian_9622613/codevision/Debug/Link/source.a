;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;
;int duty_cycle;
;int coils[7]={0X10,0X20,0X40,0X80,0};

	.DSEG
;int i;
;int round=0;
;char active=0;
;
;void port_init()
;{

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000E 
; 0001 000F     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 0010     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0011 
; 0001 0012     DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0013     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0014 
; 0001 0015     DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 0016     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0017 
; 0001 0018     DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0019     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 001A 
; 0001 001B }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;
;void timer_init()
; 0001 001F {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0020 // Timer/Counter 0 initialization
; 0001 0021 // Mode: Phase correct PWM top=0xFF
; 0001 0022 // OC0 output: Non-Inverted PWM
; 0001 0023 // Timer Period: 65.28 ms
; 0001 0024 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0025 TCNT0=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0026 
; 0001 0027 
; 0001 0028 
; 0001 0029 // Timer/Counter 2 initialization
; 0001 002A // Mode: Normal top=0xFF
; 0001 002B // OC2 output: Disconnected
; 0001 002C // Timer Period: 32 ms
; 0001 002D ASSR=0<<AS2;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 002E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 002F TCNT2=0x06;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0030 OCR2=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0031 
; 0001 0032 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0033 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0034 
; 0001 0035 
; 0001 0036 
; 0001 0037 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;
;void init_all()
; 0001 003B {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 003C port_init();
;PCODE: $00000035 VOL: 0
; 0001 003D timer_init();
;PCODE: $00000036 VOL: 0
; 0001 003E lcd_init(16);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 003F }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;
;
;void one()
; 0001 0044 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0045 
; 0001 0046 OCR0=0x1A;// duty=10;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0047 lcd_clear();
;PCODE: $0000003F VOL: 0
; 0001 0048 lcd_puts("question 1 :\nduty:10%");
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0049 delay_ms(2000);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 004A 
; 0001 004B OCR0=0x4D;// duty=30
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 004C lcd_clear();
;PCODE: $00000047 VOL: 0
; 0001 004D lcd_puts("question 1 :\nduty:30%");
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 004E delay_ms(2000);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 004F 
; 0001 0050 OCR0=0x80;// duty=50
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 0051 lcd_clear();
;PCODE: $0000004F VOL: 0
; 0001 0052 lcd_puts("question 1 :\nduty:50%");
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 0053 delay_ms(2000);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 0054 
; 0001 0055 OCR0=0xB2; // duty=70
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0056 lcd_clear();
;PCODE: $00000057 VOL: 0
; 0001 0057 lcd_puts("question 1 :\nduty:70%");
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 0058 delay_ms(2000);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 0059 
; 0001 005A OCR0=0xE5;// duty=90
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 005B lcd_clear();
;PCODE: $0000005F VOL: 0
; 0001 005C lcd_puts("question 1 :\nduty:90%");
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 005D delay_ms(2000);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 005E 
; 0001 005F }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0

	.DSEG
_0x20004:
	.BYTE 0x6E
;
;
;int calculate(int number)
; 0001 0063 {

	.CSEG
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0064     duty_cycle=((90.0/255.0)*number)+5;
;PCODE: $00000069 VOL: 0
;	number -> Y+0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0065     return 2.55 * duty_cycle;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0066 }
;PCODE: $00000079 VOL: 0
;
;void three()
; 0001 0069 {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 006A     char tmp[2];
; 0001 006B     lcd_clear();
;PCODE: $0000007C VOL: 0
;	tmp -> Y+0
;PCODE: $0000007D VOL: 0
; 0001 006C     lcd_puts("question 3 :\n");
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 006D     OCR0=  calculate(PINA);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 006E     sprintf(tmp, "%d", duty_cycle);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0001 006F     lcd_puts("duty= ");
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 0070     lcd_puts(tmp);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0071     delay_ms(5000);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0072 
; 0001 0073 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0

	.DSEG
_0x20005:
	.BYTE 0x15
;
;
;
;
;void four()
; 0001 0079 {

	.CSEG
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 007A active=1;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 007B i=0;
;PCODE: $000000A0 VOL: 0
; 0001 007C }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;
;
;interrupt [TIM2_OVF] void timer2_ovf_isr(void){
; 0001 0080 interrupt [5] void timer2_ovf_isr(void){
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0081 
; 0001 0082 TCNT2=0x06;  //Reinitialize
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 0083 
; 0001 0084 //speed(rpm) = ( 1/(32ms*4) ) * 60 =     468.75 rpm
; 0001 0085 
; 0001 0086     if(active){
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 0087 
; 0001 0088         round++;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 0089         lcd_gotoxy(0,0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 008A         lcd_puts("question4/speed:\n")   ;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 008B 
; 0001 008C 
; 0001 008D         PORTB=coils[i];
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 008E 
; 0001 008F         if(round<=100){
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 0090              PORTD.0 = 0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 0091              PORTD.1 = 1;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 0092              i++;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0001 0093              if(i>=4)
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 0094                 i=0;
;PCODE: $000000C6 VOL: 0
; 0001 0095 
; 0001 0096              lcd_puts("468.75 rpm RIGHT");
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 0097         }
; 0001 0098 
; 0001 0099         else if(round>100&&round<200)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0001 009A         {
; 0001 009B                PORTD.0 = 0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 009C                PORTD.1 = 0;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 009D                i=4;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 009E                lcd_puts("0 rpm     STOP   ");
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0001 009F         }
; 0001 00A0 
; 0001 00A1         else if(round>=100&&round<300)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0001 00A2         {
; 0001 00A3              PORTD.0 = 1;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 00A4              PORTD.1 = 0;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0001 00A5              i--;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0001 00A6              if(i<0)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0001 00A7                 i=3;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 00A8              lcd_puts("468.75 rpm LEFT  ");
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0001 00A9         }
; 0001 00AA 
; 0001 00AB         else{ i=4; }
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0001 00AC 
; 0001 00AD     }
; 0001 00AE 
; 0001 00AF 
; 0001 00B0 }
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0

	.DSEG
_0x20007:
	.BYTE 0x47
